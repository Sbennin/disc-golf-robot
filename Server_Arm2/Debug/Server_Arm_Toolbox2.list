
Server_Arm_Toolbox2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e834  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001888  0800e974  0800e974  0001e974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080101fc  080101fc  000201fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010204  08010204  00020204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010208  08010208  00020208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  20000008  0801020c  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000094  08010298  00030094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000cc  080102cd  000300cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019b0  200000e0  080102de  000300e0  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  20001a90  080102de  00031a90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00040000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  080102de  000301e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .comment      00000043  00000000  00000000  00030a97  2**0
                  CONTENTS, READONLY
 16 .debug_info   000367ef  00000000  00000000  00030ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000741e  00000000  00000000  000672c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003180  00000000  00000000  0006e6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002611  00000000  00000000  00071868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002f233  00000000  00000000  00073e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00038d01  00000000  00000000  000a30ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00107bee  00000000  00000000  000dbdad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000d970  00000000  00000000  001e399c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000007f  00000000  00000000  001f130c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000e0 	.word	0x200000e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e95c 	.word	0x0800e95c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000e4 	.word	0x200000e4
 800017c:	0800e95c 	.word	0x0800e95c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2uiz>:
 80009cc:	004a      	lsls	r2, r1, #1
 80009ce:	d211      	bcs.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009d4:	d211      	bcs.n	80009fa <__aeabi_d2uiz+0x2e>
 80009d6:	d50d      	bpl.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e0:	d40e      	bmi.n	8000a00 <__aeabi_d2uiz+0x34>
 80009e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ee:	fa23 f002 	lsr.w	r0, r3, r2
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fe:	d102      	bne.n	8000a06 <__aeabi_d2uiz+0x3a>
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	4770      	bx	lr
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	4770      	bx	lr

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b970 	b.w	8000d04 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9e08      	ldr	r6, [sp, #32]
 8000a42:	460d      	mov	r5, r1
 8000a44:	4604      	mov	r4, r0
 8000a46:	460f      	mov	r7, r1
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d14a      	bne.n	8000ae2 <__udivmoddi4+0xa6>
 8000a4c:	428a      	cmp	r2, r1
 8000a4e:	4694      	mov	ip, r2
 8000a50:	d965      	bls.n	8000b1e <__udivmoddi4+0xe2>
 8000a52:	fab2 f382 	clz	r3, r2
 8000a56:	b143      	cbz	r3, 8000a6a <__udivmoddi4+0x2e>
 8000a58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a5c:	f1c3 0220 	rsb	r2, r3, #32
 8000a60:	409f      	lsls	r7, r3
 8000a62:	fa20 f202 	lsr.w	r2, r0, r2
 8000a66:	4317      	orrs	r7, r2
 8000a68:	409c      	lsls	r4, r3
 8000a6a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a6e:	fa1f f58c 	uxth.w	r5, ip
 8000a72:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a76:	0c22      	lsrs	r2, r4, #16
 8000a78:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a7c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a80:	fb01 f005 	mul.w	r0, r1, r5
 8000a84:	4290      	cmp	r0, r2
 8000a86:	d90a      	bls.n	8000a9e <__udivmoddi4+0x62>
 8000a88:	eb1c 0202 	adds.w	r2, ip, r2
 8000a8c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a90:	f080 811c 	bcs.w	8000ccc <__udivmoddi4+0x290>
 8000a94:	4290      	cmp	r0, r2
 8000a96:	f240 8119 	bls.w	8000ccc <__udivmoddi4+0x290>
 8000a9a:	3902      	subs	r1, #2
 8000a9c:	4462      	add	r2, ip
 8000a9e:	1a12      	subs	r2, r2, r0
 8000aa0:	b2a4      	uxth	r4, r4
 8000aa2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aa6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aaa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aae:	fb00 f505 	mul.w	r5, r0, r5
 8000ab2:	42a5      	cmp	r5, r4
 8000ab4:	d90a      	bls.n	8000acc <__udivmoddi4+0x90>
 8000ab6:	eb1c 0404 	adds.w	r4, ip, r4
 8000aba:	f100 32ff 	add.w	r2, r0, #4294967295
 8000abe:	f080 8107 	bcs.w	8000cd0 <__udivmoddi4+0x294>
 8000ac2:	42a5      	cmp	r5, r4
 8000ac4:	f240 8104 	bls.w	8000cd0 <__udivmoddi4+0x294>
 8000ac8:	4464      	add	r4, ip
 8000aca:	3802      	subs	r0, #2
 8000acc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ad0:	1b64      	subs	r4, r4, r5
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	b11e      	cbz	r6, 8000ade <__udivmoddi4+0xa2>
 8000ad6:	40dc      	lsrs	r4, r3
 8000ad8:	2300      	movs	r3, #0
 8000ada:	e9c6 4300 	strd	r4, r3, [r6]
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	428b      	cmp	r3, r1
 8000ae4:	d908      	bls.n	8000af8 <__udivmoddi4+0xbc>
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	f000 80ed 	beq.w	8000cc6 <__udivmoddi4+0x28a>
 8000aec:	2100      	movs	r1, #0
 8000aee:	e9c6 0500 	strd	r0, r5, [r6]
 8000af2:	4608      	mov	r0, r1
 8000af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af8:	fab3 f183 	clz	r1, r3
 8000afc:	2900      	cmp	r1, #0
 8000afe:	d149      	bne.n	8000b94 <__udivmoddi4+0x158>
 8000b00:	42ab      	cmp	r3, r5
 8000b02:	d302      	bcc.n	8000b0a <__udivmoddi4+0xce>
 8000b04:	4282      	cmp	r2, r0
 8000b06:	f200 80f8 	bhi.w	8000cfa <__udivmoddi4+0x2be>
 8000b0a:	1a84      	subs	r4, r0, r2
 8000b0c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b10:	2001      	movs	r0, #1
 8000b12:	4617      	mov	r7, r2
 8000b14:	2e00      	cmp	r6, #0
 8000b16:	d0e2      	beq.n	8000ade <__udivmoddi4+0xa2>
 8000b18:	e9c6 4700 	strd	r4, r7, [r6]
 8000b1c:	e7df      	b.n	8000ade <__udivmoddi4+0xa2>
 8000b1e:	b902      	cbnz	r2, 8000b22 <__udivmoddi4+0xe6>
 8000b20:	deff      	udf	#255	; 0xff
 8000b22:	fab2 f382 	clz	r3, r2
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f040 8090 	bne.w	8000c4c <__udivmoddi4+0x210>
 8000b2c:	1a8a      	subs	r2, r1, r2
 8000b2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b32:	fa1f fe8c 	uxth.w	lr, ip
 8000b36:	2101      	movs	r1, #1
 8000b38:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b3c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b40:	0c22      	lsrs	r2, r4, #16
 8000b42:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b46:	fb0e f005 	mul.w	r0, lr, r5
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x124>
 8000b4e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b52:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x122>
 8000b58:	4290      	cmp	r0, r2
 8000b5a:	f200 80cb 	bhi.w	8000cf4 <__udivmoddi4+0x2b8>
 8000b5e:	4645      	mov	r5, r8
 8000b60:	1a12      	subs	r2, r2, r0
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b68:	fb07 2210 	mls	r2, r7, r0, r2
 8000b6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b70:	fb0e fe00 	mul.w	lr, lr, r0
 8000b74:	45a6      	cmp	lr, r4
 8000b76:	d908      	bls.n	8000b8a <__udivmoddi4+0x14e>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b80:	d202      	bcs.n	8000b88 <__udivmoddi4+0x14c>
 8000b82:	45a6      	cmp	lr, r4
 8000b84:	f200 80bb 	bhi.w	8000cfe <__udivmoddi4+0x2c2>
 8000b88:	4610      	mov	r0, r2
 8000b8a:	eba4 040e 	sub.w	r4, r4, lr
 8000b8e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b92:	e79f      	b.n	8000ad4 <__udivmoddi4+0x98>
 8000b94:	f1c1 0720 	rsb	r7, r1, #32
 8000b98:	408b      	lsls	r3, r1
 8000b9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ba2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ba6:	fa20 f307 	lsr.w	r3, r0, r7
 8000baa:	40fd      	lsrs	r5, r7
 8000bac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bb0:	4323      	orrs	r3, r4
 8000bb2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bb6:	fa1f fe8c 	uxth.w	lr, ip
 8000bba:	fb09 5518 	mls	r5, r9, r8, r5
 8000bbe:	0c1c      	lsrs	r4, r3, #16
 8000bc0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bc4:	fb08 f50e 	mul.w	r5, r8, lr
 8000bc8:	42a5      	cmp	r5, r4
 8000bca:	fa02 f201 	lsl.w	r2, r2, r1
 8000bce:	fa00 f001 	lsl.w	r0, r0, r1
 8000bd2:	d90b      	bls.n	8000bec <__udivmoddi4+0x1b0>
 8000bd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bdc:	f080 8088 	bcs.w	8000cf0 <__udivmoddi4+0x2b4>
 8000be0:	42a5      	cmp	r5, r4
 8000be2:	f240 8085 	bls.w	8000cf0 <__udivmoddi4+0x2b4>
 8000be6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bea:	4464      	add	r4, ip
 8000bec:	1b64      	subs	r4, r4, r5
 8000bee:	b29d      	uxth	r5, r3
 8000bf0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bf4:	fb09 4413 	mls	r4, r9, r3, r4
 8000bf8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bfc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c00:	45a6      	cmp	lr, r4
 8000c02:	d908      	bls.n	8000c16 <__udivmoddi4+0x1da>
 8000c04:	eb1c 0404 	adds.w	r4, ip, r4
 8000c08:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c0c:	d26c      	bcs.n	8000ce8 <__udivmoddi4+0x2ac>
 8000c0e:	45a6      	cmp	lr, r4
 8000c10:	d96a      	bls.n	8000ce8 <__udivmoddi4+0x2ac>
 8000c12:	3b02      	subs	r3, #2
 8000c14:	4464      	add	r4, ip
 8000c16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c1e:	eba4 040e 	sub.w	r4, r4, lr
 8000c22:	42ac      	cmp	r4, r5
 8000c24:	46c8      	mov	r8, r9
 8000c26:	46ae      	mov	lr, r5
 8000c28:	d356      	bcc.n	8000cd8 <__udivmoddi4+0x29c>
 8000c2a:	d053      	beq.n	8000cd4 <__udivmoddi4+0x298>
 8000c2c:	b156      	cbz	r6, 8000c44 <__udivmoddi4+0x208>
 8000c2e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c32:	eb64 040e 	sbc.w	r4, r4, lr
 8000c36:	fa04 f707 	lsl.w	r7, r4, r7
 8000c3a:	40ca      	lsrs	r2, r1
 8000c3c:	40cc      	lsrs	r4, r1
 8000c3e:	4317      	orrs	r7, r2
 8000c40:	e9c6 7400 	strd	r7, r4, [r6]
 8000c44:	4618      	mov	r0, r3
 8000c46:	2100      	movs	r1, #0
 8000c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4c:	f1c3 0120 	rsb	r1, r3, #32
 8000c50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c54:	fa20 f201 	lsr.w	r2, r0, r1
 8000c58:	fa25 f101 	lsr.w	r1, r5, r1
 8000c5c:	409d      	lsls	r5, r3
 8000c5e:	432a      	orrs	r2, r5
 8000c60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c70:	0c11      	lsrs	r1, r2, #16
 8000c72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c76:	fb00 f50e 	mul.w	r5, r0, lr
 8000c7a:	428d      	cmp	r5, r1
 8000c7c:	fa04 f403 	lsl.w	r4, r4, r3
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x258>
 8000c82:	eb1c 0101 	adds.w	r1, ip, r1
 8000c86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c8a:	d22f      	bcs.n	8000cec <__udivmoddi4+0x2b0>
 8000c8c:	428d      	cmp	r5, r1
 8000c8e:	d92d      	bls.n	8000cec <__udivmoddi4+0x2b0>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4461      	add	r1, ip
 8000c94:	1b49      	subs	r1, r1, r5
 8000c96:	b292      	uxth	r2, r2
 8000c98:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c9c:	fb07 1115 	mls	r1, r7, r5, r1
 8000ca0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ca4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ca8:	4291      	cmp	r1, r2
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x282>
 8000cac:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cb4:	d216      	bcs.n	8000ce4 <__udivmoddi4+0x2a8>
 8000cb6:	4291      	cmp	r1, r2
 8000cb8:	d914      	bls.n	8000ce4 <__udivmoddi4+0x2a8>
 8000cba:	3d02      	subs	r5, #2
 8000cbc:	4462      	add	r2, ip
 8000cbe:	1a52      	subs	r2, r2, r1
 8000cc0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cc4:	e738      	b.n	8000b38 <__udivmoddi4+0xfc>
 8000cc6:	4631      	mov	r1, r6
 8000cc8:	4630      	mov	r0, r6
 8000cca:	e708      	b.n	8000ade <__udivmoddi4+0xa2>
 8000ccc:	4639      	mov	r1, r7
 8000cce:	e6e6      	b.n	8000a9e <__udivmoddi4+0x62>
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	e6fb      	b.n	8000acc <__udivmoddi4+0x90>
 8000cd4:	4548      	cmp	r0, r9
 8000cd6:	d2a9      	bcs.n	8000c2c <__udivmoddi4+0x1f0>
 8000cd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cdc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	e7a3      	b.n	8000c2c <__udivmoddi4+0x1f0>
 8000ce4:	4645      	mov	r5, r8
 8000ce6:	e7ea      	b.n	8000cbe <__udivmoddi4+0x282>
 8000ce8:	462b      	mov	r3, r5
 8000cea:	e794      	b.n	8000c16 <__udivmoddi4+0x1da>
 8000cec:	4640      	mov	r0, r8
 8000cee:	e7d1      	b.n	8000c94 <__udivmoddi4+0x258>
 8000cf0:	46d0      	mov	r8, sl
 8000cf2:	e77b      	b.n	8000bec <__udivmoddi4+0x1b0>
 8000cf4:	3d02      	subs	r5, #2
 8000cf6:	4462      	add	r2, ip
 8000cf8:	e732      	b.n	8000b60 <__udivmoddi4+0x124>
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	e70a      	b.n	8000b14 <__udivmoddi4+0xd8>
 8000cfe:	4464      	add	r4, ip
 8000d00:	3802      	subs	r0, #2
 8000d02:	e742      	b.n	8000b8a <__udivmoddi4+0x14e>

08000d04 <__aeabi_idiv0>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <LL_EXTI_EnableIT_32_63+0x24>)
 8000d12:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000d16:	4905      	ldr	r1, [pc, #20]	; (8000d2c <LL_EXTI_EnableIT_32_63+0x24>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	58000800 	.word	0x58000800

08000d30 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4013      	ands	r3, r2
 8000d52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d54:	68fb      	ldr	r3, [r7, #12]
}
 8000d56:	bf00      	nop
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b085      	sub	sp, #20
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d6e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000d72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d82:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
}
 8000d8e:	bf00      	nop
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000d9e:	f002 fd0f 	bl	80037c0 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000da2:	f002 fd13 	bl	80037cc <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000da6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000daa:	f7ff ffad 	bl	8000d08 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000dae:	f00a f805 	bl	800adbc <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000db2:	f000 f821 	bl	8000df8 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000db6:	f000 f8c1 	bl	8000f3c <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000dba:	bf00      	nop
}
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000dc0:	b5b0      	push	{r4, r5, r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <APPD_EnableCPU2+0x34>)
 8000dc8:	1d3c      	adds	r4, r7, #4
 8000dca:	461d      	mov	r5, r3
 8000dcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dd4:	c403      	stmia	r4!, {r0, r1}
 8000dd6:	8022      	strh	r2, [r4, #0]
 8000dd8:	3402      	adds	r4, #2
 8000dda:	0c13      	lsrs	r3, r2, #16
 8000ddc:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000dde:	f009 ff01 	bl	800abe4 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	4618      	mov	r0, r3
 8000de6:	f009 f992 	bl	800a10e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000dea:	bf00      	nop
}
 8000dec:	3720      	adds	r7, #32
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bdb0      	pop	{r4, r5, r7, pc}
 8000df2:	bf00      	nop
 8000df4:	0800e974 	.word	0x0800e974

08000df8 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000e18:	2300      	movs	r3, #0
 8000e1a:	77fb      	strb	r3, [r7, #31]
 8000e1c:	e036      	b.n	8000e8c <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000e1e:	7ffb      	ldrb	r3, [r7, #31]
 8000e20:	4a43      	ldr	r2, [pc, #268]	; (8000f30 <APPD_SetCPU2GpioConfig+0x138>)
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	4413      	add	r3, r2
 8000e26:	799b      	ldrb	r3, [r3, #6]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d02c      	beq.n	8000e86 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000e2c:	7ffb      	ldrb	r3, [r7, #31]
 8000e2e:	4a40      	ldr	r2, [pc, #256]	; (8000f30 <APPD_SetCPU2GpioConfig+0x138>)
 8000e30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000e34:	4a3f      	ldr	r2, [pc, #252]	; (8000f34 <APPD_SetCPU2GpioConfig+0x13c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d01b      	beq.n	8000e72 <APPD_SetCPU2GpioConfig+0x7a>
 8000e3a:	4a3e      	ldr	r2, [pc, #248]	; (8000f34 <APPD_SetCPU2GpioConfig+0x13c>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d821      	bhi.n	8000e84 <APPD_SetCPU2GpioConfig+0x8c>
 8000e40:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e44:	d003      	beq.n	8000e4e <APPD_SetCPU2GpioConfig+0x56>
 8000e46:	4a3c      	ldr	r2, [pc, #240]	; (8000f38 <APPD_SetCPU2GpioConfig+0x140>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d009      	beq.n	8000e60 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8000e4c:	e01a      	b.n	8000e84 <APPD_SetCPU2GpioConfig+0x8c>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000e4e:	7ffb      	ldrb	r3, [r7, #31]
 8000e50:	4a37      	ldr	r2, [pc, #220]	; (8000f30 <APPD_SetCPU2GpioConfig+0x138>)
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	4413      	add	r3, r2
 8000e56:	889a      	ldrh	r2, [r3, #4]
 8000e58:	8bbb      	ldrh	r3, [r7, #28]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	83bb      	strh	r3, [r7, #28]
          break;
 8000e5e:	e012      	b.n	8000e86 <APPD_SetCPU2GpioConfig+0x8e>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000e60:	7ffb      	ldrb	r3, [r7, #31]
 8000e62:	4a33      	ldr	r2, [pc, #204]	; (8000f30 <APPD_SetCPU2GpioConfig+0x138>)
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	4413      	add	r3, r2
 8000e68:	889a      	ldrh	r2, [r3, #4]
 8000e6a:	8b7b      	ldrh	r3, [r7, #26]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	837b      	strh	r3, [r7, #26]
          break;
 8000e70:	e009      	b.n	8000e86 <APPD_SetCPU2GpioConfig+0x8e>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000e72:	7ffb      	ldrb	r3, [r7, #31]
 8000e74:	4a2e      	ldr	r2, [pc, #184]	; (8000f30 <APPD_SetCPU2GpioConfig+0x138>)
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	4413      	add	r3, r2
 8000e7a:	889a      	ldrh	r2, [r3, #4]
 8000e7c:	8b3b      	ldrh	r3, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	833b      	strh	r3, [r7, #24]
          break;
 8000e82:	e000      	b.n	8000e86 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8000e84:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000e86:	7ffb      	ldrb	r3, [r7, #31]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	77fb      	strb	r3, [r7, #31]
 8000e8c:	7ffb      	ldrb	r3, [r7, #31]
 8000e8e:	2b25      	cmp	r3, #37	; 0x25
 8000e90:	d9c5      	bls.n	8000e1e <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000e96:	2301      	movs	r3, #1
 8000e98:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000e9e:	8bbb      	ldrh	r3, [r7, #28]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d014      	beq.n	8000ece <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000ea4:	8bbb      	ldrh	r3, [r7, #28]
 8000ea6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f7ff ff41 	bl	8000d30 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f7ff ff57 	bl	8000d62 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ebc:	f003 f958 	bl	8004170 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000ec0:	8bbb      	ldrh	r3, [r7, #28]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eca:	f003 fac1 	bl	8004450 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000ece:	8b7b      	ldrh	r3, [r7, #26]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d012      	beq.n	8000efa <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000ed4:	8b7b      	ldrh	r3, [r7, #26]
 8000ed6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed8:	2002      	movs	r0, #2
 8000eda:	f7ff ff29 	bl	8000d30 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000ede:	2002      	movs	r0, #2
 8000ee0:	f7ff ff3f 	bl	8000d62 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4813      	ldr	r0, [pc, #76]	; (8000f38 <APPD_SetCPU2GpioConfig+0x140>)
 8000eea:	f003 f941 	bl	8004170 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000eee:	8b7b      	ldrh	r3, [r7, #26]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4810      	ldr	r0, [pc, #64]	; (8000f38 <APPD_SetCPU2GpioConfig+0x140>)
 8000ef6:	f003 faab 	bl	8004450 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000efa:	8b3b      	ldrh	r3, [r7, #24]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d013      	beq.n	8000f28 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000f00:	8b3b      	ldrh	r3, [r7, #24]
 8000f02:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f04:	2004      	movs	r0, #4
 8000f06:	f7ff ff13 	bl	8000d30 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000f0a:	2004      	movs	r0, #4
 8000f0c:	f7ff ff29 	bl	8000d62 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	4619      	mov	r1, r3
 8000f14:	4807      	ldr	r0, [pc, #28]	; (8000f34 <APPD_SetCPU2GpioConfig+0x13c>)
 8000f16:	f003 f92b 	bl	8004170 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000f1a:	8b3b      	ldrh	r3, [r7, #24]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4804      	ldr	r0, [pc, #16]	; (8000f34 <APPD_SetCPU2GpioConfig+0x13c>)
 8000f22:	f003 fa95 	bl	8004450 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000f26:	bf00      	nop
 8000f28:	bf00      	nop
}
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	0800fe7c 	.word	0x0800fe7c
 8000f34:	48000800 	.word	0x48000800
 8000f38:	48000400 	.word	0x48000400

08000f3c <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000f40:	bf00      	nop
}
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000f4e:	f001 feb7 	bl	8002cc0 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000f52:	bf00      	nop
}
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b084      	sub	sp, #16
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	60f8      	str	r0, [r7, #12]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000f64:	897a      	ldrh	r2, [r7, #10]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68f9      	ldr	r1, [r7, #12]
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f001 fc1e 	bl	80027ac <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000f70:	bf00      	nop
}
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <LL_C2_PWR_SetPowerMode+0x28>)
 8000f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f86:	f023 0207 	bic.w	r2, r3, #7
 8000f8a:	4905      	ldr	r1, [pc, #20]	; (8000fa0 <LL_C2_PWR_SetPowerMode+0x28>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	58000400 	.word	0x58000400

08000fa4 <LL_EXTI_EnableIT_32_63>:
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <LL_EXTI_EnableIT_32_63+0x24>)
 8000fae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000fb2:	4905      	ldr	r1, [pc, #20]	; (8000fc8 <LL_EXTI_EnableIT_32_63+0x24>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	58000800 	.word	0x58000800

08000fcc <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000fda:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000fe6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	cafecafe 	.word	0xcafecafe

08001008 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800101a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4313      	orrs	r3, r2
 8001022:	608b      	str	r3, [r1, #8]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <LL_DBGMCU_GetDeviceID+0x18>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e0042000 	.word	0xe0042000

0800104c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <LL_DBGMCU_GetRevisionID+0x18>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	0c1b      	lsrs	r3, r3, #16
 8001056:	b29b      	uxth	r3, r3
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e0042000 	.word	0xe0042000

08001068 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <LL_LPM_EnableSleep+0x1c>)
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	4a04      	ldr	r2, [pc, #16]	; (8001084 <LL_LPM_EnableSleep+0x1c>)
 8001072:	f023 0304 	bic.w	r3, r3, #4
 8001076:	6113      	str	r3, [r2, #16]
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	22ff      	movs	r2, #255	; 0xff
 8001094:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	22ca      	movs	r2, #202	; 0xca
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2253      	movs	r2, #83	; 0x53
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f023 0207 	bic.w	r2, r3, #7
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	431a      	orrs	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	609a      	str	r2, [r3, #8]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <MX_APPE_Config+0x18>)
 80010ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010f2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80010f4:	f000 f826 	bl	8001144 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80010f8:	f000 f82b 	bl	8001152 <Config_HSE>

  return;
 80010fc:	bf00      	nop
}
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	58004000 	.word	0x58004000

08001104 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001108:	f000 f837 	bl	800117a <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 800110c:	f000 f850 	bl	80011b0 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001110:	4904      	ldr	r1, [pc, #16]	; (8001124 <MX_APPE_Init+0x20>)
 8001112:	2000      	movs	r0, #0
 8001114:	f001 f958 	bl	80023c8 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8001118:	f7ff fe3f 	bl	8000d9a <APPD_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800111c:	f000 f856 	bl	80011cc <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8001120:	bf00      	nop
}
 8001122:	bd80      	pop	{r7, pc}
 8001124:	200001dc 	.word	0x200001dc

08001128 <Init_Smps>:

void Init_Smps(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 800112c:	bf00      	nop
}
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <Init_Exti>:

void Init_Exti(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800113a:	2050      	movs	r0, #80	; 0x50
 800113c:	f7ff ff32 	bl	8000fa4 <LL_EXTI_EnableIT_32_63>

  return;
 8001140:	bf00      	nop
}
 8001142:	bd80      	pop	{r7, pc}

08001144 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001148:	bf00      	nop
}
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001158:	2000      	movs	r0, #0
 800115a:	f009 fead 	bl	800aeb8 <OTP_Read>
 800115e:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d005      	beq.n	8001172 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	799b      	ldrb	r3, [r3, #6]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ff2e 	bl	8000fcc <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001170:	bf00      	nop
 8001172:	bf00      	nop
}
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <System_Init>:

static void System_Init(void)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	af00      	add	r7, sp, #0
  Init_Smps();
 800117e:	f7ff ffd3 	bl	8001128 <Init_Smps>

  Init_Exti();
 8001182:	f7ff ffd8 	bl	8001136 <Init_Exti>

  Init_Rtc();
 8001186:	f000 f803 	bl	8001190 <Init_Rtc>

  return;
 800118a:	bf00      	nop
}
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001194:	4805      	ldr	r0, [pc, #20]	; (80011ac <Init_Rtc+0x1c>)
 8001196:	f7ff ff84 	bl	80010a2 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800119a:	2100      	movs	r1, #0
 800119c:	4803      	ldr	r0, [pc, #12]	; (80011ac <Init_Rtc+0x1c>)
 800119e:	f7ff ff90 	bl	80010c2 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80011a2:	4802      	ldr	r0, [pc, #8]	; (80011ac <Init_Rtc+0x1c>)
 80011a4:	f7ff ff70 	bl	8001088 <LL_RTC_EnableWriteProtection>

  return;
 80011a8:	bf00      	nop
}
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40002800 	.word	0x40002800

080011b0 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80011b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80011b8:	f7ff ff26 	bl	8001008 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80011bc:	f00c f94c 	bl	800d458 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80011c0:	2004      	movs	r0, #4
 80011c2:	f7ff fed9 	bl	8000f78 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80011c6:	bf00      	nop
}
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 80011d2:	f009 fb51 	bl	800a878 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80011d6:	4a11      	ldr	r2, [pc, #68]	; (800121c <appe_Tl_Init+0x50>)
 80011d8:	2100      	movs	r1, #0
 80011da:	f44f 7080 	mov.w	r0, #256	; 0x100
 80011de:	f00c fa79 	bl	800d6d4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <appe_Tl_Init+0x54>)
 80011e4:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80011e6:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <appe_Tl_Init+0x58>)
 80011e8:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80011ea:	463b      	mov	r3, r7
 80011ec:	4619      	mov	r1, r3
 80011ee:	480e      	ldr	r0, [pc, #56]	; (8001228 <appe_Tl_Init+0x5c>)
 80011f0:	f009 fa04 	bl	800a5fc <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80011f4:	4b0d      	ldr	r3, [pc, #52]	; (800122c <appe_Tl_Init+0x60>)
 80011f6:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80011f8:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <appe_Tl_Init+0x64>)
 80011fa:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80011fc:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <appe_Tl_Init+0x68>)
 80011fe:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001200:	f240 533c 	movw	r3, #1340	; 0x53c
 8001204:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	4618      	mov	r0, r3
 800120c:	f009 fc76 	bl	800aafc <TL_MM_Init>

  TL_Enable();
 8001210:	f009 fb2c 	bl	800a86c <TL_Enable>

  return;
 8001214:	bf00      	nop
}
 8001216:	3720      	adds	r7, #32
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	0800a635 	.word	0x0800a635
 8001220:	20030734 	.word	0x20030734
 8001224:	08001239 	.word	0x08001239
 8001228:	08001251 	.word	0x08001251
 800122c:	2003094c 	.word	0x2003094c
 8001230:	20030840 	.word	0x20030840
 8001234:	200301f8 	.word	0x200301f8

08001238 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001242:	bf00      	nop
}
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	330b      	adds	r3, #11
 800125e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	b29b      	uxth	r3, r3
 8001266:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800126a:	2b07      	cmp	r3, #7
 800126c:	f200 80d0 	bhi.w	8001410 <APPE_SysUserEvtRx+0x1c0>
 8001270:	a201      	add	r2, pc, #4	; (adr r2, 8001278 <APPE_SysUserEvtRx+0x28>)
 8001272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001276:	bf00      	nop
 8001278:	08001299 	.word	0x08001299
 800127c:	0800132b 	.word	0x0800132b
 8001280:	0800134d 	.word	0x0800134d
 8001284:	08001411 	.word	0x08001411
 8001288:	08001391 	.word	0x08001391
 800128c:	080013b5 	.word	0x080013b5
 8001290:	080013d1 	.word	0x080013d1
 8001294:	080013f5 	.word	0x080013f5
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	4618      	mov	r0, r3
 800129e:	f008 ff63 	bl	800a168 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 80012a2:	485e      	ldr	r0, [pc, #376]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 80012a4:	f009 fd2a 	bl	800acfc <DbgTraceGetFileName>
 80012a8:	4601      	mov	r1, r0
 80012aa:	f240 136b 	movw	r3, #363	; 0x16b
 80012ae:	4a5c      	ldr	r2, [pc, #368]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 80012b0:	485c      	ldr	r0, [pc, #368]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 80012b2:	f00c fc13 	bl	800dadc <iprintf>
 80012b6:	7b3b      	ldrb	r3, [r7, #12]
 80012b8:	4619      	mov	r1, r3
 80012ba:	7b7b      	ldrb	r3, [r7, #13]
 80012bc:	461a      	mov	r2, r3
 80012be:	7bbb      	ldrb	r3, [r7, #14]
 80012c0:	4859      	ldr	r0, [pc, #356]	; (8001428 <APPE_SysUserEvtRx+0x1d8>)
 80012c2:	f00c fc0b 	bl	800dadc <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 80012c6:	4855      	ldr	r0, [pc, #340]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 80012c8:	f009 fd18 	bl	800acfc <DbgTraceGetFileName>
 80012cc:	4601      	mov	r1, r0
 80012ce:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80012d2:	4a53      	ldr	r2, [pc, #332]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 80012d4:	4853      	ldr	r0, [pc, #332]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 80012d6:	f00c fc01 	bl	800dadc <iprintf>
 80012da:	7c3b      	ldrb	r3, [r7, #16]
 80012dc:	4619      	mov	r1, r3
 80012de:	4853      	ldr	r0, [pc, #332]	; (800142c <APPE_SysUserEvtRx+0x1dc>)
 80012e0:	f00c fbfc 	bl	800dadc <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80012e4:	484d      	ldr	r0, [pc, #308]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 80012e6:	f009 fd09 	bl	800acfc <DbgTraceGetFileName>
 80012ea:	4601      	mov	r1, r0
 80012ec:	f240 136d 	movw	r3, #365	; 0x16d
 80012f0:	4a4b      	ldr	r2, [pc, #300]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 80012f2:	484c      	ldr	r0, [pc, #304]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 80012f4:	f00c fbf2 	bl	800dadc <iprintf>
 80012f8:	7dbb      	ldrb	r3, [r7, #22]
 80012fa:	4619      	mov	r1, r3
 80012fc:	7dfb      	ldrb	r3, [r7, #23]
 80012fe:	461a      	mov	r2, r3
 8001300:	7e3b      	ldrb	r3, [r7, #24]
 8001302:	484b      	ldr	r0, [pc, #300]	; (8001430 <APPE_SysUserEvtRx+0x1e0>)
 8001304:	f00c fbea 	bl	800dadc <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8001308:	4844      	ldr	r0, [pc, #272]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 800130a:	f009 fcf7 	bl	800acfc <DbgTraceGetFileName>
 800130e:	4601      	mov	r1, r0
 8001310:	f240 136f 	movw	r3, #367	; 0x16f
 8001314:	4a42      	ldr	r2, [pc, #264]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 8001316:	4843      	ldr	r0, [pc, #268]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 8001318:	f00c fbe0 	bl	800dadc <iprintf>
 800131c:	4845      	ldr	r0, [pc, #276]	; (8001434 <APPE_SysUserEvtRx+0x1e4>)
 800131e:	f00c fbdd 	bl	800dadc <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 f8e0 	bl	80014e8 <APPE_SysEvtReadyProcessing>
    break;
 8001328:	e073      	b.n	8001412 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 800132a:	483c      	ldr	r0, [pc, #240]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 800132c:	f009 fce6 	bl	800acfc <DbgTraceGetFileName>
 8001330:	4601      	mov	r1, r0
 8001332:	f44f 73ba 	mov.w	r3, #372	; 0x174
 8001336:	4a3a      	ldr	r2, [pc, #232]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 8001338:	483a      	ldr	r0, [pc, #232]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 800133a:	f00c fbcf 	bl	800dadc <iprintf>
 800133e:	483e      	ldr	r0, [pc, #248]	; (8001438 <APPE_SysUserEvtRx+0x1e8>)
 8001340:	f00c fbcc 	bl	800dadc <iprintf>
    APPE_SysEvtError(pPayload);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 f885 	bl	8001454 <APPE_SysEvtError>
    break;
 800134a:	e062      	b.n	8001412 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 800134c:	4833      	ldr	r0, [pc, #204]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 800134e:	f009 fcd5 	bl	800acfc <DbgTraceGetFileName>
 8001352:	4601      	mov	r1, r0
 8001354:	f240 1379 	movw	r3, #377	; 0x179
 8001358:	4a31      	ldr	r2, [pc, #196]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 800135a:	4832      	ldr	r0, [pc, #200]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 800135c:	f00c fbbe 	bl	800dadc <iprintf>
 8001360:	4836      	ldr	r0, [pc, #216]	; (800143c <APPE_SysUserEvtRx+0x1ec>)
 8001362:	f00c fc29 	bl	800dbb8 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001366:	482d      	ldr	r0, [pc, #180]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 8001368:	f009 fcc8 	bl	800acfc <DbgTraceGetFileName>
 800136c:	4601      	mov	r1, r0
 800136e:	f44f 73bd 	mov.w	r3, #378	; 0x17a
 8001372:	4a2b      	ldr	r2, [pc, #172]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 8001374:	482b      	ldr	r0, [pc, #172]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 8001376:	f00c fbb1 	bl	800dadc <iprintf>
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3302      	adds	r3, #2
 800137e:	6819      	ldr	r1, [r3, #0]
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	3302      	adds	r3, #2
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	461a      	mov	r2, r3
 8001388:	482d      	ldr	r0, [pc, #180]	; (8001440 <APPE_SysUserEvtRx+0x1f0>)
 800138a:	f00c fba7 	bl	800dadc <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 800138e:	e040      	b.n	8001412 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001390:	4822      	ldr	r0, [pc, #136]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 8001392:	f009 fcb3 	bl	800acfc <DbgTraceGetFileName>
 8001396:	4601      	mov	r1, r0
 8001398:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800139c:	4a20      	ldr	r2, [pc, #128]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 800139e:	4821      	ldr	r0, [pc, #132]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 80013a0:	f00c fb9c 	bl	800dadc <iprintf>
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	3302      	adds	r3, #2
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4619      	mov	r1, r3
 80013ac:	4825      	ldr	r0, [pc, #148]	; (8001444 <APPE_SysUserEvtRx+0x1f4>)
 80013ae:	f00c fb95 	bl	800dadc <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 80013b2:	e02e      	b.n	8001412 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 80013b4:	4819      	ldr	r0, [pc, #100]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 80013b6:	f009 fca1 	bl	800acfc <DbgTraceGetFileName>
 80013ba:	4601      	mov	r1, r0
 80013bc:	f240 1385 	movw	r3, #389	; 0x185
 80013c0:	4a17      	ldr	r2, [pc, #92]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 80013c2:	4818      	ldr	r0, [pc, #96]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 80013c4:	f00c fb8a 	bl	800dadc <iprintf>
 80013c8:	481f      	ldr	r0, [pc, #124]	; (8001448 <APPE_SysUserEvtRx+0x1f8>)
 80013ca:	f00c fb87 	bl	800dadc <iprintf>
    break;
 80013ce:	e020      	b.n	8001412 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 80013d0:	4812      	ldr	r0, [pc, #72]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 80013d2:	f009 fc93 	bl	800acfc <DbgTraceGetFileName>
 80013d6:	4601      	mov	r1, r0
 80013d8:	f240 1389 	movw	r3, #393	; 0x189
 80013dc:	4a10      	ldr	r2, [pc, #64]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 80013de:	4811      	ldr	r0, [pc, #68]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 80013e0:	f00c fb7c 	bl	800dadc <iprintf>
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	3302      	adds	r3, #2
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4619      	mov	r1, r3
 80013ec:	4817      	ldr	r0, [pc, #92]	; (800144c <APPE_SysUserEvtRx+0x1fc>)
 80013ee:	f00c fb75 	bl	800dadc <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 80013f2:	e00e      	b.n	8001412 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80013f4:	4809      	ldr	r0, [pc, #36]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 80013f6:	f009 fc81 	bl	800acfc <DbgTraceGetFileName>
 80013fa:	4601      	mov	r1, r0
 80013fc:	f44f 73c7 	mov.w	r3, #398	; 0x18e
 8001400:	4a07      	ldr	r2, [pc, #28]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 8001402:	4808      	ldr	r0, [pc, #32]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 8001404:	f00c fb6a 	bl	800dadc <iprintf>
 8001408:	4811      	ldr	r0, [pc, #68]	; (8001450 <APPE_SysUserEvtRx+0x200>)
 800140a:	f00c fb67 	bl	800dadc <iprintf>
    break;
 800140e:	e000      	b.n	8001412 <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 8001410:	bf00      	nop
  }

  return;
 8001412:	bf00      	nop
}
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	0800e990 	.word	0x0800e990
 8001420:	0800ffac 	.word	0x0800ffac
 8001424:	0800e9a8 	.word	0x0800e9a8
 8001428:	0800e9bc 	.word	0x0800e9bc
 800142c:	0800e9e0 	.word	0x0800e9e0
 8001430:	0800e9fc 	.word	0x0800e9fc
 8001434:	0800ea14 	.word	0x0800ea14
 8001438:	0800ea34 	.word	0x0800ea34
 800143c:	0800ea58 	.word	0x0800ea58
 8001440:	0800eaa8 	.word	0x0800eaa8
 8001444:	0800ead0 	.word	0x0800ead0
 8001448:	0800eb0c 	.word	0x0800eb0c
 800144c:	0800eb30 	.word	0x0800eb30
 8001450:	0800eb6c 	.word	0x0800eb6c

08001454 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	330b      	adds	r3, #11
 8001462:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	3302      	adds	r3, #2
 8001468:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 800146a:	4819      	ldr	r0, [pc, #100]	; (80014d0 <APPE_SysEvtError+0x7c>)
 800146c:	f009 fc46 	bl	800acfc <DbgTraceGetFileName>
 8001470:	4601      	mov	r1, r0
 8001472:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
 8001476:	4a17      	ldr	r2, [pc, #92]	; (80014d4 <APPE_SysEvtError+0x80>)
 8001478:	4817      	ldr	r0, [pc, #92]	; (80014d8 <APPE_SysEvtError+0x84>)
 800147a:	f00c fb2f 	bl	800dadc <iprintf>
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	4619      	mov	r1, r3
 8001484:	4815      	ldr	r0, [pc, #84]	; (80014dc <APPE_SysEvtError+0x88>)
 8001486:	f00c fb29 	bl	800dadc <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10d      	bne.n	80014ae <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8001492:	480f      	ldr	r0, [pc, #60]	; (80014d0 <APPE_SysEvtError+0x7c>)
 8001494:	f009 fc32 	bl	800acfc <DbgTraceGetFileName>
 8001498:	4601      	mov	r1, r0
 800149a:	f240 13ab 	movw	r3, #427	; 0x1ab
 800149e:	4a0d      	ldr	r2, [pc, #52]	; (80014d4 <APPE_SysEvtError+0x80>)
 80014a0:	480d      	ldr	r0, [pc, #52]	; (80014d8 <APPE_SysEvtError+0x84>)
 80014a2:	f00c fb1b 	bl	800dadc <iprintf>
 80014a6:	480e      	ldr	r0, [pc, #56]	; (80014e0 <APPE_SysEvtError+0x8c>)
 80014a8:	f00c fb86 	bl	800dbb8 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80014ac:	e00d      	b.n	80014ca <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 80014ae:	4808      	ldr	r0, [pc, #32]	; (80014d0 <APPE_SysEvtError+0x7c>)
 80014b0:	f009 fc24 	bl	800acfc <DbgTraceGetFileName>
 80014b4:	4601      	mov	r1, r0
 80014b6:	f240 13af 	movw	r3, #431	; 0x1af
 80014ba:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <APPE_SysEvtError+0x80>)
 80014bc:	4806      	ldr	r0, [pc, #24]	; (80014d8 <APPE_SysEvtError+0x84>)
 80014be:	f00c fb0d 	bl	800dadc <iprintf>
 80014c2:	4808      	ldr	r0, [pc, #32]	; (80014e4 <APPE_SysEvtError+0x90>)
 80014c4:	f00c fb78 	bl	800dbb8 <puts>
  return;
 80014c8:	bf00      	nop
}
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	0800e990 	.word	0x0800e990
 80014d4:	0800ffc0 	.word	0x0800ffc0
 80014d8:	0800e9a8 	.word	0x0800e9a8
 80014dc:	0800eb90 	.word	0x0800eb90
 80014e0:	0800ebc0 	.word	0x0800ebc0
 80014e4:	0800ebfc 	.word	0x0800ebfc

080014e8 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80014f0:	f107 0308 	add.w	r3, r7, #8
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80014fe:	2300      	movs	r3, #0
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	330b      	adds	r3, #11
 800150c:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3302      	adds	r3, #2
 8001512:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d146      	bne.n	80015aa <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 800151c:	4836      	ldr	r0, [pc, #216]	; (80015f8 <APPE_SysEvtReadyProcessing+0x110>)
 800151e:	f009 fbed 	bl	800acfc <DbgTraceGetFileName>
 8001522:	4601      	mov	r1, r0
 8001524:	f240 13c5 	movw	r3, #453	; 0x1c5
 8001528:	4a34      	ldr	r2, [pc, #208]	; (80015fc <APPE_SysEvtReadyProcessing+0x114>)
 800152a:	4835      	ldr	r0, [pc, #212]	; (8001600 <APPE_SysEvtReadyProcessing+0x118>)
 800152c:	f00c fad6 	bl	800dadc <iprintf>
 8001530:	4834      	ldr	r0, [pc, #208]	; (8001604 <APPE_SysEvtReadyProcessing+0x11c>)
 8001532:	f00c fb41 	bl	800dbb8 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001536:	f7ff fc43 	bl	8000dc0 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800153a:	230f      	movs	r3, #15
 800153c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800153e:	237f      	movs	r3, #127	; 0x7f
 8001540:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001542:	f7ff fd83 	bl	800104c <LL_DBGMCU_GetRevisionID>
 8001546:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001548:	482b      	ldr	r0, [pc, #172]	; (80015f8 <APPE_SysEvtReadyProcessing+0x110>)
 800154a:	f009 fbd7 	bl	800acfc <DbgTraceGetFileName>
 800154e:	4601      	mov	r1, r0
 8001550:	f240 13dd 	movw	r3, #477	; 0x1dd
 8001554:	4a29      	ldr	r2, [pc, #164]	; (80015fc <APPE_SysEvtReadyProcessing+0x114>)
 8001556:	482a      	ldr	r0, [pc, #168]	; (8001600 <APPE_SysEvtReadyProcessing+0x118>)
 8001558:	f00c fac0 	bl	800dadc <iprintf>
 800155c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800155e:	482a      	ldr	r0, [pc, #168]	; (8001608 <APPE_SysEvtReadyProcessing+0x120>)
 8001560:	f00c fabc 	bl	800dadc <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	b29b      	uxth	r3, r3
 8001568:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800156a:	f7ff fd61 	bl	8001030 <LL_DBGMCU_GetDeviceID>
 800156e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001570:	4821      	ldr	r0, [pc, #132]	; (80015f8 <APPE_SysEvtReadyProcessing+0x110>)
 8001572:	f009 fbc3 	bl	800acfc <DbgTraceGetFileName>
 8001576:	4601      	mov	r1, r0
 8001578:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 800157c:	4a1f      	ldr	r2, [pc, #124]	; (80015fc <APPE_SysEvtReadyProcessing+0x114>)
 800157e:	4820      	ldr	r0, [pc, #128]	; (8001600 <APPE_SysEvtReadyProcessing+0x118>)
 8001580:	f00c faac 	bl	800dadc <iprintf>
 8001584:	6a39      	ldr	r1, [r7, #32]
 8001586:	4821      	ldr	r0, [pc, #132]	; (800160c <APPE_SysEvtReadyProcessing+0x124>)
 8001588:	f00c faa8 	bl	800dadc <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 800158c:	6a3b      	ldr	r3, [r7, #32]
 800158e:	b29b      	uxth	r3, r3
 8001590:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001592:	f107 0308 	add.w	r3, r7, #8
 8001596:	4618      	mov	r0, r3
 8001598:	f008 fdd0 	bl	800a13c <SHCI_C2_Config>

    APP_BLE_Init();
 800159c:	f00a f998 	bl	800b8d0 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80015a0:	2100      	movs	r1, #0
 80015a2:	2001      	movs	r0, #1
 80015a4:	f00b ff6a 	bl	800d47c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80015a8:	e022      	b.n	80015f0 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d110      	bne.n	80015d4 <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 80015b2:	4811      	ldr	r0, [pc, #68]	; (80015f8 <APPE_SysEvtReadyProcessing+0x110>)
 80015b4:	f009 fba2 	bl	800acfc <DbgTraceGetFileName>
 80015b8:	4601      	mov	r1, r0
 80015ba:	f240 13ef 	movw	r3, #495	; 0x1ef
 80015be:	4a0f      	ldr	r2, [pc, #60]	; (80015fc <APPE_SysEvtReadyProcessing+0x114>)
 80015c0:	480f      	ldr	r0, [pc, #60]	; (8001600 <APPE_SysEvtReadyProcessing+0x118>)
 80015c2:	f00c fa8b 	bl	800dadc <iprintf>
 80015c6:	4812      	ldr	r0, [pc, #72]	; (8001610 <APPE_SysEvtReadyProcessing+0x128>)
 80015c8:	f00c fa88 	bl	800dadc <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
  return;
 80015d2:	e00d      	b.n	80015f0 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 80015d4:	4808      	ldr	r0, [pc, #32]	; (80015f8 <APPE_SysEvtReadyProcessing+0x110>)
 80015d6:	f009 fb91 	bl	800acfc <DbgTraceGetFileName>
 80015da:	4601      	mov	r1, r0
 80015dc:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
 80015e0:	4a06      	ldr	r2, [pc, #24]	; (80015fc <APPE_SysEvtReadyProcessing+0x114>)
 80015e2:	4807      	ldr	r0, [pc, #28]	; (8001600 <APPE_SysEvtReadyProcessing+0x118>)
 80015e4:	f00c fa7a 	bl	800dadc <iprintf>
 80015e8:	480a      	ldr	r0, [pc, #40]	; (8001614 <APPE_SysEvtReadyProcessing+0x12c>)
 80015ea:	f00c fa77 	bl	800dadc <iprintf>
  return;
 80015ee:	bf00      	nop
}
 80015f0:	3728      	adds	r7, #40	; 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	0800e990 	.word	0x0800e990
 80015fc:	0800ffd4 	.word	0x0800ffd4
 8001600:	0800e9a8 	.word	0x0800e9a8
 8001604:	0800ec34 	.word	0x0800ec34
 8001608:	0800ec50 	.word	0x0800ec50
 800160c:	0800ec74 	.word	0x0800ec74
 8001610:	0800ec94 	.word	0x0800ec94
 8001614:	0800ecc8 	.word	0x0800ecc8

08001618 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001620:	f002 f8aa 	bl	8003778 <HAL_GetTick>
 8001624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001630:	d00a      	beq.n	8001648 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001632:	f002 f8b9 	bl	80037a8 <HAL_GetTickFreq>
 8001636:	4603      	mov	r3, r0
 8001638:	461a      	mov	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	4413      	add	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001640:	e002      	b.n	8001648 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001642:	f7ff fd11 	bl	8001068 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8001646:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001648:	f002 f896 	bl	8003778 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	429a      	cmp	r2, r3
 8001656:	d8f4      	bhi.n	8001642 <HAL_Delay+0x2a>
  }
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001666:	f04f 30ff 	mov.w	r0, #4294967295
 800166a:	f00b ff37 	bl	800d4dc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}

08001672 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001676:	bf00      	nop
}
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800168a:	f04f 30ff 	mov.w	r0, #4294967295
 800168e:	f00b ff25 	bl	800d4dc <UTIL_SEQ_Run>
  return;
 8001692:	bf00      	nop
}
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80016a2:	2100      	movs	r1, #0
 80016a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80016a8:	f00c f836 	bl	800d718 <UTIL_SEQ_SetTask>
  return;
 80016ac:	bf00      	nop
}
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80016bc:	2002      	movs	r0, #2
 80016be:	f00c f897 	bl	800d7f0 <UTIL_SEQ_SetEvt>
  return;
 80016c2:	bf00      	nop
}
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80016d2:	2002      	movs	r0, #2
 80016d4:	f00c f8ac 	bl	800d830 <UTIL_SEQ_WaitEvt>
  return;
 80016d8:	bf00      	nop
}
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	2b10      	cmp	r3, #16
 80016ee:	d006      	beq.n	80016fe <HAL_GPIO_EXTI_Callback+0x1e>
 80016f0:	2b10      	cmp	r3, #16
 80016f2:	dc0d      	bgt.n	8001710 <HAL_GPIO_EXTI_Callback+0x30>
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d005      	beq.n	8001704 <HAL_GPIO_EXTI_Callback+0x24>
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d006      	beq.n	800170a <HAL_GPIO_EXTI_Callback+0x2a>
        break;
    case B3_Pin:
        APP_BLE_Key_Button3_Action();
        break;
    default:
      break;
 80016fc:	e008      	b.n	8001710 <HAL_GPIO_EXTI_Callback+0x30>
        APP_BLE_Key_Button1_Action();
 80016fe:	f00a ffef 	bl	800c6e0 <APP_BLE_Key_Button1_Action>
        break;
 8001702:	e006      	b.n	8001712 <HAL_GPIO_EXTI_Callback+0x32>
        APP_BLE_Key_Button2_Action();
 8001704:	f00a fff2 	bl	800c6ec <APP_BLE_Key_Button2_Action>
        break;
 8001708:	e003      	b.n	8001712 <HAL_GPIO_EXTI_Callback+0x32>
        APP_BLE_Key_Button3_Action();
 800170a:	f00a fff5 	bl	800c6f8 <APP_BLE_Key_Button3_Action>
        break;
 800170e:	e000      	b.n	8001712 <HAL_GPIO_EXTI_Callback+0x32>
      break;
 8001710:	bf00      	nop
  }
  return;
 8001712:	bf00      	nop
}
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <Set_CW>:
	Update_PWM(duty);

}

void Set_CW()
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SYS_ENABLE_GPIO_Port, SYS_ENABLE_Pin, GPIO_PIN_RESET);
 8001720:	2200      	movs	r2, #0
 8001722:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172a:	f002 fe91 	bl	8004450 <HAL_GPIO_WritePin>

	Update_PWM(0);
 800172e:	2000      	movs	r0, #0
 8001730:	f000 f9b6 	bl	8001aa0 <Update_PWM>
	HAL_GPIO_WritePin(DIR_A_GPIO_Port, DIR_A_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800173a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173e:	f002 fe87 	bl	8004450 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR_B_GPIO_Port, DIR_B_Pin, GPIO_PIN_SET);
 8001742:	2201      	movs	r2, #1
 8001744:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001748:	4807      	ldr	r0, [pc, #28]	; (8001768 <Set_CW+0x4c>)
 800174a:	f002 fe81 	bl	8004450 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SYS_ENABLE_GPIO_Port, SYS_ENABLE_Pin, GPIO_PIN_SET);
 800174e:	2201      	movs	r2, #1
 8001750:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001758:	f002 fe7a 	bl	8004450 <HAL_GPIO_WritePin>
	HAL_Delay(500); //so motor doesn't jerk
 800175c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001760:	f7ff ff5a 	bl	8001618 <HAL_Delay>
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}
 8001768:	48000800 	.word	0x48000800

0800176c <Stop_Motor>:
	HAL_GPIO_WritePin(SYS_ENABLE_GPIO_Port, SYS_ENABLE_Pin, GPIO_PIN_SET);
	HAL_Delay(500);
}

void Stop_Motor()
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
	Update_PWM(0);
 8001770:	2000      	movs	r0, #0
 8001772:	f000 f995 	bl	8001aa0 <Update_PWM>
	Motor_Stopped_Complete();
 8001776:	f000 f9bf 	bl	8001af8 <Motor_Stopped_Complete>
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}

0800177e <Get_Speed>:

uint16_t Get_Speed() // does not look at direction
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b084      	sub	sp, #16
 8001782:	af00      	add	r7, sp, #0
	uint32_t total = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]
	uint16_t avg = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	80fb      	strh	r3, [r7, #6]
	uint8_t readings = 3;
 800178c:	2303      	movs	r3, #3
 800178e:	717b      	strb	r3, [r7, #5]
	for (int i = 0; i < readings; i++)
 8001790:	2300      	movs	r3, #0
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	e00c      	b.n	80017b0 <Get_Speed+0x32>
	{
		total += Read_Speed();
 8001796:	f000 f81b 	bl	80017d0 <Read_Speed>
 800179a:	4603      	mov	r3, r0
 800179c:	461a      	mov	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4413      	add	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]
		HAL_Delay(2); //Offset
 80017a4:	2002      	movs	r0, #2
 80017a6:	f7ff ff37 	bl	8001618 <HAL_Delay>
	for (int i = 0; i < readings; i++)
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	3301      	adds	r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	797b      	ldrb	r3, [r7, #5]
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	dbee      	blt.n	8001796 <Get_Speed+0x18>
	}

	avg = total/readings;
 80017b8:	797b      	ldrb	r3, [r7, #5]
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c0:	80fb      	strh	r3, [r7, #6]
	return avg;
 80017c2:	88fb      	ldrh	r3, [r7, #6]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	0000      	movs	r0, r0
	...

080017d0 <Read_Speed>:

uint16_t Read_Speed() //rpm
{
 80017d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af00      	add	r7, sp, #0
	//return 5;
	//TIM1->CR1 = 1;
	//uint8_t Test[] = "Starting speed reading\r\n";
	//HAL_UART_Transmit(&huart1,Test, sizeof(Test),10);

	uint32_t period = 50;
 80017d8:	2332      	movs	r3, #50	; 0x32
 80017da:	613b      	str	r3, [r7, #16]
	uint16_t speed = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	82fb      	strh	r3, [r7, #22]
	uint32_t start_counter = Get_Counter();
 80017e0:	f001 fb82 	bl	8002ee8 <Get_Counter>
 80017e4:	60f8      	str	r0, [r7, #12]

	//char Test3[50];
	//int size3 = sprintf(Test3, "start counter= %lu\r\n", start_counter);
	//HAL_UART_Transmit(&huart1,(uint8_t*)Test3, size3,10);

	HAL_Delay(period);
 80017e6:	6938      	ldr	r0, [r7, #16]
 80017e8:	f7ff ff16 	bl	8001618 <HAL_Delay>
	uint32_t end_counter = Get_Counter();
 80017ec:	f001 fb7c 	bl	8002ee8 <Get_Counter>
 80017f0:	60b8      	str	r0, [r7, #8]
	//int size2 = sprintf(Test2, "end counter=   %lu\r\n", end_counter);
	//HAL_UART_Transmit(&huart1,(uint8_t*)Test2, size2,10);

	//APP_DBG_MSG("\r\n\r** start: %lu, end: %lu\n", start_counter, end_counter);

	if (start_counter == end_counter)
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d102      	bne.n	8001800 <Read_Speed+0x30>
	{
		speed = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	82fb      	strh	r3, [r7, #22]
 80017fe:	e09d      	b.n	800193c <Read_Speed+0x16c>
	}
	else if (start_counter > end_counter)
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	429a      	cmp	r2, r3
 8001806:	d944      	bls.n	8001892 <Read_Speed+0xc2>
	{
		speed = (start_counter - end_counter)*(1000.0/period)*60.0/4/PPR/GEAR_RATIO;
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe fe50 	bl	80004b4 <__aeabi_ui2d>
 8001814:	4604      	mov	r4, r0
 8001816:	460d      	mov	r5, r1
 8001818:	6938      	ldr	r0, [r7, #16]
 800181a:	f7fe fe4b 	bl	80004b4 <__aeabi_ui2d>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	f04f 0000 	mov.w	r0, #0
 8001826:	494a      	ldr	r1, [pc, #296]	; (8001950 <Read_Speed+0x180>)
 8001828:	f7fe ffe8 	bl	80007fc <__aeabi_ddiv>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4620      	mov	r0, r4
 8001832:	4629      	mov	r1, r5
 8001834:	f7fe feb8 	bl	80005a8 <__aeabi_dmul>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	4b43      	ldr	r3, [pc, #268]	; (8001954 <Read_Speed+0x184>)
 8001846:	f7fe feaf 	bl	80005a8 <__aeabi_dmul>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4610      	mov	r0, r2
 8001850:	4619      	mov	r1, r3
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	4b40      	ldr	r3, [pc, #256]	; (8001958 <Read_Speed+0x188>)
 8001858:	f7fe ffd0 	bl	80007fc <__aeabi_ddiv>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	4b3c      	ldr	r3, [pc, #240]	; (800195c <Read_Speed+0x18c>)
 800186a:	f7fe ffc7 	bl	80007fc <__aeabi_ddiv>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4610      	mov	r0, r2
 8001874:	4619      	mov	r1, r3
 8001876:	a334      	add	r3, pc, #208	; (adr r3, 8001948 <Read_Speed+0x178>)
 8001878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187c:	f7fe ffbe 	bl	80007fc <__aeabi_ddiv>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4610      	mov	r0, r2
 8001886:	4619      	mov	r1, r3
 8001888:	f7ff f8a0 	bl	80009cc <__aeabi_d2uiz>
 800188c:	4603      	mov	r3, r0
 800188e:	82fb      	strh	r3, [r7, #22]
 8001890:	e054      	b.n	800193c <Read_Speed+0x16c>
	}
	else //overflow occurred
	{
		speed = (4294967295 - end_counter + start_counter)*(1000.0/period)*60.0/4/PPR/GEAR_RATIO;
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	2200      	movs	r2, #0
 8001896:	469a      	mov	sl, r3
 8001898:	4693      	mov	fp, r2
 800189a:	2300      	movs	r3, #0
 800189c:	f1da 34ff 	rsbs	r4, sl, #4294967295
 80018a0:	eb63 050b 	sbc.w	r5, r3, fp
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	4698      	mov	r8, r3
 80018aa:	4691      	mov	r9, r2
 80018ac:	eb14 0308 	adds.w	r3, r4, r8
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	eb45 0309 	adc.w	r3, r5, r9
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018bc:	f7fe fe46 	bl	800054c <__aeabi_l2d>
 80018c0:	4604      	mov	r4, r0
 80018c2:	460d      	mov	r5, r1
 80018c4:	6938      	ldr	r0, [r7, #16]
 80018c6:	f7fe fdf5 	bl	80004b4 <__aeabi_ui2d>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	f04f 0000 	mov.w	r0, #0
 80018d2:	491f      	ldr	r1, [pc, #124]	; (8001950 <Read_Speed+0x180>)
 80018d4:	f7fe ff92 	bl	80007fc <__aeabi_ddiv>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4620      	mov	r0, r4
 80018de:	4629      	mov	r1, r5
 80018e0:	f7fe fe62 	bl	80005a8 <__aeabi_dmul>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	4b18      	ldr	r3, [pc, #96]	; (8001954 <Read_Speed+0x184>)
 80018f2:	f7fe fe59 	bl	80005a8 <__aeabi_dmul>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <Read_Speed+0x188>)
 8001904:	f7fe ff7a 	bl	80007fc <__aeabi_ddiv>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <Read_Speed+0x18c>)
 8001916:	f7fe ff71 	bl	80007fc <__aeabi_ddiv>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	a309      	add	r3, pc, #36	; (adr r3, 8001948 <Read_Speed+0x178>)
 8001924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001928:	f7fe ff68 	bl	80007fc <__aeabi_ddiv>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	f7ff f84a 	bl	80009cc <__aeabi_d2uiz>
 8001938:	4603      	mov	r3, r0
 800193a:	82fb      	strh	r3, [r7, #22]
	}
	return speed;
 800193c:	8afb      	ldrh	r3, [r7, #22]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001948:	9999999a 	.word	0x9999999a
 800194c:	400d9999 	.word	0x400d9999
 8001950:	408f4000 	.word	0x408f4000
 8001954:	404e0000 	.word	0x404e0000
 8001958:	40100000 	.word	0x40100000
 800195c:	401c0000 	.word	0x401c0000

08001960 <Set_Speed>:

void Set_Speed(uint16_t goal) //TODO detect failure
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08e      	sub	sp, #56	; 0x38
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	80fb      	strh	r3, [r7, #6]
	Set_CW();
 800196a:	f7ff fed7 	bl	800171c <Set_CW>
	float Kp = 0.03;
 800196e:	4b45      	ldr	r3, [pc, #276]	; (8001a84 <Set_Speed+0x124>)
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
	float Ki = 0.04;
 8001972:	4b45      	ldr	r3, [pc, #276]	; (8001a88 <Set_Speed+0x128>)
 8001974:	623b      	str	r3, [r7, #32]
	int period = 100;
 8001976:	2364      	movs	r3, #100	; 0x64
 8001978:	61fb      	str	r3, [r7, #28]
	int stable = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	637b      	str	r3, [r7, #52]	; 0x34
	int stable_threshold = 5;
 800197e:	2305      	movs	r3, #5
 8001980:	61bb      	str	r3, [r7, #24]
	int failures = 0; //to check if it never converges
 8001982:	2300      	movs	r3, #0
 8001984:	633b      	str	r3, [r7, #48]	; 0x30
	int failure_threshold = 50;
 8001986:	2332      	movs	r3, #50	; 0x32
 8001988:	617b      	str	r3, [r7, #20]
	int I = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c

	APP_DBG_MSG("\r\n\r** in Set_Speed at start \n");
 800198e:	483f      	ldr	r0, [pc, #252]	; (8001a8c <Set_Speed+0x12c>)
 8001990:	f009 f9b4 	bl	800acfc <DbgTraceGetFileName>
 8001994:	4601      	mov	r1, r0
 8001996:	2390      	movs	r3, #144	; 0x90
 8001998:	4a3d      	ldr	r2, [pc, #244]	; (8001a90 <Set_Speed+0x130>)
 800199a:	483e      	ldr	r0, [pc, #248]	; (8001a94 <Set_Speed+0x134>)
 800199c:	f00c f89e 	bl	800dadc <iprintf>
 80019a0:	483d      	ldr	r0, [pc, #244]	; (8001a98 <Set_Speed+0x138>)
 80019a2:	f00c f909 	bl	800dbb8 <puts>

	do
	{
		uint16_t current = Get_Speed();
 80019a6:	f7ff feea 	bl	800177e <Get_Speed>
 80019aa:	4603      	mov	r3, r0
 80019ac:	827b      	strh	r3, [r7, #18]

		  //char Test[50];
		  //int size = sprintf(Test, "cur speed: %d\r\nfailures: %d\r\n", current, failures);
		  //UART_Transmit(Test);

		int error = goal - current;
 80019ae:	88fa      	ldrh	r2, [r7, #6]
 80019b0:	8a7b      	ldrh	r3, [r7, #18]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	60fb      	str	r3, [r7, #12]

		int P = error*Kp;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	ee07 3a90 	vmov	s15, r3
 80019bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019c0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019cc:	ee17 3a90 	vmov	r3, s15
 80019d0:	60bb      	str	r3, [r7, #8]
		I = I + error*Ki;
 80019d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d4:	ee07 3a90 	vmov	s15, r3
 80019d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	ee07 3a90 	vmov	s15, r3
 80019e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80019ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019f6:	ee17 3a90 	vmov	r3, s15
 80019fa:	62fb      	str	r3, [r7, #44]	; 0x2c
		int duty = P + I;
 80019fc:	68ba      	ldr	r2, [r7, #8]
 80019fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a00:	4413      	add	r3, r2
 8001a02:	62bb      	str	r3, [r7, #40]	; 0x28

		APP_DBG_MSG("\r\n\r** Current Speed: %d, unsaturated duty: %d \n", current, duty);
 8001a04:	4821      	ldr	r0, [pc, #132]	; (8001a8c <Set_Speed+0x12c>)
 8001a06:	f009 f979 	bl	800acfc <DbgTraceGetFileName>
 8001a0a:	4601      	mov	r1, r0
 8001a0c:	23a2      	movs	r3, #162	; 0xa2
 8001a0e:	4a20      	ldr	r2, [pc, #128]	; (8001a90 <Set_Speed+0x130>)
 8001a10:	4820      	ldr	r0, [pc, #128]	; (8001a94 <Set_Speed+0x134>)
 8001a12:	f00c f863 	bl	800dadc <iprintf>
 8001a16:	8a7b      	ldrh	r3, [r7, #18]
 8001a18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	481f      	ldr	r0, [pc, #124]	; (8001a9c <Set_Speed+0x13c>)
 8001a1e:	f00c f85d 	bl	800dadc <iprintf>
		if (duty < 0)
 8001a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	da02      	bge.n	8001a2e <Set_Speed+0xce>
		{
			duty = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a2c:	e004      	b.n	8001a38 <Set_Speed+0xd8>
		}
		else if (duty > 100)
 8001a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a30:	2b64      	cmp	r3, #100	; 0x64
 8001a32:	dd01      	ble.n	8001a38 <Set_Speed+0xd8>
		{
			duty = 100;
 8001a34:	2364      	movs	r3, #100	; 0x64
 8001a36:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		Update_PWM(duty);
 8001a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 f830 	bl	8001aa0 <Update_PWM>
		HAL_Delay(period);
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fde8 	bl	8001618 <HAL_Delay>
		if (error < 10 && error > -10)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b09      	cmp	r3, #9
 8001a4c:	dc07      	bgt.n	8001a5e <Set_Speed+0xfe>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f113 0f09 	cmn.w	r3, #9
 8001a54:	db03      	blt.n	8001a5e <Set_Speed+0xfe>
		{
			stable++;
 8001a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a58:	3301      	adds	r3, #1
 8001a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a5c:	e001      	b.n	8001a62 <Set_Speed+0x102>
		}
		else
		{
			stable = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	637b      	str	r3, [r7, #52]	; 0x34
		}
		failures++;
 8001a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a64:	3301      	adds	r3, #1
 8001a66:	633b      	str	r3, [r7, #48]	; 0x30

	} while(stable < stable_threshold && failures < failure_threshold);
 8001a68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	da03      	bge.n	8001a78 <Set_Speed+0x118>
 8001a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	db96      	blt.n	80019a6 <Set_Speed+0x46>
	Motor_Done_Complete();
 8001a78:	f000 f844 	bl	8001b04 <Motor_Done_Complete>
}
 8001a7c:	bf00      	nop
 8001a7e:	3738      	adds	r7, #56	; 0x38
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	3cf5c28f 	.word	0x3cf5c28f
 8001a88:	3d23d70a 	.word	0x3d23d70a
 8001a8c:	0800ecfc 	.word	0x0800ecfc
 8001a90:	0800fff0 	.word	0x0800fff0
 8001a94:	0800ed18 	.word	0x0800ed18
 8001a98:	0800ed2c 	.word	0x0800ed2c
 8001a9c:	0800ed4c 	.word	0x0800ed4c

08001aa0 <Update_PWM>:

void Update_PWM(uint32_t duty)
{
 8001aa0:	b5b0      	push	{r4, r5, r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	//APP_DBG_MSG("\r\n\r** in Update_PWM, duty: %lu\n", duty);
	uint32_t CCR = (TIM16->ARR)*(duty/100.0);
 8001aa8:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <Update_PWM+0x50>)
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe fd01 	bl	80004b4 <__aeabi_ui2d>
 8001ab2:	4604      	mov	r4, r0
 8001ab4:	460d      	mov	r5, r1
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7fe fcfc 	bl	80004b4 <__aeabi_ui2d>
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <Update_PWM+0x54>)
 8001ac2:	f7fe fe9b 	bl	80007fc <__aeabi_ddiv>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4620      	mov	r0, r4
 8001acc:	4629      	mov	r1, r5
 8001ace:	f7fe fd6b 	bl	80005a8 <__aeabi_dmul>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f7fe ff77 	bl	80009cc <__aeabi_d2uiz>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	60fb      	str	r3, [r7, #12]
	//APP_DBG_MSG("\r\n\r** in Update_PWM, CCR: %lu\n", CCR);
	//APP_DBG_MSG("\r\n\r** CCR: %lu \n", CCR);
	Set_CCR(CCR);
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	f001 fa0c 	bl	8002f00 <Set_CCR>
}
 8001ae8:	bf00      	nop
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bdb0      	pop	{r4, r5, r7, pc}
 8001af0:	40014400 	.word	0x40014400
 8001af4:	40590000 	.word	0x40590000

08001af8 <Motor_Stopped_Complete>:

void Motor_Stopped_Complete()
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
	APP_BLE_Key_Motor_Stopped_Action();
 8001afc:	f00a fe02 	bl	800c704 <APP_BLE_Key_Motor_Stopped_Action>
}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <Motor_Done_Complete>:
{
	APP_BLE_Key_Motor_Pending_Action();
}

void Motor_Done_Complete()
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
	APP_BLE_Key_Motor_Done_Action();
 8001b08:	f00a fe02 	bl	800c710 <APP_BLE_Key_Motor_Done_Action>
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <Red_On>:

void Red_On()
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_Led_GPIO_Port, Red_Led_Pin, GPIO_PIN_SET);
 8001b14:	2201      	movs	r2, #1
 8001b16:	2102      	movs	r1, #2
 8001b18:	4802      	ldr	r0, [pc, #8]	; (8001b24 <Red_On+0x14>)
 8001b1a:	f002 fc99 	bl	8004450 <HAL_GPIO_WritePin>
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	48000400 	.word	0x48000400

08001b28 <Red_Off>:

void Red_Off()
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_Led_GPIO_Port, Red_Led_Pin, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2102      	movs	r1, #2
 8001b30:	4802      	ldr	r0, [pc, #8]	; (8001b3c <Red_Off+0x14>)
 8001b32:	f002 fc8d 	bl	8004450 <HAL_GPIO_WritePin>
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	48000400 	.word	0x48000400

08001b40 <Green_On>:

void Green_On()
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Green_Led_GPIO_Port, Green_Led_Pin, GPIO_PIN_SET);
 8001b44:	2201      	movs	r2, #1
 8001b46:	2101      	movs	r1, #1
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <Green_On+0x14>)
 8001b4a:	f002 fc81 	bl	8004450 <HAL_GPIO_WritePin>
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	48000400 	.word	0x48000400

08001b58 <Green_Off>:

void Green_Off()
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Green_Led_GPIO_Port, Green_Led_Pin, GPIO_PIN_RESET);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2101      	movs	r1, #1
 8001b60:	4802      	ldr	r0, [pc, #8]	; (8001b6c <Green_Off+0x14>)
 8001b62:	f002 fc75 	bl	8004450 <HAL_GPIO_WritePin>
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	48000400 	.word	0x48000400

08001b70 <Blue_On>:

void Blue_On()
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Blue_Led_GPIO_Port, Blue_Led_Pin, GPIO_PIN_SET);
 8001b74:	2201      	movs	r2, #1
 8001b76:	2120      	movs	r1, #32
 8001b78:	4802      	ldr	r0, [pc, #8]	; (8001b84 <Blue_On+0x14>)
 8001b7a:	f002 fc69 	bl	8004450 <HAL_GPIO_WritePin>
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	48000400 	.word	0x48000400

08001b88 <Blue_Off>:

void Blue_Off()
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Blue_Led_GPIO_Port, Blue_Led_Pin, GPIO_PIN_RESET);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2120      	movs	r1, #32
 8001b90:	4802      	ldr	r0, [pc, #8]	; (8001b9c <Blue_Off+0x14>)
 8001b92:	f002 fc5d 	bl	8004450 <HAL_GPIO_WritePin>
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	48000400 	.word	0x48000400

08001ba0 <LL_EXTI_EnableIT_0_31>:
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <LL_EXTI_EnableIT_0_31+0x24>)
 8001baa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001bae:	4905      	ldr	r1, [pc, #20]	; (8001bc4 <LL_EXTI_EnableIT_0_31+0x24>)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	58000800 	.word	0x58000800

08001bc8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4904      	ldr	r1, [pc, #16]	; (8001be8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	600b      	str	r3, [r1, #0]

}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	58000800 	.word	0x58000800

08001bec <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001bf2:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <ReadRtcSsrValue+0x3c>)
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <ReadRtcSsrValue+0x3c>)
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001c02:	e005      	b.n	8001c10 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001c08:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <ReadRtcSsrValue+0x3c>)
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d1f5      	bne.n	8001c04 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001c18:	683b      	ldr	r3, [r7, #0]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40002800 	.word	0x40002800

08001c2c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	460a      	mov	r2, r1
 8001c36:	71fb      	strb	r3, [r7, #7]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001c3c:	79ba      	ldrb	r2, [r7, #6]
 8001c3e:	491d      	ldr	r1, [pc, #116]	; (8001cb4 <LinkTimerAfter+0x88>)
 8001c40:	4613      	mov	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4413      	add	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	440b      	add	r3, r1
 8001c4a:	3315      	adds	r3, #21
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	2b06      	cmp	r3, #6
 8001c54:	d009      	beq.n	8001c6a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001c56:	7bfa      	ldrb	r2, [r7, #15]
 8001c58:	4916      	ldr	r1, [pc, #88]	; (8001cb4 <LinkTimerAfter+0x88>)
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	440b      	add	r3, r1
 8001c64:	3314      	adds	r3, #20
 8001c66:	79fa      	ldrb	r2, [r7, #7]
 8001c68:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001c6a:	79fa      	ldrb	r2, [r7, #7]
 8001c6c:	4911      	ldr	r1, [pc, #68]	; (8001cb4 <LinkTimerAfter+0x88>)
 8001c6e:	4613      	mov	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4413      	add	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	440b      	add	r3, r1
 8001c78:	3315      	adds	r3, #21
 8001c7a:	7bfa      	ldrb	r2, [r7, #15]
 8001c7c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001c7e:	79fa      	ldrb	r2, [r7, #7]
 8001c80:	490c      	ldr	r1, [pc, #48]	; (8001cb4 <LinkTimerAfter+0x88>)
 8001c82:	4613      	mov	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4413      	add	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	440b      	add	r3, r1
 8001c8c:	3314      	adds	r3, #20
 8001c8e:	79ba      	ldrb	r2, [r7, #6]
 8001c90:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001c92:	79ba      	ldrb	r2, [r7, #6]
 8001c94:	4907      	ldr	r1, [pc, #28]	; (8001cb4 <LinkTimerAfter+0x88>)
 8001c96:	4613      	mov	r3, r2
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	4413      	add	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	440b      	add	r3, r1
 8001ca0:	3315      	adds	r3, #21
 8001ca2:	79fa      	ldrb	r2, [r7, #7]
 8001ca4:	701a      	strb	r2, [r3, #0]

  return;
 8001ca6:	bf00      	nop
}
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	200000fc 	.word	0x200000fc

08001cb8 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	460a      	mov	r2, r1
 8001cc2:	71fb      	strb	r3, [r7, #7]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001cc8:	4b29      	ldr	r3, [pc, #164]	; (8001d70 <LinkTimerBefore+0xb8>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	79ba      	ldrb	r2, [r7, #6]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d032      	beq.n	8001d3a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001cd4:	79ba      	ldrb	r2, [r7, #6]
 8001cd6:	4927      	ldr	r1, [pc, #156]	; (8001d74 <LinkTimerBefore+0xbc>)
 8001cd8:	4613      	mov	r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4413      	add	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	440b      	add	r3, r1
 8001ce2:	3314      	adds	r3, #20
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001ce8:	7bfa      	ldrb	r2, [r7, #15]
 8001cea:	4922      	ldr	r1, [pc, #136]	; (8001d74 <LinkTimerBefore+0xbc>)
 8001cec:	4613      	mov	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4413      	add	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	440b      	add	r3, r1
 8001cf6:	3315      	adds	r3, #21
 8001cf8:	79fa      	ldrb	r2, [r7, #7]
 8001cfa:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001cfc:	79fa      	ldrb	r2, [r7, #7]
 8001cfe:	491d      	ldr	r1, [pc, #116]	; (8001d74 <LinkTimerBefore+0xbc>)
 8001d00:	4613      	mov	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	4413      	add	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	440b      	add	r3, r1
 8001d0a:	3315      	adds	r3, #21
 8001d0c:	79ba      	ldrb	r2, [r7, #6]
 8001d0e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001d10:	79fa      	ldrb	r2, [r7, #7]
 8001d12:	4918      	ldr	r1, [pc, #96]	; (8001d74 <LinkTimerBefore+0xbc>)
 8001d14:	4613      	mov	r3, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4413      	add	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	440b      	add	r3, r1
 8001d1e:	3314      	adds	r3, #20
 8001d20:	7bfa      	ldrb	r2, [r7, #15]
 8001d22:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001d24:	79ba      	ldrb	r2, [r7, #6]
 8001d26:	4913      	ldr	r1, [pc, #76]	; (8001d74 <LinkTimerBefore+0xbc>)
 8001d28:	4613      	mov	r3, r2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4413      	add	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	440b      	add	r3, r1
 8001d32:	3314      	adds	r3, #20
 8001d34:	79fa      	ldrb	r2, [r7, #7]
 8001d36:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001d38:	e014      	b.n	8001d64 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001d3a:	79fa      	ldrb	r2, [r7, #7]
 8001d3c:	490d      	ldr	r1, [pc, #52]	; (8001d74 <LinkTimerBefore+0xbc>)
 8001d3e:	4613      	mov	r3, r2
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	4413      	add	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	440b      	add	r3, r1
 8001d48:	3315      	adds	r3, #21
 8001d4a:	79ba      	ldrb	r2, [r7, #6]
 8001d4c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001d4e:	79ba      	ldrb	r2, [r7, #6]
 8001d50:	4908      	ldr	r1, [pc, #32]	; (8001d74 <LinkTimerBefore+0xbc>)
 8001d52:	4613      	mov	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4413      	add	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	440b      	add	r3, r1
 8001d5c:	3314      	adds	r3, #20
 8001d5e:	79fa      	ldrb	r2, [r7, #7]
 8001d60:	701a      	strb	r2, [r3, #0]
  return;
 8001d62:	bf00      	nop
}
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	2000018c 	.word	0x2000018c
 8001d74:	200000fc 	.word	0x200000fc

08001d78 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d82:	4b4e      	ldr	r3, [pc, #312]	; (8001ebc <linkTimer+0x144>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b06      	cmp	r3, #6
 8001d8a:	d118      	bne.n	8001dbe <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001d8c:	4b4b      	ldr	r3, [pc, #300]	; (8001ebc <linkTimer+0x144>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4b4b      	ldr	r3, [pc, #300]	; (8001ec0 <linkTimer+0x148>)
 8001d94:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001d96:	4a49      	ldr	r2, [pc, #292]	; (8001ebc <linkTimer+0x144>)
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001d9c:	79fa      	ldrb	r2, [r7, #7]
 8001d9e:	4949      	ldr	r1, [pc, #292]	; (8001ec4 <linkTimer+0x14c>)
 8001da0:	4613      	mov	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4413      	add	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	440b      	add	r3, r1
 8001daa:	3315      	adds	r3, #21
 8001dac:	2206      	movs	r2, #6
 8001dae:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001db0:	4b45      	ldr	r3, [pc, #276]	; (8001ec8 <linkTimer+0x150>)
 8001db2:	f04f 32ff 	mov.w	r2, #4294967295
 8001db6:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	81fb      	strh	r3, [r7, #14]
 8001dbc:	e078      	b.n	8001eb0 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001dbe:	f000 f909 	bl	8001fd4 <ReturnTimeElapsed>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001dc6:	79fa      	ldrb	r2, [r7, #7]
 8001dc8:	493e      	ldr	r1, [pc, #248]	; (8001ec4 <linkTimer+0x14c>)
 8001dca:	4613      	mov	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	440b      	add	r3, r1
 8001dd4:	3308      	adds	r3, #8
 8001dd6:	6819      	ldr	r1, [r3, #0]
 8001dd8:	89fb      	ldrh	r3, [r7, #14]
 8001dda:	79fa      	ldrb	r2, [r7, #7]
 8001ddc:	4419      	add	r1, r3
 8001dde:	4839      	ldr	r0, [pc, #228]	; (8001ec4 <linkTimer+0x14c>)
 8001de0:	4613      	mov	r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	4413      	add	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4403      	add	r3, r0
 8001dea:	3308      	adds	r3, #8
 8001dec:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001dee:	79fa      	ldrb	r2, [r7, #7]
 8001df0:	4934      	ldr	r1, [pc, #208]	; (8001ec4 <linkTimer+0x14c>)
 8001df2:	4613      	mov	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4413      	add	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	440b      	add	r3, r1
 8001dfc:	3308      	adds	r3, #8
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001e02:	4b2e      	ldr	r3, [pc, #184]	; (8001ebc <linkTimer+0x144>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4a2e      	ldr	r2, [pc, #184]	; (8001ec4 <linkTimer+0x14c>)
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	440b      	add	r3, r1
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	3308      	adds	r3, #8
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d337      	bcc.n	8001e90 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001e20:	4b26      	ldr	r3, [pc, #152]	; (8001ebc <linkTimer+0x144>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001e26:	7b7a      	ldrb	r2, [r7, #13]
 8001e28:	4926      	ldr	r1, [pc, #152]	; (8001ec4 <linkTimer+0x14c>)
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4413      	add	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	440b      	add	r3, r1
 8001e34:	3315      	adds	r3, #21
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001e3a:	e013      	b.n	8001e64 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001e3c:	7b7a      	ldrb	r2, [r7, #13]
 8001e3e:	4921      	ldr	r1, [pc, #132]	; (8001ec4 <linkTimer+0x14c>)
 8001e40:	4613      	mov	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	4413      	add	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	440b      	add	r3, r1
 8001e4a:	3315      	adds	r3, #21
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001e50:	7b7a      	ldrb	r2, [r7, #13]
 8001e52:	491c      	ldr	r1, [pc, #112]	; (8001ec4 <linkTimer+0x14c>)
 8001e54:	4613      	mov	r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4413      	add	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	440b      	add	r3, r1
 8001e5e:	3315      	adds	r3, #21
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001e64:	7b3b      	ldrb	r3, [r7, #12]
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d00b      	beq.n	8001e82 <linkTimer+0x10a>
 8001e6a:	7b3a      	ldrb	r2, [r7, #12]
 8001e6c:	4915      	ldr	r1, [pc, #84]	; (8001ec4 <linkTimer+0x14c>)
 8001e6e:	4613      	mov	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	440b      	add	r3, r1
 8001e78:	3308      	adds	r3, #8
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d2dc      	bcs.n	8001e3c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001e82:	7b7a      	ldrb	r2, [r7, #13]
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fecf 	bl	8001c2c <LinkTimerAfter>
 8001e8e:	e00f      	b.n	8001eb0 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001e90:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <linkTimer+0x144>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	4611      	mov	r1, r2
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff ff0c 	bl	8001cb8 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <linkTimer+0x144>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <linkTimer+0x148>)
 8001ea8:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001eaa:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <linkTimer+0x144>)
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001eb0:	89fb      	ldrh	r3, [r7, #14]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	2000018c 	.word	0x2000018c
 8001ec0:	2000018d 	.word	0x2000018d
 8001ec4:	200000fc 	.word	0x200000fc
 8001ec8:	20000190 	.word	0x20000190

08001ecc <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	460a      	mov	r2, r1
 8001ed6:	71fb      	strb	r3, [r7, #7]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001edc:	4b39      	ldr	r3, [pc, #228]	; (8001fc4 <UnlinkTimer+0xf8>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	79fa      	ldrb	r2, [r7, #7]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d111      	bne.n	8001f0c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001ee8:	4b36      	ldr	r3, [pc, #216]	; (8001fc4 <UnlinkTimer+0xf8>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4b36      	ldr	r3, [pc, #216]	; (8001fc8 <UnlinkTimer+0xfc>)
 8001ef0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001ef2:	79fa      	ldrb	r2, [r7, #7]
 8001ef4:	4935      	ldr	r1, [pc, #212]	; (8001fcc <UnlinkTimer+0x100>)
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	440b      	add	r3, r1
 8001f00:	3315      	adds	r3, #21
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	4b2f      	ldr	r3, [pc, #188]	; (8001fc4 <UnlinkTimer+0xf8>)
 8001f08:	701a      	strb	r2, [r3, #0]
 8001f0a:	e03e      	b.n	8001f8a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001f0c:	79fa      	ldrb	r2, [r7, #7]
 8001f0e:	492f      	ldr	r1, [pc, #188]	; (8001fcc <UnlinkTimer+0x100>)
 8001f10:	4613      	mov	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	440b      	add	r3, r1
 8001f1a:	3314      	adds	r3, #20
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001f20:	79fa      	ldrb	r2, [r7, #7]
 8001f22:	492a      	ldr	r1, [pc, #168]	; (8001fcc <UnlinkTimer+0x100>)
 8001f24:	4613      	mov	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4413      	add	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	440b      	add	r3, r1
 8001f2e:	3315      	adds	r3, #21
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001f34:	79f9      	ldrb	r1, [r7, #7]
 8001f36:	7bfa      	ldrb	r2, [r7, #15]
 8001f38:	4824      	ldr	r0, [pc, #144]	; (8001fcc <UnlinkTimer+0x100>)
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	440b      	add	r3, r1
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	4403      	add	r3, r0
 8001f44:	3315      	adds	r3, #21
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	b2d8      	uxtb	r0, r3
 8001f4a:	4920      	ldr	r1, [pc, #128]	; (8001fcc <UnlinkTimer+0x100>)
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4413      	add	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	440b      	add	r3, r1
 8001f56:	3315      	adds	r3, #21
 8001f58:	4602      	mov	r2, r0
 8001f5a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f5c:	7bbb      	ldrb	r3, [r7, #14]
 8001f5e:	2b06      	cmp	r3, #6
 8001f60:	d013      	beq.n	8001f8a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001f62:	79f9      	ldrb	r1, [r7, #7]
 8001f64:	7bba      	ldrb	r2, [r7, #14]
 8001f66:	4819      	ldr	r0, [pc, #100]	; (8001fcc <UnlinkTimer+0x100>)
 8001f68:	460b      	mov	r3, r1
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	440b      	add	r3, r1
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4403      	add	r3, r0
 8001f72:	3314      	adds	r3, #20
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	b2d8      	uxtb	r0, r3
 8001f78:	4914      	ldr	r1, [pc, #80]	; (8001fcc <UnlinkTimer+0x100>)
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4413      	add	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	440b      	add	r3, r1
 8001f84:	3314      	adds	r3, #20
 8001f86:	4602      	mov	r2, r0
 8001f88:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001f8a:	79fa      	ldrb	r2, [r7, #7]
 8001f8c:	490f      	ldr	r1, [pc, #60]	; (8001fcc <UnlinkTimer+0x100>)
 8001f8e:	4613      	mov	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	4413      	add	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	440b      	add	r3, r1
 8001f98:	330c      	adds	r3, #12
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001f9e:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <UnlinkTimer+0xf8>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b06      	cmp	r3, #6
 8001fa6:	d107      	bne.n	8001fb8 <UnlinkTimer+0xec>
 8001fa8:	79bb      	ldrb	r3, [r7, #6]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d104      	bne.n	8001fb8 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001fae:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <UnlinkTimer+0x104>)
 8001fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb4:	601a      	str	r2, [r3, #0]
  }

  return;
 8001fb6:	bf00      	nop
 8001fb8:	bf00      	nop
}
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	2000018c 	.word	0x2000018c
 8001fc8:	2000018d 	.word	0x2000018d
 8001fcc:	200000fc 	.word	0x200000fc
 8001fd0:	20000190 	.word	0x20000190

08001fd4 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001fda:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <ReturnTimeElapsed+0x70>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe2:	d026      	beq.n	8002032 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001fe4:	f7ff fe02 	bl	8001bec <ReadRtcSsrValue>
 8001fe8:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001fea:	4b16      	ldr	r3, [pc, #88]	; (8002044 <ReturnTimeElapsed+0x70>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d805      	bhi.n	8002000 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001ff4:	4b13      	ldr	r3, [pc, #76]	; (8002044 <ReturnTimeElapsed+0x70>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	607b      	str	r3, [r7, #4]
 8001ffe:	e00a      	b.n	8002016 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002000:	4b11      	ldr	r3, [pc, #68]	; (8002048 <ReturnTimeElapsed+0x74>)
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 800200c:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <ReturnTimeElapsed+0x70>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	4413      	add	r3, r2
 8002014:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002016:	4b0d      	ldr	r3, [pc, #52]	; (800204c <ReturnTimeElapsed+0x78>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	fb02 f303 	mul.w	r3, r2, r3
 8002022:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002024:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <ReturnTimeElapsed+0x7c>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	461a      	mov	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	40d3      	lsrs	r3, r2
 800202e:	607b      	str	r3, [r7, #4]
 8002030:	e001      	b.n	8002036 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	b29b      	uxth	r3, r3
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000190 	.word	0x20000190
 8002048:	20000198 	.word	0x20000198
 800204c:	20000196 	.word	0x20000196
 8002050:	20000195 	.word	0x20000195

08002054 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d108      	bne.n	8002076 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002064:	f7ff fdc2 	bl	8001bec <ReadRtcSsrValue>
 8002068:	4603      	mov	r3, r0
 800206a:	4a21      	ldr	r2, [pc, #132]	; (80020f0 <RestartWakeupCounter+0x9c>)
 800206c:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800206e:	2003      	movs	r0, #3
 8002070:	f001 fd2f 	bl	8003ad2 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002074:	e039      	b.n	80020ea <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d803      	bhi.n	8002084 <RestartWakeupCounter+0x30>
 800207c:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <RestartWakeupCounter+0xa0>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d002      	beq.n	800208a <RestartWakeupCounter+0x36>
      Value -= 1;
 8002084:	88fb      	ldrh	r3, [r7, #6]
 8002086:	3b01      	subs	r3, #1
 8002088:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800208a:	bf00      	nop
 800208c:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <RestartWakeupCounter+0xa4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f8      	beq.n	800208c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800209a:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <RestartWakeupCounter+0xa4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <RestartWakeupCounter+0xa4>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80020aa:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80020ac:	4b13      	ldr	r3, [pc, #76]	; (80020fc <RestartWakeupCounter+0xa8>)
 80020ae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80020b2:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80020b4:	2003      	movs	r0, #3
 80020b6:	f001 fd1a 	bl	8003aee <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80020ba:	4b11      	ldr	r3, [pc, #68]	; (8002100 <RestartWakeupCounter+0xac>)
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	0c1b      	lsrs	r3, r3, #16
 80020c0:	041b      	lsls	r3, r3, #16
 80020c2:	88fa      	ldrh	r2, [r7, #6]
 80020c4:	490e      	ldr	r1, [pc, #56]	; (8002100 <RestartWakeupCounter+0xac>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80020ca:	f7ff fd8f 	bl	8001bec <ReadRtcSsrValue>
 80020ce:	4603      	mov	r3, r0
 80020d0:	4a07      	ldr	r2, [pc, #28]	; (80020f0 <RestartWakeupCounter+0x9c>)
 80020d2:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80020d4:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <RestartWakeupCounter+0xa4>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <RestartWakeupCounter+0xa4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020e2:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80020e4:	f3af 8000 	nop.w
  return ;
 80020e8:	bf00      	nop
}
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20000190 	.word	0x20000190
 80020f4:	20000195 	.word	0x20000195
 80020f8:	200001dc 	.word	0x200001dc
 80020fc:	58000800 	.word	0x58000800
 8002100:	40002800 	.word	0x40002800

08002104 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800210a:	4b45      	ldr	r3, [pc, #276]	; (8002220 <RescheduleTimerList+0x11c>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002116:	d107      	bne.n	8002128 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002118:	bf00      	nop
 800211a:	4b42      	ldr	r3, [pc, #264]	; (8002224 <RescheduleTimerList+0x120>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1f8      	bne.n	800211a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002128:	4b3e      	ldr	r3, [pc, #248]	; (8002224 <RescheduleTimerList+0x120>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	4b3d      	ldr	r3, [pc, #244]	; (8002224 <RescheduleTimerList+0x120>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002136:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002138:	4b3b      	ldr	r3, [pc, #236]	; (8002228 <RescheduleTimerList+0x124>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800213e:	7bfa      	ldrb	r2, [r7, #15]
 8002140:	493a      	ldr	r1, [pc, #232]	; (800222c <RescheduleTimerList+0x128>)
 8002142:	4613      	mov	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	440b      	add	r3, r1
 800214c:	3308      	adds	r3, #8
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002152:	f7ff ff3f 	bl	8001fd4 <ReturnTimeElapsed>
 8002156:	4603      	mov	r3, r0
 8002158:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800215a:	88fb      	ldrh	r3, [r7, #6]
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	429a      	cmp	r2, r3
 8002160:	d205      	bcs.n	800216e <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002166:	4b32      	ldr	r3, [pc, #200]	; (8002230 <RescheduleTimerList+0x12c>)
 8002168:	2201      	movs	r2, #1
 800216a:	701a      	strb	r2, [r3, #0]
 800216c:	e04d      	b.n	800220a <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	4a30      	ldr	r2, [pc, #192]	; (8002234 <RescheduleTimerList+0x130>)
 8002172:	8812      	ldrh	r2, [r2, #0]
 8002174:	b292      	uxth	r2, r2
 8002176:	4413      	add	r3, r2
 8002178:	461a      	mov	r2, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	4293      	cmp	r3, r2
 800217e:	d906      	bls.n	800218e <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002180:	4b2c      	ldr	r3, [pc, #176]	; (8002234 <RescheduleTimerList+0x130>)
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002186:	4b2a      	ldr	r3, [pc, #168]	; (8002230 <RescheduleTimerList+0x12c>)
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
 800218c:	e03d      	b.n	800220a <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	b29a      	uxth	r2, r3
 8002192:	88fb      	ldrh	r3, [r7, #6]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002198:	4b25      	ldr	r3, [pc, #148]	; (8002230 <RescheduleTimerList+0x12c>)
 800219a:	2201      	movs	r2, #1
 800219c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800219e:	e034      	b.n	800220a <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	4922      	ldr	r1, [pc, #136]	; (800222c <RescheduleTimerList+0x128>)
 80021a4:	4613      	mov	r3, r2
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	4413      	add	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	440b      	add	r3, r1
 80021ae:	3308      	adds	r3, #8
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	88fb      	ldrh	r3, [r7, #6]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d20a      	bcs.n	80021ce <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80021b8:	7bfa      	ldrb	r2, [r7, #15]
 80021ba:	491c      	ldr	r1, [pc, #112]	; (800222c <RescheduleTimerList+0x128>)
 80021bc:	4613      	mov	r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4413      	add	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	440b      	add	r3, r1
 80021c6:	3308      	adds	r3, #8
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	e013      	b.n	80021f6 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80021ce:	7bfa      	ldrb	r2, [r7, #15]
 80021d0:	4916      	ldr	r1, [pc, #88]	; (800222c <RescheduleTimerList+0x128>)
 80021d2:	4613      	mov	r3, r2
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	4413      	add	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	440b      	add	r3, r1
 80021dc:	3308      	adds	r3, #8
 80021de:	6819      	ldr	r1, [r3, #0]
 80021e0:	88fb      	ldrh	r3, [r7, #6]
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	1ac9      	subs	r1, r1, r3
 80021e6:	4811      	ldr	r0, [pc, #68]	; (800222c <RescheduleTimerList+0x128>)
 80021e8:	4613      	mov	r3, r2
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4413      	add	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4403      	add	r3, r0
 80021f2:	3308      	adds	r3, #8
 80021f4:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	490c      	ldr	r1, [pc, #48]	; (800222c <RescheduleTimerList+0x128>)
 80021fa:	4613      	mov	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	4413      	add	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	440b      	add	r3, r1
 8002204:	3315      	adds	r3, #21
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	2b06      	cmp	r3, #6
 800220e:	d1c7      	bne.n	80021a0 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002210:	89bb      	ldrh	r3, [r7, #12]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff ff1e 	bl	8002054 <RestartWakeupCounter>

  return ;
 8002218:	bf00      	nop
}
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40002800 	.word	0x40002800
 8002224:	200001dc 	.word	0x200001dc
 8002228:	2000018c 	.word	0x2000018c
 800222c:	200000fc 	.word	0x200000fc
 8002230:	20000194 	.word	0x20000194
 8002234:	2000019a 	.word	0x2000019a

08002238 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	; 0x28
 800223c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800223e:	f3ef 8310 	mrs	r3, PRIMASK
 8002242:	617b      	str	r3, [r7, #20]
  return(result);
 8002244:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002248:	b672      	cpsid	i
}
 800224a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800224c:	4b59      	ldr	r3, [pc, #356]	; (80023b4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	22ca      	movs	r2, #202	; 0xca
 8002252:	625a      	str	r2, [r3, #36]	; 0x24
 8002254:	4b57      	ldr	r3, [pc, #348]	; (80023b4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2253      	movs	r2, #83	; 0x53
 800225a:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 800225c:	4b55      	ldr	r3, [pc, #340]	; (80023b4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	4b54      	ldr	r3, [pc, #336]	; (80023b4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800226a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800226c:	4b52      	ldr	r3, [pc, #328]	; (80023b8 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002274:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002278:	4950      	ldr	r1, [pc, #320]	; (80023bc <HW_TS_RTC_Wakeup_Handler+0x184>)
 800227a:	4613      	mov	r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	4413      	add	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	440b      	add	r3, r1
 8002284:	330c      	adds	r3, #12
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d16e      	bne.n	800236c <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800228e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002292:	494a      	ldr	r1, [pc, #296]	; (80023bc <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002294:	4613      	mov	r3, r2
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	4413      	add	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	440b      	add	r3, r1
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80022a2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80022a6:	4945      	ldr	r1, [pc, #276]	; (80023bc <HW_TS_RTC_Wakeup_Handler+0x184>)
 80022a8:	4613      	mov	r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	440b      	add	r3, r1
 80022b2:	3310      	adds	r3, #16
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80022b8:	4b41      	ldr	r3, [pc, #260]	; (80023c0 <HW_TS_RTC_Wakeup_Handler+0x188>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d04c      	beq.n	800235c <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80022c2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80022c6:	493d      	ldr	r1, [pc, #244]	; (80023bc <HW_TS_RTC_Wakeup_Handler+0x184>)
 80022c8:	4613      	mov	r3, r2
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	4413      	add	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	440b      	add	r3, r1
 80022d2:	330d      	adds	r3, #13
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d124      	bne.n	8002326 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80022dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022e0:	2101      	movs	r1, #1
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fdf2 	bl	8001ecc <UnlinkTimer>
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	f383 8810 	msr	PRIMASK, r3
}
 80022f2:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80022f4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80022f8:	4930      	ldr	r1, [pc, #192]	; (80023bc <HW_TS_RTC_Wakeup_Handler+0x184>)
 80022fa:	4613      	mov	r3, r2
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	4413      	add	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	440b      	add	r3, r1
 8002304:	3304      	adds	r3, #4
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800230c:	4611      	mov	r1, r2
 800230e:	4618      	mov	r0, r3
 8002310:	f000 f9b8 	bl	8002684 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002314:	4b27      	ldr	r3, [pc, #156]	; (80023b4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	22ca      	movs	r2, #202	; 0xca
 800231a:	625a      	str	r2, [r3, #36]	; 0x24
 800231c:	4b25      	ldr	r3, [pc, #148]	; (80023b4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2253      	movs	r2, #83	; 0x53
 8002322:	625a      	str	r2, [r3, #36]	; 0x24
 8002324:	e012      	b.n	800234c <HW_TS_RTC_Wakeup_Handler+0x114>
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f383 8810 	msr	PRIMASK, r3
}
 8002330:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002332:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002336:	4618      	mov	r0, r3
 8002338:	f000 f920 	bl	800257c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800233c:	4b1d      	ldr	r3, [pc, #116]	; (80023b4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	22ca      	movs	r2, #202	; 0xca
 8002342:	625a      	str	r2, [r3, #36]	; 0x24
 8002344:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2253      	movs	r2, #83	; 0x53
 800234a:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 800234c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002350:	69fa      	ldr	r2, [r7, #28]
 8002352:	4619      	mov	r1, r3
 8002354:	69b8      	ldr	r0, [r7, #24]
 8002356:	f000 fa1b 	bl	8002790 <HW_TS_RTC_Int_AppNot>
 800235a:	e022      	b.n	80023a2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 800235c:	f7ff fed2 	bl	8002104 <RescheduleTimerList>
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f383 8810 	msr	PRIMASK, r3
}
 800236a:	e01a      	b.n	80023a2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800236c:	bf00      	nop
 800236e:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f8      	beq.n	800236e <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800237c:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	b2da      	uxtb	r2, r3
 8002384:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800238c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800238e:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002390:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f383 8810 	msr	PRIMASK, r3
}
 80023a0:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80023a2:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	22ff      	movs	r2, #255	; 0xff
 80023a8:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80023aa:	bf00      	nop
}
 80023ac:	3728      	adds	r7, #40	; 0x28
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200001dc 	.word	0x200001dc
 80023b8:	2000018c 	.word	0x2000018c
 80023bc:	200000fc 	.word	0x200000fc
 80023c0:	20000194 	.word	0x20000194
 80023c4:	58000800 	.word	0x58000800

080023c8 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	6039      	str	r1, [r7, #0]
 80023d2:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80023d4:	4b5e      	ldr	r3, [pc, #376]	; (8002550 <HW_TS_Init+0x188>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	22ca      	movs	r2, #202	; 0xca
 80023da:	625a      	str	r2, [r3, #36]	; 0x24
 80023dc:	4b5c      	ldr	r3, [pc, #368]	; (8002550 <HW_TS_Init+0x188>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2253      	movs	r2, #83	; 0x53
 80023e2:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80023e4:	4b5b      	ldr	r3, [pc, #364]	; (8002554 <HW_TS_Init+0x18c>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	4a5a      	ldr	r2, [pc, #360]	; (8002554 <HW_TS_Init+0x18c>)
 80023ea:	f043 0320 	orr.w	r3, r3, #32
 80023ee:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80023f0:	4b58      	ldr	r3, [pc, #352]	; (8002554 <HW_TS_Init+0x18c>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	f1c3 0304 	rsb	r3, r3, #4
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4b55      	ldr	r3, [pc, #340]	; (8002558 <HW_TS_Init+0x190>)
 8002404:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002406:	4b53      	ldr	r3, [pc, #332]	; (8002554 <HW_TS_Init+0x18c>)
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800240e:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002412:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	fa92 f2a2 	rbit	r2, r2
 800241a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	2a00      	cmp	r2, #0
 8002424:	d101      	bne.n	800242a <HW_TS_Init+0x62>
  {
    return 32U;
 8002426:	2220      	movs	r2, #32
 8002428:	e003      	b.n	8002432 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	fab2 f282 	clz	r2, r2
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	40d3      	lsrs	r3, r2
 8002434:	b2db      	uxtb	r3, r3
 8002436:	3301      	adds	r3, #1
 8002438:	b2da      	uxtb	r2, r3
 800243a:	4b48      	ldr	r3, [pc, #288]	; (800255c <HW_TS_Init+0x194>)
 800243c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800243e:	4b45      	ldr	r3, [pc, #276]	; (8002554 <HW_TS_Init+0x18c>)
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	b29b      	uxth	r3, r3
 8002444:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002448:	b29b      	uxth	r3, r3
 800244a:	3301      	adds	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	4b44      	ldr	r3, [pc, #272]	; (8002560 <HW_TS_Init+0x198>)
 8002450:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002452:	4b43      	ldr	r3, [pc, #268]	; (8002560 <HW_TS_Init+0x198>)
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	3b01      	subs	r3, #1
 8002458:	4a40      	ldr	r2, [pc, #256]	; (800255c <HW_TS_Init+0x194>)
 800245a:	7812      	ldrb	r2, [r2, #0]
 800245c:	fb02 f303 	mul.w	r3, r2, r3
 8002460:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002464:	4a3c      	ldr	r2, [pc, #240]	; (8002558 <HW_TS_Init+0x190>)
 8002466:	7812      	ldrb	r2, [r2, #0]
 8002468:	40d3      	lsrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002472:	4293      	cmp	r3, r2
 8002474:	d904      	bls.n	8002480 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002476:	4b3b      	ldr	r3, [pc, #236]	; (8002564 <HW_TS_Init+0x19c>)
 8002478:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800247c:	801a      	strh	r2, [r3, #0]
 800247e:	e003      	b.n	8002488 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	b29a      	uxth	r2, r3
 8002484:	4b37      	ldr	r3, [pc, #220]	; (8002564 <HW_TS_Init+0x19c>)
 8002486:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002488:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800248c:	f7ff fb9c 	bl	8001bc8 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002490:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002494:	f7ff fb84 	bl	8001ba0 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d13d      	bne.n	800251a <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800249e:	4b32      	ldr	r3, [pc, #200]	; (8002568 <HW_TS_Init+0x1a0>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80024a4:	4b31      	ldr	r3, [pc, #196]	; (800256c <HW_TS_Init+0x1a4>)
 80024a6:	f04f 32ff 	mov.w	r2, #4294967295
 80024aa:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80024ac:	2300      	movs	r3, #0
 80024ae:	77fb      	strb	r3, [r7, #31]
 80024b0:	e00c      	b.n	80024cc <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80024b2:	7ffa      	ldrb	r2, [r7, #31]
 80024b4:	492e      	ldr	r1, [pc, #184]	; (8002570 <HW_TS_Init+0x1a8>)
 80024b6:	4613      	mov	r3, r2
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	4413      	add	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	440b      	add	r3, r1
 80024c0:	330c      	adds	r3, #12
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80024c6:	7ffb      	ldrb	r3, [r7, #31]
 80024c8:	3301      	adds	r3, #1
 80024ca:	77fb      	strb	r3, [r7, #31]
 80024cc:	7ffb      	ldrb	r3, [r7, #31]
 80024ce:	2b05      	cmp	r3, #5
 80024d0:	d9ef      	bls.n	80024b2 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80024d2:	4b28      	ldr	r3, [pc, #160]	; (8002574 <HW_TS_Init+0x1ac>)
 80024d4:	2206      	movs	r2, #6
 80024d6:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80024d8:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <HW_TS_Init+0x188>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	4b1c      	ldr	r3, [pc, #112]	; (8002550 <HW_TS_Init+0x188>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024e6:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80024e8:	4b19      	ldr	r3, [pc, #100]	; (8002550 <HW_TS_Init+0x188>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	4b17      	ldr	r3, [pc, #92]	; (8002550 <HW_TS_Init+0x188>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80024f8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80024fa:	4b1f      	ldr	r3, [pc, #124]	; (8002578 <HW_TS_Init+0x1b0>)
 80024fc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002500:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002502:	2003      	movs	r0, #3
 8002504:	f001 faf3 	bl	8003aee <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <HW_TS_Init+0x188>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	4b10      	ldr	r3, [pc, #64]	; (8002550 <HW_TS_Init+0x188>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	e009      	b.n	800252e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800251a:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <HW_TS_Init+0x188>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002524:	2b00      	cmp	r3, #0
 8002526:	d002      	beq.n	800252e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002528:	2003      	movs	r0, #3
 800252a:	f001 fad2 	bl	8003ad2 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800252e:	4b08      	ldr	r3, [pc, #32]	; (8002550 <HW_TS_Init+0x188>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	22ff      	movs	r2, #255	; 0xff
 8002534:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002536:	2200      	movs	r2, #0
 8002538:	2103      	movs	r1, #3
 800253a:	2003      	movs	r0, #3
 800253c:	f001 fa87 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002540:	2003      	movs	r0, #3
 8002542:	f001 fa9e 	bl	8003a82 <HAL_NVIC_EnableIRQ>

  return;
 8002546:	bf00      	nop
}
 8002548:	3720      	adds	r7, #32
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	200001dc 	.word	0x200001dc
 8002554:	40002800 	.word	0x40002800
 8002558:	20000195 	.word	0x20000195
 800255c:	20000196 	.word	0x20000196
 8002560:	20000198 	.word	0x20000198
 8002564:	2000019a 	.word	0x2000019a
 8002568:	20000194 	.word	0x20000194
 800256c:	20000190 	.word	0x20000190
 8002570:	200000fc 	.word	0x200000fc
 8002574:	2000018c 	.word	0x2000018c
 8002578:	58000800 	.word	0x58000800

0800257c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002586:	f3ef 8310 	mrs	r3, PRIMASK
 800258a:	60fb      	str	r3, [r7, #12]
  return(result);
 800258c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800258e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002590:	b672      	cpsid	i
}
 8002592:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002594:	2003      	movs	r0, #3
 8002596:	f001 fa82 	bl	8003a9e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800259a:	4b34      	ldr	r3, [pc, #208]	; (800266c <HW_TS_Stop+0xf0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	22ca      	movs	r2, #202	; 0xca
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24
 80025a2:	4b32      	ldr	r3, [pc, #200]	; (800266c <HW_TS_Stop+0xf0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2253      	movs	r2, #83	; 0x53
 80025a8:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80025aa:	79fa      	ldrb	r2, [r7, #7]
 80025ac:	4930      	ldr	r1, [pc, #192]	; (8002670 <HW_TS_Stop+0xf4>)
 80025ae:	4613      	mov	r3, r2
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	4413      	add	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	440b      	add	r3, r1
 80025b8:	330c      	adds	r3, #12
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d142      	bne.n	8002648 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	2100      	movs	r1, #0
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff fc80 	bl	8001ecc <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80025cc:	4b29      	ldr	r3, [pc, #164]	; (8002674 <HW_TS_Stop+0xf8>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80025d2:	7cfb      	ldrb	r3, [r7, #19]
 80025d4:	2b06      	cmp	r3, #6
 80025d6:	d12f      	bne.n	8002638 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80025d8:	4b27      	ldr	r3, [pc, #156]	; (8002678 <HW_TS_Stop+0xfc>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025e4:	d107      	bne.n	80025f6 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80025e6:	bf00      	nop
 80025e8:	4b20      	ldr	r3, [pc, #128]	; (800266c <HW_TS_Stop+0xf0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f8      	bne.n	80025e8 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80025f6:	4b1d      	ldr	r3, [pc, #116]	; (800266c <HW_TS_Stop+0xf0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	4b1b      	ldr	r3, [pc, #108]	; (800266c <HW_TS_Stop+0xf0>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002604:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002606:	bf00      	nop
 8002608:	4b18      	ldr	r3, [pc, #96]	; (800266c <HW_TS_Stop+0xf0>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f8      	beq.n	8002608 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002616:	4b15      	ldr	r3, [pc, #84]	; (800266c <HW_TS_Stop+0xf0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	b2da      	uxtb	r2, r3
 800261e:	4b13      	ldr	r3, [pc, #76]	; (800266c <HW_TS_Stop+0xf0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002626:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002628:	4b14      	ldr	r3, [pc, #80]	; (800267c <HW_TS_Stop+0x100>)
 800262a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800262e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002630:	2003      	movs	r0, #3
 8002632:	f001 fa5c 	bl	8003aee <HAL_NVIC_ClearPendingIRQ>
 8002636:	e007      	b.n	8002648 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002638:	4b11      	ldr	r3, [pc, #68]	; (8002680 <HW_TS_Stop+0x104>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	b2db      	uxtb	r3, r3
 800263e:	7cfa      	ldrb	r2, [r7, #19]
 8002640:	429a      	cmp	r2, r3
 8002642:	d001      	beq.n	8002648 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002644:	f7ff fd5e 	bl	8002104 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002648:	4b08      	ldr	r3, [pc, #32]	; (800266c <HW_TS_Stop+0xf0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	22ff      	movs	r2, #255	; 0xff
 800264e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002650:	2003      	movs	r0, #3
 8002652:	f001 fa16 	bl	8003a82 <HAL_NVIC_EnableIRQ>
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f383 8810 	msr	PRIMASK, r3
}
 8002660:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002662:	bf00      	nop
}
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	200001dc 	.word	0x200001dc
 8002670:	200000fc 	.word	0x200000fc
 8002674:	2000018c 	.word	0x2000018c
 8002678:	40002800 	.word	0x40002800
 800267c:	58000800 	.word	0x58000800
 8002680:	2000018d 	.word	0x2000018d

08002684 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	6039      	str	r1, [r7, #0]
 800268e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002690:	79fa      	ldrb	r2, [r7, #7]
 8002692:	493b      	ldr	r1, [pc, #236]	; (8002780 <HW_TS_Start+0xfc>)
 8002694:	4613      	mov	r3, r2
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	4413      	add	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	440b      	add	r3, r1
 800269e:	330c      	adds	r3, #12
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d103      	bne.n	80026b0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff ff66 	bl	800257c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026b0:	f3ef 8310 	mrs	r3, PRIMASK
 80026b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80026b6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80026b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80026ba:	b672      	cpsid	i
}
 80026bc:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80026be:	2003      	movs	r0, #3
 80026c0:	f001 f9ed 	bl	8003a9e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80026c4:	4b2f      	ldr	r3, [pc, #188]	; (8002784 <HW_TS_Start+0x100>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	22ca      	movs	r2, #202	; 0xca
 80026ca:	625a      	str	r2, [r3, #36]	; 0x24
 80026cc:	4b2d      	ldr	r3, [pc, #180]	; (8002784 <HW_TS_Start+0x100>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2253      	movs	r2, #83	; 0x53
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80026d4:	79fa      	ldrb	r2, [r7, #7]
 80026d6:	492a      	ldr	r1, [pc, #168]	; (8002780 <HW_TS_Start+0xfc>)
 80026d8:	4613      	mov	r3, r2
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	4413      	add	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	440b      	add	r3, r1
 80026e2:	330c      	adds	r3, #12
 80026e4:	2202      	movs	r2, #2
 80026e6:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80026e8:	79fa      	ldrb	r2, [r7, #7]
 80026ea:	4925      	ldr	r1, [pc, #148]	; (8002780 <HW_TS_Start+0xfc>)
 80026ec:	4613      	mov	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	440b      	add	r3, r1
 80026f6:	3308      	adds	r3, #8
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80026fc:	79fa      	ldrb	r2, [r7, #7]
 80026fe:	4920      	ldr	r1, [pc, #128]	; (8002780 <HW_TS_Start+0xfc>)
 8002700:	4613      	mov	r3, r2
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	4413      	add	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	440b      	add	r3, r1
 800270a:	3304      	adds	r3, #4
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fb30 	bl	8001d78 <linkTimer>
 8002718:	4603      	mov	r3, r0
 800271a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800271c:	4b1a      	ldr	r3, [pc, #104]	; (8002788 <HW_TS_Start+0x104>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002722:	4b1a      	ldr	r3, [pc, #104]	; (800278c <HW_TS_Start+0x108>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	b2db      	uxtb	r3, r3
 8002728:	7c7a      	ldrb	r2, [r7, #17]
 800272a:	429a      	cmp	r2, r3
 800272c:	d002      	beq.n	8002734 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800272e:	f7ff fce9 	bl	8002104 <RescheduleTimerList>
 8002732:	e013      	b.n	800275c <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002734:	79fa      	ldrb	r2, [r7, #7]
 8002736:	4912      	ldr	r1, [pc, #72]	; (8002780 <HW_TS_Start+0xfc>)
 8002738:	4613      	mov	r3, r2
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	4413      	add	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	440b      	add	r3, r1
 8002742:	3308      	adds	r3, #8
 8002744:	6819      	ldr	r1, [r3, #0]
 8002746:	8a7b      	ldrh	r3, [r7, #18]
 8002748:	79fa      	ldrb	r2, [r7, #7]
 800274a:	1ac9      	subs	r1, r1, r3
 800274c:	480c      	ldr	r0, [pc, #48]	; (8002780 <HW_TS_Start+0xfc>)
 800274e:	4613      	mov	r3, r2
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	4413      	add	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4403      	add	r3, r0
 8002758:	3308      	adds	r3, #8
 800275a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800275c:	4b09      	ldr	r3, [pc, #36]	; (8002784 <HW_TS_Start+0x100>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	22ff      	movs	r2, #255	; 0xff
 8002762:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002764:	2003      	movs	r0, #3
 8002766:	f001 f98c 	bl	8003a82 <HAL_NVIC_EnableIRQ>
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f383 8810 	msr	PRIMASK, r3
}
 8002774:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002776:	bf00      	nop
}
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	200000fc 	.word	0x200000fc
 8002784:	200001dc 	.word	0x200001dc
 8002788:	2000018c 	.word	0x2000018c
 800278c:	2000018d 	.word	0x2000018d

08002790 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	460b      	mov	r3, r1
 800279a:	607a      	str	r2, [r7, #4]
 800279c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4798      	blx	r3

  return;
 80027a2:	bf00      	nop
}
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	607b      	str	r3, [r7, #4]
 80027b6:	4603      	mov	r3, r0
 80027b8:	73fb      	strb	r3, [r7, #15]
 80027ba:	4613      	mov	r3, r2
 80027bc:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80027c2:	2300      	movs	r3, #0
 80027c4:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10e      	bne.n	80027ea <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 80027cc:	4a17      	ldr	r2, [pc, #92]	; (800282c <HW_UART_Transmit_DMA+0x80>)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80027d2:	4b17      	ldr	r3, [pc, #92]	; (8002830 <HW_UART_Transmit_DMA+0x84>)
 80027d4:	4a17      	ldr	r2, [pc, #92]	; (8002834 <HW_UART_Transmit_DMA+0x88>)
 80027d6:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80027d8:	89bb      	ldrh	r3, [r7, #12]
 80027da:	461a      	mov	r2, r3
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	4814      	ldr	r0, [pc, #80]	; (8002830 <HW_UART_Transmit_DMA+0x84>)
 80027e0:	f004 ffea 	bl	80077b8 <HAL_UART_Transmit_DMA>
 80027e4:	4603      	mov	r3, r0
 80027e6:	75fb      	strb	r3, [r7, #23]
            break;
 80027e8:	e000      	b.n	80027ec <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80027ea:	bf00      	nop
    }

    switch (hal_status)
 80027ec:	7dfb      	ldrb	r3, [r7, #23]
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	d816      	bhi.n	8002820 <HW_UART_Transmit_DMA+0x74>
 80027f2:	a201      	add	r2, pc, #4	; (adr r2, 80027f8 <HW_UART_Transmit_DMA+0x4c>)
 80027f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f8:	08002809 	.word	0x08002809
 80027fc:	0800280f 	.word	0x0800280f
 8002800:	08002815 	.word	0x08002815
 8002804:	0800281b 	.word	0x0800281b
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002808:	2300      	movs	r3, #0
 800280a:	75bb      	strb	r3, [r7, #22]
            break;
 800280c:	e009      	b.n	8002822 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800280e:	2301      	movs	r3, #1
 8002810:	75bb      	strb	r3, [r7, #22]
            break;
 8002812:	e006      	b.n	8002822 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002814:	2302      	movs	r3, #2
 8002816:	75bb      	strb	r3, [r7, #22]
            break;
 8002818:	e003      	b.n	8002822 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 800281a:	2303      	movs	r3, #3
 800281c:	75bb      	strb	r3, [r7, #22]
            break;
 800281e:	e000      	b.n	8002822 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002820:	bf00      	nop
    }

    return hw_status;
 8002822:	7dbb      	ldrb	r3, [r7, #22]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	2000019c 	.word	0x2000019c
 8002830:	20000298 	.word	0x20000298
 8002834:	40013800 	.word	0x40013800

08002838 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	461a      	mov	r2, r3
 8002846:	4b09      	ldr	r3, [pc, #36]	; (800286c <HAL_UART_TxCpltCallback+0x34>)
 8002848:	429a      	cmp	r2, r3
 800284a:	d107      	bne.n	800285c <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 800284c:	4b08      	ldr	r3, [pc, #32]	; (8002870 <HAL_UART_TxCpltCallback+0x38>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_UART_TxCpltCallback+0x38>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4798      	blx	r3
            }
            break;
 800285a:	e001      	b.n	8002860 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 800285c:	bf00      	nop
 800285e:	e000      	b.n	8002862 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8002860:	bf00      	nop
    }

    return;
 8002862:	bf00      	nop
}
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40013800 	.word	0x40013800
 8002870:	2000019c 	.word	0x2000019c

08002874 <LL_RCC_LSE_SetDriveCapability>:
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800287c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002884:	f023 0218 	bic.w	r2, r3, #24
 8002888:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <LL_AHB1_GRP1_EnableClock>:
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80028a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80028ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80028b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4013      	ands	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028c4:	68fb      	ldr	r3, [r7, #12]
}
 80028c6:	bf00      	nop
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <LL_AHB2_GRP1_EnableClock>:
{
 80028d2:	b480      	push	{r7}
 80028d4:	b085      	sub	sp, #20
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80028da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80028ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4013      	ands	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028f6:	68fb      	ldr	r3, [r7, #12]
}
 80028f8:	bf00      	nop
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002908:	f000 fec8 	bl	800369c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 800290c:	f7fe fbec 	bl	80010e8 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002910:	f000 f824 	bl	800295c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002914:	f000 f898 	bl	8002a48 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002918:	f000 f8b6 	bl	8002a88 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800291c:	f000 fa58 	bl	8002dd0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002920:	f000 fa44 	bl	8002dac <MX_DMA_Init>
  MX_RTC_Init();
 8002924:	f000 f8cc 	bl	8002ac0 <MX_RTC_Init>
  MX_USB_PCD_Init();
 8002928:	f000 fa18 	bl	8002d5c <MX_USB_PCD_Init>
  MX_TIM2_Init();
 800292c:	f000 f8fc 	bl	8002b28 <MX_TIM2_Init>
  MX_TIM16_Init();
 8002930:	f000 f94e 	bl	8002bd0 <MX_TIM16_Init>
  MX_RF_Init();
 8002934:	f000 f8bc 	bl	8002ab0 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8002938:	2100      	movs	r1, #0
 800293a:	4806      	ldr	r0, [pc, #24]	; (8002954 <main+0x50>)
 800293c:	f003 ffb0 	bl	80068a0 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //really just channel 1 and 2 because that is what the encoder uses
 8002940:	213c      	movs	r1, #60	; 0x3c
 8002942:	4805      	ldr	r0, [pc, #20]	; (8002958 <main+0x54>)
 8002944:	f004 f92c 	bl	8006ba0 <HAL_TIM_Encoder_Start>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002948:	f7fe fbdc 	bl	8001104 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 800294c:	f7fe fe89 	bl	8001662 <MX_APPE_Process>
 8002950:	e7fc      	b.n	800294c <main+0x48>
 8002952:	bf00      	nop
 8002954:	2000024c 	.word	0x2000024c
 8002958:	20000200 	.word	0x20000200

0800295c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b09a      	sub	sp, #104	; 0x68
 8002960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002962:	f107 0320 	add.w	r3, r7, #32
 8002966:	2248      	movs	r2, #72	; 0x48
 8002968:	2100      	movs	r1, #0
 800296a:	4618      	mov	r0, r3
 800296c:	f00b fa04 	bl	800dd78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002970:	1d3b      	adds	r3, r7, #4
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	605a      	str	r2, [r3, #4]
 8002978:	609a      	str	r2, [r3, #8]
 800297a:	60da      	str	r2, [r3, #12]
 800297c:	611a      	str	r2, [r3, #16]
 800297e:	615a      	str	r2, [r3, #20]
 8002980:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8002982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800298c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002990:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8002992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f023 0303 	bic.w	r3, r3, #3
 800299c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80029a6:	f001 ff25 	bl	80047f4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80029aa:	2000      	movs	r0, #0
 80029ac:	f7ff ff62 	bl	8002874 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029b0:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <SystemClock_Config+0xe8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029b8:	4a22      	ldr	r2, [pc, #136]	; (8002a44 <SystemClock_Config+0xe8>)
 80029ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029be:	6013      	str	r3, [r2, #0]
 80029c0:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <SystemClock_Config+0xe8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029c8:	603b      	str	r3, [r7, #0]
 80029ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80029cc:	2327      	movs	r3, #39	; 0x27
 80029ce:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80029d6:	2301      	movs	r3, #1
 80029d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80029e0:	2301      	movs	r3, #1
 80029e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029e4:	2340      	movs	r3, #64	; 0x40
 80029e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80029e8:	2300      	movs	r3, #0
 80029ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80029ec:	2360      	movs	r3, #96	; 0x60
 80029ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80029f0:	2300      	movs	r3, #0
 80029f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029f4:	f107 0320 	add.w	r3, r7, #32
 80029f8:	4618      	mov	r0, r3
 80029fa:	f002 fa8f 	bl	8004f1c <HAL_RCC_OscConfig>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002a04:	f000 fa8c 	bl	8002f20 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002a08:	236f      	movs	r3, #111	; 0x6f
 8002a0a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a10:	2300      	movs	r3, #0
 8002a12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a14:	2300      	movs	r3, #0
 8002a16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002a24:	1d3b      	adds	r3, r7, #4
 8002a26:	2101      	movs	r1, #1
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f002 fdeb 	bl	8005604 <HAL_RCC_ClockConfig>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8002a34:	f000 fa74 	bl	8002f20 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002a38:	f003 fba6 	bl	8006188 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002a3c:	bf00      	nop
 8002a3e:	3768      	adds	r7, #104	; 0x68
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	58000400 	.word	0x58000400

08002a48 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b094      	sub	sp, #80	; 0x50
 8002a4c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a4e:	463b      	mov	r3, r7
 8002a50:	2250      	movs	r2, #80	; 0x50
 8002a52:	2100      	movs	r1, #0
 8002a54:	4618      	mov	r0, r3
 8002a56:	f00b f98f 	bl	800dd78 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002a5a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002a5e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002a60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a64:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002a66:	2302      	movs	r3, #2
 8002a68:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002a6a:	2310      	movs	r3, #16
 8002a6c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a6e:	463b      	mov	r3, r7
 8002a70:	4618      	mov	r0, r3
 8002a72:	f003 fa13 	bl	8005e9c <HAL_RCCEx_PeriphCLKConfig>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002a7c:	f000 fa50 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002a80:	bf00      	nop
 8002a82:	3750      	adds	r7, #80	; 0x50
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <MX_IPCC_Init+0x20>)
 8002a8e:	4a07      	ldr	r2, [pc, #28]	; (8002aac <MX_IPCC_Init+0x24>)
 8002a90:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002a92:	4805      	ldr	r0, [pc, #20]	; (8002aa8 <MX_IPCC_Init+0x20>)
 8002a94:	f001 fd30 	bl	80044f8 <HAL_IPCC_Init>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002a9e:	f000 fa3f 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	200001a0 	.word	0x200001a0
 8002aac:	58000c00 	.word	0x58000c00

08002ab0 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
	...

08002ac0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002ac4:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <MX_RTC_Init+0x60>)
 8002ac6:	4a17      	ldr	r2, [pc, #92]	; (8002b24 <MX_RTC_Init+0x64>)
 8002ac8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002aca:	4b15      	ldr	r3, [pc, #84]	; (8002b20 <MX_RTC_Init+0x60>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002ad0:	4b13      	ldr	r3, [pc, #76]	; (8002b20 <MX_RTC_Init+0x60>)
 8002ad2:	220f      	movs	r2, #15
 8002ad4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002ad6:	4b12      	ldr	r3, [pc, #72]	; (8002b20 <MX_RTC_Init+0x60>)
 8002ad8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002adc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002ade:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <MX_RTC_Init+0x60>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002ae4:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <MX_RTC_Init+0x60>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002aea:	4b0d      	ldr	r3, [pc, #52]	; (8002b20 <MX_RTC_Init+0x60>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <MX_RTC_Init+0x60>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002af6:	480a      	ldr	r0, [pc, #40]	; (8002b20 <MX_RTC_Init+0x60>)
 8002af8:	f003 fc5e 	bl	80063b8 <HAL_RTC_Init>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002b02:	f000 fa0d 	bl	8002f20 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002b06:	2200      	movs	r2, #0
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4805      	ldr	r0, [pc, #20]	; (8002b20 <MX_RTC_Init+0x60>)
 8002b0c:	f003 fd54 	bl	80065b8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002b16:	f000 fa03 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	200001dc 	.word	0x200001dc
 8002b24:	40002800 	.word	0x40002800

08002b28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08c      	sub	sp, #48	; 0x30
 8002b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b2e:	f107 030c 	add.w	r3, r7, #12
 8002b32:	2224      	movs	r2, #36	; 0x24
 8002b34:	2100      	movs	r1, #0
 8002b36:	4618      	mov	r0, r3
 8002b38:	f00b f91e 	bl	800dd78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b3c:	463b      	mov	r3, r7
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b46:	4b21      	ldr	r3, [pc, #132]	; (8002bcc <MX_TIM2_Init+0xa4>)
 8002b48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b4c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002b4e:	4b1f      	ldr	r3, [pc, #124]	; (8002bcc <MX_TIM2_Init+0xa4>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b54:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <MX_TIM2_Init+0xa4>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002b5a:	4b1c      	ldr	r3, [pc, #112]	; (8002bcc <MX_TIM2_Init+0xa4>)
 8002b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b60:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b62:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <MX_TIM2_Init+0xa4>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b68:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <MX_TIM2_Init+0xa4>)
 8002b6a:	2280      	movs	r2, #128	; 0x80
 8002b6c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b76:	2301      	movs	r3, #1
 8002b78:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b82:	2300      	movs	r3, #0
 8002b84:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b86:	2301      	movs	r3, #1
 8002b88:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002b92:	f107 030c 	add.w	r3, r7, #12
 8002b96:	4619      	mov	r1, r3
 8002b98:	480c      	ldr	r0, [pc, #48]	; (8002bcc <MX_TIM2_Init+0xa4>)
 8002b9a:	f003 ff5b 	bl	8006a54 <HAL_TIM_Encoder_Init>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002ba4:	f000 f9bc 	bl	8002f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bb0:	463b      	mov	r3, r7
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4805      	ldr	r0, [pc, #20]	; (8002bcc <MX_TIM2_Init+0xa4>)
 8002bb6:	f004 fca9 	bl	800750c <HAL_TIMEx_MasterConfigSynchronization>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002bc0:	f000 f9ae 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002bc4:	bf00      	nop
 8002bc6:	3730      	adds	r7, #48	; 0x30
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20000200 	.word	0x20000200

08002bd0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b094      	sub	sp, #80	; 0x50
 8002bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bd6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	605a      	str	r2, [r3, #4]
 8002be0:	609a      	str	r2, [r3, #8]
 8002be2:	60da      	str	r2, [r3, #12]
 8002be4:	611a      	str	r2, [r3, #16]
 8002be6:	615a      	str	r2, [r3, #20]
 8002be8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002bea:	463b      	mov	r3, r7
 8002bec:	2234      	movs	r2, #52	; 0x34
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f00b f8c1 	bl	800dd78 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002bf6:	4b30      	ldr	r3, [pc, #192]	; (8002cb8 <MX_TIM16_Init+0xe8>)
 8002bf8:	4a30      	ldr	r2, [pc, #192]	; (8002cbc <MX_TIM16_Init+0xec>)
 8002bfa:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002bfc:	4b2e      	ldr	r3, [pc, #184]	; (8002cb8 <MX_TIM16_Init+0xe8>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c02:	4b2d      	ldr	r3, [pc, #180]	; (8002cb8 <MX_TIM16_Init+0xe8>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 8002c08:	4b2b      	ldr	r3, [pc, #172]	; (8002cb8 <MX_TIM16_Init+0xe8>)
 8002c0a:	22ff      	movs	r2, #255	; 0xff
 8002c0c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c0e:	4b2a      	ldr	r3, [pc, #168]	; (8002cb8 <MX_TIM16_Init+0xe8>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002c14:	4b28      	ldr	r3, [pc, #160]	; (8002cb8 <MX_TIM16_Init+0xe8>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c1a:	4b27      	ldr	r3, [pc, #156]	; (8002cb8 <MX_TIM16_Init+0xe8>)
 8002c1c:	2280      	movs	r2, #128	; 0x80
 8002c1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002c20:	4825      	ldr	r0, [pc, #148]	; (8002cb8 <MX_TIM16_Init+0xe8>)
 8002c22:	f003 fd85 	bl	8006730 <HAL_TIM_Base_Init>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8002c2c:	f000 f978 	bl	8002f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002c30:	4821      	ldr	r0, [pc, #132]	; (8002cb8 <MX_TIM16_Init+0xe8>)
 8002c32:	f003 fdd4 	bl	80067de <HAL_TIM_PWM_Init>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8002c3c:	f000 f970 	bl	8002f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c40:	2360      	movs	r3, #96	; 0x60
 8002c42:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c50:	2300      	movs	r3, #0
 8002c52:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c54:	2300      	movs	r3, #0
 8002c56:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c60:	2200      	movs	r2, #0
 8002c62:	4619      	mov	r1, r3
 8002c64:	4814      	ldr	r0, [pc, #80]	; (8002cb8 <MX_TIM16_Init+0xe8>)
 8002c66:	f004 f829 	bl	8006cbc <HAL_TIM_PWM_ConfigChannel>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 8002c70:	f000 f956 	bl	8002f20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c74:	2300      	movs	r3, #0
 8002c76:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c84:	2300      	movs	r3, #0
 8002c86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c8c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c92:	2300      	movs	r3, #0
 8002c94:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002c96:	463b      	mov	r3, r7
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4807      	ldr	r0, [pc, #28]	; (8002cb8 <MX_TIM16_Init+0xe8>)
 8002c9c:	f004 fc96 	bl	80075cc <HAL_TIMEx_ConfigBreakDeadTime>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 8002ca6:	f000 f93b 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002caa:	4803      	ldr	r0, [pc, #12]	; (8002cb8 <MX_TIM16_Init+0xe8>)
 8002cac:	f000 fa5a 	bl	8003164 <HAL_TIM_MspPostInit>

}
 8002cb0:	bf00      	nop
 8002cb2:	3750      	adds	r7, #80	; 0x50
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	2000024c 	.word	0x2000024c
 8002cbc:	40014400 	.word	0x40014400

08002cc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002cc4:	4b23      	ldr	r3, [pc, #140]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002cc6:	4a24      	ldr	r2, [pc, #144]	; (8002d58 <MX_USART1_UART_Init+0x98>)
 8002cc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002cca:	4b22      	ldr	r3, [pc, #136]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002ccc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cd2:	4b20      	ldr	r3, [pc, #128]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cd8:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cde:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002ce6:	220c      	movs	r2, #12
 8002ce8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cea:	4b1a      	ldr	r3, [pc, #104]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002cf0:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002cf2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002cf6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cf8:	4b16      	ldr	r3, [pc, #88]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cfe:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d04:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d0a:	4812      	ldr	r0, [pc, #72]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002d0c:	f004 fd04 	bl	8007718 <HAL_UART_Init>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002d16:	f000 f903 	bl	8002f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	480d      	ldr	r0, [pc, #52]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002d1e:	f005 feca 	bl	8008ab6 <HAL_UARTEx_SetTxFifoThreshold>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002d28:	f000 f8fa 	bl	8002f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4809      	ldr	r0, [pc, #36]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002d30:	f005 feff 	bl	8008b32 <HAL_UARTEx_SetRxFifoThreshold>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002d3a:	f000 f8f1 	bl	8002f20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002d3e:	4805      	ldr	r0, [pc, #20]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002d40:	f005 fe80 	bl	8008a44 <HAL_UARTEx_DisableFifoMode>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002d4a:	f000 f8e9 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000298 	.word	0x20000298
 8002d58:	40013800 	.word	0x40013800

08002d5c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002d60:	4b10      	ldr	r3, [pc, #64]	; (8002da4 <MX_USB_PCD_Init+0x48>)
 8002d62:	4a11      	ldr	r2, [pc, #68]	; (8002da8 <MX_USB_PCD_Init+0x4c>)
 8002d64:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002d66:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <MX_USB_PCD_Init+0x48>)
 8002d68:	2208      	movs	r2, #8
 8002d6a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002d6c:	4b0d      	ldr	r3, [pc, #52]	; (8002da4 <MX_USB_PCD_Init+0x48>)
 8002d6e:	2202      	movs	r2, #2
 8002d70:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002d72:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <MX_USB_PCD_Init+0x48>)
 8002d74:	2202      	movs	r2, #2
 8002d76:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002d78:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <MX_USB_PCD_Init+0x48>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002d7e:	4b09      	ldr	r3, [pc, #36]	; (8002da4 <MX_USB_PCD_Init+0x48>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002d84:	4b07      	ldr	r3, [pc, #28]	; (8002da4 <MX_USB_PCD_Init+0x48>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002d8a:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <MX_USB_PCD_Init+0x48>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002d90:	4804      	ldr	r0, [pc, #16]	; (8002da4 <MX_USB_PCD_Init+0x48>)
 8002d92:	f001 fc37 	bl	8004604 <HAL_PCD_Init>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002d9c:	f000 f8c0 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002da0:	bf00      	nop
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	2000038c 	.word	0x2000038c
 8002da8:	40006800 	.word	0x40006800

08002dac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002db0:	2004      	movs	r0, #4
 8002db2:	f7ff fd75 	bl	80028a0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002db6:	2001      	movs	r0, #1
 8002db8:	f7ff fd72 	bl	80028a0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 15, 0);
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	210f      	movs	r1, #15
 8002dc0:	200b      	movs	r0, #11
 8002dc2:	f000 fe44 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002dc6:	200b      	movs	r0, #11
 8002dc8:	f000 fe5b 	bl	8003a82 <HAL_NVIC_EnableIRQ>

}
 8002dcc:	bf00      	nop
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd6:	1d3b      	adds	r3, r7, #4
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	60da      	str	r2, [r3, #12]
 8002de2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002de4:	2004      	movs	r0, #4
 8002de6:	f7ff fd74 	bl	80028d2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dea:	2001      	movs	r0, #1
 8002dec:	f7ff fd71 	bl	80028d2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002df0:	2002      	movs	r0, #2
 8002df2:	f7ff fd6e 	bl	80028d2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002df6:	2008      	movs	r0, #8
 8002df8:	f7ff fd6b 	bl	80028d2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SYS_ENABLE_Pin|DIR_A_Pin, GPIO_PIN_RESET);
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8002e02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e06:	f001 fb23 	bl	8004450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Green_Led_Pin|Red_Led_Pin|Blue_Led_Pin, GPIO_PIN_RESET);
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2123      	movs	r1, #35	; 0x23
 8002e0e:	4833      	ldr	r0, [pc, #204]	; (8002edc <MX_GPIO_Init+0x10c>)
 8002e10:	f001 fb1e 	bl	8004450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_B_GPIO_Port, DIR_B_Pin, GPIO_PIN_RESET);
 8002e14:	2200      	movs	r2, #0
 8002e16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e1a:	4831      	ldr	r0, [pc, #196]	; (8002ee0 <MX_GPIO_Init+0x110>)
 8002e1c:	f001 fb18 	bl	8004450 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SYS_ENABLE_Pin DIR_A_Pin */
  GPIO_InitStruct.Pin = SYS_ENABLE_Pin|DIR_A_Pin;
 8002e20:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8002e24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e26:	2301      	movs	r3, #1
 8002e28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e32:	1d3b      	adds	r3, r7, #4
 8002e34:	4619      	mov	r1, r3
 8002e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e3a:	f001 f999 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002e3e:	2310      	movs	r3, #16
 8002e40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e42:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002e46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e4c:	1d3b      	adds	r3, r7, #4
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4823      	ldr	r0, [pc, #140]	; (8002ee0 <MX_GPIO_Init+0x110>)
 8002e52:	f001 f98d 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_Led_Pin Red_Led_Pin Blue_Led_Pin */
  GPIO_InitStruct.Pin = Green_Led_Pin|Red_Led_Pin|Blue_Led_Pin;
 8002e56:	2323      	movs	r3, #35	; 0x23
 8002e58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e62:	2302      	movs	r3, #2
 8002e64:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e66:	1d3b      	adds	r3, r7, #4
 8002e68:	4619      	mov	r1, r3
 8002e6a:	481c      	ldr	r0, [pc, #112]	; (8002edc <MX_GPIO_Init+0x10c>)
 8002e6c:	f001 f980 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_B_Pin */
  GPIO_InitStruct.Pin = DIR_B_Pin;
 8002e70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e76:	2301      	movs	r3, #1
 8002e78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DIR_B_GPIO_Port, &GPIO_InitStruct);
 8002e82:	1d3b      	adds	r3, r7, #4
 8002e84:	4619      	mov	r1, r3
 8002e86:	4816      	ldr	r0, [pc, #88]	; (8002ee0 <MX_GPIO_Init+0x110>)
 8002e88:	f001 f972 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e90:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002e94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e96:	2301      	movs	r3, #1
 8002e98:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e9a:	1d3b      	adds	r3, r7, #4
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4811      	ldr	r0, [pc, #68]	; (8002ee4 <MX_GPIO_Init+0x114>)
 8002ea0:	f001 f966 	bl	8004170 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	2006      	movs	r0, #6
 8002eaa:	f000 fdd0 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002eae:	2006      	movs	r0, #6
 8002eb0:	f000 fde7 	bl	8003a82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	2007      	movs	r0, #7
 8002eba:	f000 fdc8 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002ebe:	2007      	movs	r0, #7
 8002ec0:	f000 fddf 	bl	8003a82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	200a      	movs	r0, #10
 8002eca:	f000 fdc0 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002ece:	200a      	movs	r0, #10
 8002ed0:	f000 fdd7 	bl	8003a82 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ed4:	bf00      	nop
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	48000400 	.word	0x48000400
 8002ee0:	48000800 	.word	0x48000800
 8002ee4:	48000c00 	.word	0x48000c00

08002ee8 <Get_Counter>:

/* USER CODE BEGIN 4 */
uint32_t Get_Counter(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
	//used for encoder speed measurement
	return __HAL_TIM_GET_COUNTER(&htim2);
 8002eec:	4b03      	ldr	r3, [pc, #12]	; (8002efc <Get_Counter+0x14>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	20000200 	.word	0x20000200

08002f00 <Set_CCR>:
{
	HAL_UART_Transmit(&huart1,(uint8_t*)message, sizeof(char)*50,10);
}

void Set_CCR(uint32_t CCR)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
	//used for setting motor speed pwm
	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, CCR);
 8002f08:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <Set_CCR+0x1c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	2000024c 	.word	0x2000024c

08002f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002f24:	b672      	cpsid	i
}
 8002f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f28:	e7fe      	b.n	8002f28 <Error_Handler+0x8>

08002f2a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f42:	bf00      	nop
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <LL_AHB2_GRP1_EnableClock>:
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f70:	68fb      	ldr	r3, [r7, #12]
}
 8002f72:	bf00      	nop
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <LL_AHB3_GRP1_EnableClock>:
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b085      	sub	sp, #20
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
}
 8002fa4:	bf00      	nop
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <LL_APB1_GRP1_EnableClock>:
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002fbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fcc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
}
 8002fd6:	bf00      	nop
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <LL_APB2_GRP1_EnableClock>:
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b085      	sub	sp, #20
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ff0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4013      	ands	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003006:	68fb      	ldr	r3, [r7, #12]
}
 8003008:	bf00      	nop
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003018:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800301c:	f7ff ffaf 	bl	8002f7e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8003020:	2200      	movs	r2, #0
 8003022:	2100      	movs	r1, #0
 8003024:	202e      	movs	r0, #46	; 0x2e
 8003026:	f000 fd12 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800302a:	202e      	movs	r0, #46	; 0x2e
 800302c:	f000 fd29 	bl	8003a82 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003030:	bf00      	nop
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a0d      	ldr	r2, [pc, #52]	; (8003078 <HAL_IPCC_MspInit+0x44>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d113      	bne.n	800306e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8003046:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800304a:	f7ff ff98 	bl	8002f7e <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800304e:	2200      	movs	r2, #0
 8003050:	2100      	movs	r1, #0
 8003052:	202c      	movs	r0, #44	; 0x2c
 8003054:	f000 fcfb 	bl	8003a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003058:	202c      	movs	r0, #44	; 0x2c
 800305a:	f000 fd12 	bl	8003a82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800305e:	2200      	movs	r2, #0
 8003060:	2100      	movs	r1, #0
 8003062:	202d      	movs	r0, #45	; 0x2d
 8003064:	f000 fcf3 	bl	8003a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003068:	202d      	movs	r0, #45	; 0x2d
 800306a:	f000 fd0a 	bl	8003a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	58000c00 	.word	0x58000c00

0800307c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b096      	sub	sp, #88	; 0x58
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003084:	f107 0308 	add.w	r3, r7, #8
 8003088:	2250      	movs	r2, #80	; 0x50
 800308a:	2100      	movs	r1, #0
 800308c:	4618      	mov	r0, r3
 800308e:	f00a fe73 	bl	800dd78 <memset>
  if(hrtc->Instance==RTC)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a12      	ldr	r2, [pc, #72]	; (80030e0 <HAL_RTC_MspInit+0x64>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d11d      	bne.n	80030d8 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800309c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030a0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80030a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030a6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030a8:	f107 0308 	add.w	r3, r7, #8
 80030ac:	4618      	mov	r0, r3
 80030ae:	f002 fef5 	bl	8005e9c <HAL_RCCEx_PeriphCLKConfig>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80030b8:	f7ff ff32 	bl	8002f20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80030bc:	f7ff ff35 	bl	8002f2a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80030c0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80030c4:	f7ff ff74 	bl	8002fb0 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80030c8:	2200      	movs	r2, #0
 80030ca:	2100      	movs	r1, #0
 80030cc:	2003      	movs	r0, #3
 80030ce:	f000 fcbe 	bl	8003a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80030d2:	2003      	movs	r0, #3
 80030d4:	f000 fcd5 	bl	8003a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80030d8:	bf00      	nop
 80030da:	3758      	adds	r7, #88	; 0x58
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40002800 	.word	0x40002800

080030e4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b088      	sub	sp, #32
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ec:	f107 030c 	add.w	r3, r7, #12
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	605a      	str	r2, [r3, #4]
 80030f6:	609a      	str	r2, [r3, #8]
 80030f8:	60da      	str	r2, [r3, #12]
 80030fa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003104:	d116      	bne.n	8003134 <HAL_TIM_Encoder_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003106:	2001      	movs	r0, #1
 8003108:	f7ff ff52 	bl	8002fb0 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800310c:	2001      	movs	r0, #1
 800310e:	f7ff ff1d 	bl	8002f4c <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8003112:	2303      	movs	r3, #3
 8003114:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003116:	2302      	movs	r3, #2
 8003118:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311e:	2300      	movs	r3, #0
 8003120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003122:	2301      	movs	r3, #1
 8003124:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003126:	f107 030c 	add.w	r3, r7, #12
 800312a:	4619      	mov	r1, r3
 800312c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003130:	f001 f81e 	bl	8004170 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003134:	bf00      	nop
 8003136:	3720      	adds	r7, #32
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a05      	ldr	r2, [pc, #20]	; (8003160 <HAL_TIM_Base_MspInit+0x24>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d103      	bne.n	8003156 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800314e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003152:	f7ff ff46 	bl	8002fe2 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40014400 	.word	0x40014400

08003164 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800316c:	f107 030c 	add.w	r3, r7, #12
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	60da      	str	r2, [r3, #12]
 800317a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a0d      	ldr	r2, [pc, #52]	; (80031b8 <HAL_TIM_MspPostInit+0x54>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d113      	bne.n	80031ae <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003186:	2001      	movs	r0, #1
 8003188:	f7ff fee0 	bl	8002f4c <LL_AHB2_GRP1_EnableClock>
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 800318c:	2340      	movs	r3, #64	; 0x40
 800318e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003190:	2302      	movs	r3, #2
 8003192:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003198:	2300      	movs	r3, #0
 800319a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 800319c:	230e      	movs	r3, #14
 800319e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 80031a0:	f107 030c 	add.w	r3, r7, #12
 80031a4:	4619      	mov	r1, r3
 80031a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031aa:	f000 ffe1 	bl	8004170 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80031ae:	bf00      	nop
 80031b0:	3720      	adds	r7, #32
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40014400 	.word	0x40014400

080031bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b09c      	sub	sp, #112	; 0x70
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	60da      	str	r2, [r3, #12]
 80031d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031d4:	f107 030c 	add.w	r3, r7, #12
 80031d8:	2250      	movs	r2, #80	; 0x50
 80031da:	2100      	movs	r1, #0
 80031dc:	4618      	mov	r0, r3
 80031de:	f00a fdcb 	bl	800dd78 <memset>
  if(huart->Instance==USART1)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a2e      	ldr	r2, [pc, #184]	; (80032a0 <HAL_UART_MspInit+0xe4>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d155      	bne.n	8003298 <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80031ec:	2301      	movs	r3, #1
 80031ee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80031f0:	2300      	movs	r3, #0
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031f4:	f107 030c 	add.w	r3, r7, #12
 80031f8:	4618      	mov	r0, r3
 80031fa:	f002 fe4f 	bl	8005e9c <HAL_RCCEx_PeriphCLKConfig>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003204:	f7ff fe8c 	bl	8002f20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003208:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800320c:	f7ff fee9 	bl	8002fe2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003210:	2002      	movs	r0, #2
 8003212:	f7ff fe9b 	bl	8002f4c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003216:	23c0      	movs	r3, #192	; 0xc0
 8003218:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321a:	2302      	movs	r3, #2
 800321c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800321e:	2301      	movs	r3, #1
 8003220:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003222:	2300      	movs	r3, #0
 8003224:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003226:	2307      	movs	r3, #7
 8003228:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800322e:	4619      	mov	r1, r3
 8003230:	481c      	ldr	r0, [pc, #112]	; (80032a4 <HAL_UART_MspInit+0xe8>)
 8003232:	f000 ff9d 	bl	8004170 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8003236:	4b1c      	ldr	r3, [pc, #112]	; (80032a8 <HAL_UART_MspInit+0xec>)
 8003238:	4a1c      	ldr	r2, [pc, #112]	; (80032ac <HAL_UART_MspInit+0xf0>)
 800323a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800323c:	4b1a      	ldr	r3, [pc, #104]	; (80032a8 <HAL_UART_MspInit+0xec>)
 800323e:	220f      	movs	r2, #15
 8003240:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003242:	4b19      	ldr	r3, [pc, #100]	; (80032a8 <HAL_UART_MspInit+0xec>)
 8003244:	2210      	movs	r2, #16
 8003246:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003248:	4b17      	ldr	r3, [pc, #92]	; (80032a8 <HAL_UART_MspInit+0xec>)
 800324a:	2200      	movs	r2, #0
 800324c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800324e:	4b16      	ldr	r3, [pc, #88]	; (80032a8 <HAL_UART_MspInit+0xec>)
 8003250:	2280      	movs	r2, #128	; 0x80
 8003252:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003254:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <HAL_UART_MspInit+0xec>)
 8003256:	2200      	movs	r2, #0
 8003258:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800325a:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <HAL_UART_MspInit+0xec>)
 800325c:	2200      	movs	r2, #0
 800325e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003260:	4b11      	ldr	r3, [pc, #68]	; (80032a8 <HAL_UART_MspInit+0xec>)
 8003262:	2200      	movs	r2, #0
 8003264:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003266:	4b10      	ldr	r3, [pc, #64]	; (80032a8 <HAL_UART_MspInit+0xec>)
 8003268:	2200      	movs	r2, #0
 800326a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800326c:	480e      	ldr	r0, [pc, #56]	; (80032a8 <HAL_UART_MspInit+0xec>)
 800326e:	f000 fc4d 	bl	8003b0c <HAL_DMA_Init>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8003278:	f7ff fe52 	bl	8002f20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a0a      	ldr	r2, [pc, #40]	; (80032a8 <HAL_UART_MspInit+0xec>)
 8003280:	67da      	str	r2, [r3, #124]	; 0x7c
 8003282:	4a09      	ldr	r2, [pc, #36]	; (80032a8 <HAL_UART_MspInit+0xec>)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003288:	2200      	movs	r2, #0
 800328a:	2100      	movs	r1, #0
 800328c:	2024      	movs	r0, #36	; 0x24
 800328e:	f000 fbde 	bl	8003a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003292:	2024      	movs	r0, #36	; 0x24
 8003294:	f000 fbf5 	bl	8003a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003298:	bf00      	nop
 800329a:	3770      	adds	r7, #112	; 0x70
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40013800 	.word	0x40013800
 80032a4:	48000400 	.word	0x48000400
 80032a8:	2000032c 	.word	0x2000032c
 80032ac:	40020008 	.word	0x40020008

080032b0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b09c      	sub	sp, #112	; 0x70
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	605a      	str	r2, [r3, #4]
 80032c2:	609a      	str	r2, [r3, #8]
 80032c4:	60da      	str	r2, [r3, #12]
 80032c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032c8:	f107 030c 	add.w	r3, r7, #12
 80032cc:	2250      	movs	r2, #80	; 0x50
 80032ce:	2100      	movs	r1, #0
 80032d0:	4618      	mov	r0, r3
 80032d2:	f00a fd51 	bl	800dd78 <memset>
  if(hpcd->Instance==USB)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a1f      	ldr	r2, [pc, #124]	; (8003358 <HAL_PCD_MspInit+0xa8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d136      	bne.n	800334e <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80032e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032e4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80032e6:	2318      	movs	r3, #24
 80032e8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80032ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032ee:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80032f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80032f6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80032fa:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80032fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003300:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8003302:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003306:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003308:	f107 030c 	add.w	r3, r7, #12
 800330c:	4618      	mov	r0, r3
 800330e:	f002 fdc5 	bl	8005e9c <HAL_RCCEx_PeriphCLKConfig>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8003318:	f7ff fe02 	bl	8002f20 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800331c:	2001      	movs	r0, #1
 800331e:	f7ff fe15 	bl	8002f4c <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003322:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003326:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003328:	2302      	movs	r3, #2
 800332a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332c:	2300      	movs	r3, #0
 800332e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003330:	2300      	movs	r3, #0
 8003332:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8003334:	230a      	movs	r3, #10
 8003336:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003338:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800333c:	4619      	mov	r1, r3
 800333e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003342:	f000 ff15 	bl	8004170 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003346:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800334a:	f7ff fe31 	bl	8002fb0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800334e:	bf00      	nop
 8003350:	3770      	adds	r7, #112	; 0x70
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40006800 	.word	0x40006800

0800335c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003360:	e7fe      	b.n	8003360 <NMI_Handler+0x4>

08003362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003362:	b480      	push	{r7}
 8003364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003366:	e7fe      	b.n	8003366 <HardFault_Handler+0x4>

08003368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800336c:	e7fe      	b.n	800336c <MemManage_Handler+0x4>

0800336e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800336e:	b480      	push	{r7}
 8003370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003372:	e7fe      	b.n	8003372 <BusFault_Handler+0x4>

08003374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003378:	e7fe      	b.n	8003378 <UsageFault_Handler+0x4>

0800337a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800337a:	b480      	push	{r7}
 800337c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800337e:	bf00      	nop
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800338c:	bf00      	nop
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003396:	b480      	push	{r7}
 8003398:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800339a:	bf00      	nop
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033a8:	f000 f9d2 	bl	8003750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033ac:	bf00      	nop
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80033b4:	f7fe ff40 	bl	8002238 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80033b8:	bf00      	nop
 80033ba:	bd80      	pop	{r7, pc}

080033bc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 80033c0:	2001      	movs	r0, #1
 80033c2:	f001 f85d 	bl	8004480 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}

080033ca <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 80033ce:	2002      	movs	r0, #2
 80033d0:	f001 f856 	bl	8004480 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80033d4:	bf00      	nop
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80033dc:	2010      	movs	r0, #16
 80033de:	f001 f84f 	bl	8004480 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80033e2:	bf00      	nop
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80033ec:	4802      	ldr	r0, [pc, #8]	; (80033f8 <DMA1_Channel1_IRQHandler+0x10>)
 80033ee:	f000 fd6e 	bl	8003ece <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	2000032c 	.word	0x2000032c

080033fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003400:	4802      	ldr	r0, [pc, #8]	; (800340c <USART1_IRQHandler+0x10>)
 8003402:	f004 fa59 	bl	80078b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20000298 	.word	0x20000298

08003410 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003414:	f009 fee2 	bl	800d1dc <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003418:	bf00      	nop
 800341a:	bd80      	pop	{r7, pc}

0800341c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003420:	f009 ff12 	bl	800d248 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003424:	bf00      	nop
 8003426:	bd80      	pop	{r7, pc}

08003428 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800342c:	f001 f840 	bl	80044b0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003430:	bf00      	nop
 8003432:	bd80      	pop	{r7, pc}

08003434 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003440:	2300      	movs	r3, #0
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	e00a      	b.n	800345c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003446:	f3af 8000 	nop.w
 800344a:	4601      	mov	r1, r0
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	60ba      	str	r2, [r7, #8]
 8003452:	b2ca      	uxtb	r2, r1
 8003454:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	3301      	adds	r3, #1
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	429a      	cmp	r2, r3
 8003462:	dbf0      	blt.n	8003446 <_read+0x12>
  }

  return len;
 8003464:	687b      	ldr	r3, [r7, #4]
}
 8003466:	4618      	mov	r0, r3
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <_close>:
  }
  return len;
}

int _close(int file)
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003476:	f04f 33ff 	mov.w	r3, #4294967295
}
 800347a:	4618      	mov	r0, r3
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003496:	605a      	str	r2, [r3, #4]
  return 0;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <_isatty>:

int _isatty(int file)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034ae:	2301      	movs	r3, #1
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
	...

080034d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034e0:	4a14      	ldr	r2, [pc, #80]	; (8003534 <_sbrk+0x5c>)
 80034e2:	4b15      	ldr	r3, [pc, #84]	; (8003538 <_sbrk+0x60>)
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034ec:	4b13      	ldr	r3, [pc, #76]	; (800353c <_sbrk+0x64>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d102      	bne.n	80034fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034f4:	4b11      	ldr	r3, [pc, #68]	; (800353c <_sbrk+0x64>)
 80034f6:	4a12      	ldr	r2, [pc, #72]	; (8003540 <_sbrk+0x68>)
 80034f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034fa:	4b10      	ldr	r3, [pc, #64]	; (800353c <_sbrk+0x64>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4413      	add	r3, r2
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	429a      	cmp	r2, r3
 8003506:	d207      	bcs.n	8003518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003508:	f00a fc9c 	bl	800de44 <__errno>
 800350c:	4603      	mov	r3, r0
 800350e:	220c      	movs	r2, #12
 8003510:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003512:	f04f 33ff 	mov.w	r3, #4294967295
 8003516:	e009      	b.n	800352c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003518:	4b08      	ldr	r3, [pc, #32]	; (800353c <_sbrk+0x64>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800351e:	4b07      	ldr	r3, [pc, #28]	; (800353c <_sbrk+0x64>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4413      	add	r3, r2
 8003526:	4a05      	ldr	r2, [pc, #20]	; (800353c <_sbrk+0x64>)
 8003528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800352a:	68fb      	ldr	r3, [r7, #12]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3718      	adds	r7, #24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	20030000 	.word	0x20030000
 8003538:	00001000 	.word	0x00001000
 800353c:	20000668 	.word	0x20000668
 8003540:	20001a90 	.word	0x20001a90

08003544 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003548:	4b24      	ldr	r3, [pc, #144]	; (80035dc <SystemInit+0x98>)
 800354a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354e:	4a23      	ldr	r2, [pc, #140]	; (80035dc <SystemInit+0x98>)
 8003550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003562:	f043 0301 	orr.w	r3, r3, #1
 8003566:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800356c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003570:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800357c:	4b18      	ldr	r3, [pc, #96]	; (80035e0 <SystemInit+0x9c>)
 800357e:	4013      	ands	r3, r2
 8003580:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800358a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800358e:	f023 0305 	bic.w	r3, r3, #5
 8003592:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800359a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800359e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035a2:	f023 0301 	bic.w	r3, r3, #1
 80035a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80035aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ae:	4a0d      	ldr	r2, [pc, #52]	; (80035e4 <SystemInit+0xa0>)
 80035b0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80035b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b6:	4a0b      	ldr	r2, [pc, #44]	; (80035e4 <SystemInit+0xa0>)
 80035b8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80035ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80035ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ce:	2200      	movs	r2, #0
 80035d0:	619a      	str	r2, [r3, #24]
}
 80035d2:	bf00      	nop
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	e000ed00 	.word	0xe000ed00
 80035e0:	faf6fefb 	.word	0xfaf6fefb
 80035e4:	22041000 	.word	0x22041000

080035e8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80035e8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035ea:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035ec:	3304      	adds	r3, #4

080035ee <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035ee:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035f0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80035f2:	d3f9      	bcc.n	80035e8 <CopyDataInit>
  bx lr
 80035f4:	4770      	bx	lr

080035f6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80035f6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80035f8:	3004      	adds	r0, #4

080035fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80035fa:	4288      	cmp	r0, r1
  bcc FillZerobss
 80035fc:	d3fb      	bcc.n	80035f6 <FillZerobss>
  bx lr
 80035fe:	4770      	bx	lr

08003600 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003600:	480c      	ldr	r0, [pc, #48]	; (8003634 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003602:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003604:	f7ff ff9e 	bl	8003544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003608:	480b      	ldr	r0, [pc, #44]	; (8003638 <LoopForever+0x6>)
 800360a:	490c      	ldr	r1, [pc, #48]	; (800363c <LoopForever+0xa>)
 800360c:	4a0c      	ldr	r2, [pc, #48]	; (8003640 <LoopForever+0xe>)
 800360e:	2300      	movs	r3, #0
 8003610:	f7ff ffed 	bl	80035ee <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003614:	480b      	ldr	r0, [pc, #44]	; (8003644 <LoopForever+0x12>)
 8003616:	490c      	ldr	r1, [pc, #48]	; (8003648 <LoopForever+0x16>)
 8003618:	4a0c      	ldr	r2, [pc, #48]	; (800364c <LoopForever+0x1a>)
 800361a:	2300      	movs	r3, #0
 800361c:	f7ff ffe7 	bl	80035ee <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003620:	480b      	ldr	r0, [pc, #44]	; (8003650 <LoopForever+0x1e>)
 8003622:	490c      	ldr	r1, [pc, #48]	; (8003654 <LoopForever+0x22>)
 8003624:	2300      	movs	r3, #0
 8003626:	f7ff ffe8 	bl	80035fa <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800362a:	f00a fc11 	bl	800de50 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800362e:	f7ff f969 	bl	8002904 <main>

08003632 <LoopForever>:

LoopForever:
  b LoopForever
 8003632:	e7fe      	b.n	8003632 <LoopForever>
  ldr   r0, =_estack
 8003634:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003638:	20000008 	.word	0x20000008
 800363c:	20000094 	.word	0x20000094
 8003640:	0801020c 	.word	0x0801020c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003644:	200301e4 	.word	0x200301e4
 8003648:	20030a67 	.word	0x20030a67
 800364c:	080102de 	.word	0x080102de
  INIT_BSS _sbss, _ebss
 8003650:	200000e0 	.word	0x200000e0
 8003654:	20001a90 	.word	0x20001a90

08003658 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003658:	e7fe      	b.n	8003658 <ADC1_IRQHandler>
	...

0800365c <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	4a04      	ldr	r2, [pc, #16]	; (8003678 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	6053      	str	r3, [r2, #4]
}
 800366c:	bf00      	nop
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	e0042000 	.word	0xe0042000

0800367c <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003680:	4b05      	ldr	r3, [pc, #20]	; (8003698 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	4a04      	ldr	r2, [pc, #16]	; (8003698 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003686:	f043 0302 	orr.w	r3, r3, #2
 800368a:	6053      	str	r3, [r2, #4]
}
 800368c:	bf00      	nop
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	e0042000 	.word	0xe0042000

0800369c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036a6:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <HAL_Init+0x3c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a0b      	ldr	r2, [pc, #44]	; (80036d8 <HAL_Init+0x3c>)
 80036ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036b2:	2003      	movs	r0, #3
 80036b4:	f000 f9c0 	bl	8003a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036b8:	2000      	movs	r0, #0
 80036ba:	f000 f80f 	bl	80036dc <HAL_InitTick>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d002      	beq.n	80036ca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	71fb      	strb	r3, [r7, #7]
 80036c8:	e001      	b.n	80036ce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80036ca:	f7ff fca3 	bl	8003014 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80036ce:	79fb      	ldrb	r3, [r7, #7]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	58004000 	.word	0x58004000

080036dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80036e8:	4b17      	ldr	r3, [pc, #92]	; (8003748 <HAL_InitTick+0x6c>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d024      	beq.n	800373a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80036f0:	f002 f934 	bl	800595c <HAL_RCC_GetHCLKFreq>
 80036f4:	4602      	mov	r2, r0
 80036f6:	4b14      	ldr	r3, [pc, #80]	; (8003748 <HAL_InitTick+0x6c>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	4619      	mov	r1, r3
 80036fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003700:	fbb3 f3f1 	udiv	r3, r3, r1
 8003704:	fbb2 f3f3 	udiv	r3, r2, r3
 8003708:	4618      	mov	r0, r3
 800370a:	f000 f9d6 	bl	8003aba <HAL_SYSTICK_Config>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10f      	bne.n	8003734 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b0f      	cmp	r3, #15
 8003718:	d809      	bhi.n	800372e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800371a:	2200      	movs	r2, #0
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	f04f 30ff 	mov.w	r0, #4294967295
 8003722:	f000 f994 	bl	8003a4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003726:	4a09      	ldr	r2, [pc, #36]	; (800374c <HAL_InitTick+0x70>)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	e007      	b.n	800373e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	73fb      	strb	r3, [r7, #15]
 8003732:	e004      	b.n	800373e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	73fb      	strb	r3, [r7, #15]
 8003738:	e001      	b.n	800373e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800373e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	20000010 	.word	0x20000010
 800374c:	2000000c 	.word	0x2000000c

08003750 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <HAL_IncTick+0x20>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	461a      	mov	r2, r3
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <HAL_IncTick+0x24>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4413      	add	r3, r2
 8003760:	4a04      	ldr	r2, [pc, #16]	; (8003774 <HAL_IncTick+0x24>)
 8003762:	6013      	str	r3, [r2, #0]
}
 8003764:	bf00      	nop
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	20000010 	.word	0x20000010
 8003774:	2000066c 	.word	0x2000066c

08003778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  return uwTick;
 800377c:	4b03      	ldr	r3, [pc, #12]	; (800378c <HAL_GetTick+0x14>)
 800377e:	681b      	ldr	r3, [r3, #0]
}
 8003780:	4618      	mov	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	2000066c 	.word	0x2000066c

08003790 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003794:	4b03      	ldr	r3, [pc, #12]	; (80037a4 <HAL_GetTickPrio+0x14>)
 8003796:	681b      	ldr	r3, [r3, #0]
}
 8003798:	4618      	mov	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	2000000c 	.word	0x2000000c

080037a8 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80037ac:	4b03      	ldr	r3, [pc, #12]	; (80037bc <HAL_GetTickFreq+0x14>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	20000010 	.word	0x20000010

080037c0 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80037c4:	f7ff ff4a 	bl	800365c <LL_DBGMCU_EnableDBGSleepMode>
}
 80037c8:	bf00      	nop
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80037d0:	f7ff ff54 	bl	800367c <LL_DBGMCU_EnableDBGStopMode>
}
 80037d4:	bf00      	nop
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037e8:	4b0c      	ldr	r3, [pc, #48]	; (800381c <__NVIC_SetPriorityGrouping+0x44>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037f4:	4013      	ands	r3, r2
 80037f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800380a:	4a04      	ldr	r2, [pc, #16]	; (800381c <__NVIC_SetPriorityGrouping+0x44>)
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	60d3      	str	r3, [r2, #12]
}
 8003810:	bf00      	nop
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	e000ed00 	.word	0xe000ed00

08003820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003824:	4b04      	ldr	r3, [pc, #16]	; (8003838 <__NVIC_GetPriorityGrouping+0x18>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	0a1b      	lsrs	r3, r3, #8
 800382a:	f003 0307 	and.w	r3, r3, #7
}
 800382e:	4618      	mov	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384a:	2b00      	cmp	r3, #0
 800384c:	db0b      	blt.n	8003866 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	f003 021f 	and.w	r2, r3, #31
 8003854:	4907      	ldr	r1, [pc, #28]	; (8003874 <__NVIC_EnableIRQ+0x38>)
 8003856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	2001      	movs	r0, #1
 800385e:	fa00 f202 	lsl.w	r2, r0, r2
 8003862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	e000e100 	.word	0xe000e100

08003878 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003886:	2b00      	cmp	r3, #0
 8003888:	db12      	blt.n	80038b0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800388a:	79fb      	ldrb	r3, [r7, #7]
 800388c:	f003 021f 	and.w	r2, r3, #31
 8003890:	490a      	ldr	r1, [pc, #40]	; (80038bc <__NVIC_DisableIRQ+0x44>)
 8003892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003896:	095b      	lsrs	r3, r3, #5
 8003898:	2001      	movs	r0, #1
 800389a:	fa00 f202 	lsl.w	r2, r0, r2
 800389e:	3320      	adds	r3, #32
 80038a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80038a4:	f3bf 8f4f 	dsb	sy
}
 80038a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80038aa:	f3bf 8f6f 	isb	sy
}
 80038ae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	e000e100 	.word	0xe000e100

080038c0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	4603      	mov	r3, r0
 80038c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	db0c      	blt.n	80038ec <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038d2:	79fb      	ldrb	r3, [r7, #7]
 80038d4:	f003 021f 	and.w	r2, r3, #31
 80038d8:	4907      	ldr	r1, [pc, #28]	; (80038f8 <__NVIC_SetPendingIRQ+0x38>)
 80038da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	2001      	movs	r0, #1
 80038e2:	fa00 f202 	lsl.w	r2, r0, r2
 80038e6:	3340      	adds	r3, #64	; 0x40
 80038e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	e000e100 	.word	0xe000e100

080038fc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390a:	2b00      	cmp	r3, #0
 800390c:	db0c      	blt.n	8003928 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	f003 021f 	and.w	r2, r3, #31
 8003914:	4907      	ldr	r1, [pc, #28]	; (8003934 <__NVIC_ClearPendingIRQ+0x38>)
 8003916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	2001      	movs	r0, #1
 800391e:	fa00 f202 	lsl.w	r2, r0, r2
 8003922:	3360      	adds	r3, #96	; 0x60
 8003924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	e000e100 	.word	0xe000e100

08003938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	6039      	str	r1, [r7, #0]
 8003942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003948:	2b00      	cmp	r3, #0
 800394a:	db0a      	blt.n	8003962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	b2da      	uxtb	r2, r3
 8003950:	490c      	ldr	r1, [pc, #48]	; (8003984 <__NVIC_SetPriority+0x4c>)
 8003952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003956:	0112      	lsls	r2, r2, #4
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	440b      	add	r3, r1
 800395c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003960:	e00a      	b.n	8003978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	b2da      	uxtb	r2, r3
 8003966:	4908      	ldr	r1, [pc, #32]	; (8003988 <__NVIC_SetPriority+0x50>)
 8003968:	79fb      	ldrb	r3, [r7, #7]
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	3b04      	subs	r3, #4
 8003970:	0112      	lsls	r2, r2, #4
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	440b      	add	r3, r1
 8003976:	761a      	strb	r2, [r3, #24]
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	e000e100 	.word	0xe000e100
 8003988:	e000ed00 	.word	0xe000ed00

0800398c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800398c:	b480      	push	{r7}
 800398e:	b089      	sub	sp, #36	; 0x24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f1c3 0307 	rsb	r3, r3, #7
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	bf28      	it	cs
 80039aa:	2304      	movcs	r3, #4
 80039ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	3304      	adds	r3, #4
 80039b2:	2b06      	cmp	r3, #6
 80039b4:	d902      	bls.n	80039bc <NVIC_EncodePriority+0x30>
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	3b03      	subs	r3, #3
 80039ba:	e000      	b.n	80039be <NVIC_EncodePriority+0x32>
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c0:	f04f 32ff 	mov.w	r2, #4294967295
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43da      	mvns	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	401a      	ands	r2, r3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039d4:	f04f 31ff 	mov.w	r1, #4294967295
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	fa01 f303 	lsl.w	r3, r1, r3
 80039de:	43d9      	mvns	r1, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e4:	4313      	orrs	r3, r2
         );
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3724      	adds	r7, #36	; 0x24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a04:	d301      	bcc.n	8003a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a06:	2301      	movs	r3, #1
 8003a08:	e00f      	b.n	8003a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a0a:	4a0a      	ldr	r2, [pc, #40]	; (8003a34 <SysTick_Config+0x40>)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a12:	210f      	movs	r1, #15
 8003a14:	f04f 30ff 	mov.w	r0, #4294967295
 8003a18:	f7ff ff8e 	bl	8003938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a1c:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <SysTick_Config+0x40>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a22:	4b04      	ldr	r3, [pc, #16]	; (8003a34 <SysTick_Config+0x40>)
 8003a24:	2207      	movs	r2, #7
 8003a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	e000e010 	.word	0xe000e010

08003a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff fec9 	bl	80037d8 <__NVIC_SetPriorityGrouping>
}
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b086      	sub	sp, #24
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	4603      	mov	r3, r0
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	607a      	str	r2, [r7, #4]
 8003a5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a5c:	f7ff fee0 	bl	8003820 <__NVIC_GetPriorityGrouping>
 8003a60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	68b9      	ldr	r1, [r7, #8]
 8003a66:	6978      	ldr	r0, [r7, #20]
 8003a68:	f7ff ff90 	bl	800398c <NVIC_EncodePriority>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a72:	4611      	mov	r1, r2
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff ff5f 	bl	8003938 <__NVIC_SetPriority>
}
 8003a7a:	bf00      	nop
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b082      	sub	sp, #8
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	4603      	mov	r3, r0
 8003a8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff fed3 	bl	800383c <__NVIC_EnableIRQ>
}
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b082      	sub	sp, #8
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff fee3 	bl	8003878 <__NVIC_DisableIRQ>
}
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7ff ff96 	bl	80039f4 <SysTick_Config>
 8003ac8:	4603      	mov	r3, r0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	4603      	mov	r3, r0
 8003ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff feed 	bl	80038c0 <__NVIC_SetPendingIRQ>
}
 8003ae6:	bf00      	nop
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b082      	sub	sp, #8
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	4603      	mov	r3, r0
 8003af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff fefd 	bl	80038fc <__NVIC_ClearPendingIRQ>
}
 8003b02:	bf00      	nop
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
	...

08003b0c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e08e      	b.n	8003c3c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	461a      	mov	r2, r3
 8003b24:	4b47      	ldr	r3, [pc, #284]	; (8003c44 <HAL_DMA_Init+0x138>)
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d80f      	bhi.n	8003b4a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	4b45      	ldr	r3, [pc, #276]	; (8003c48 <HAL_DMA_Init+0x13c>)
 8003b32:	4413      	add	r3, r2
 8003b34:	4a45      	ldr	r2, [pc, #276]	; (8003c4c <HAL_DMA_Init+0x140>)
 8003b36:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3a:	091b      	lsrs	r3, r3, #4
 8003b3c:	009a      	lsls	r2, r3, #2
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a42      	ldr	r2, [pc, #264]	; (8003c50 <HAL_DMA_Init+0x144>)
 8003b46:	641a      	str	r2, [r3, #64]	; 0x40
 8003b48:	e00e      	b.n	8003b68 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	4b40      	ldr	r3, [pc, #256]	; (8003c54 <HAL_DMA_Init+0x148>)
 8003b52:	4413      	add	r3, r2
 8003b54:	4a3d      	ldr	r2, [pc, #244]	; (8003c4c <HAL_DMA_Init+0x140>)
 8003b56:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5a:	091b      	lsrs	r3, r3, #4
 8003b5c:	009a      	lsls	r2, r3, #2
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a3c      	ldr	r2, [pc, #240]	; (8003c58 <HAL_DMA_Init+0x14c>)
 8003b66:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b82:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ba4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 fa74 	bl	80040a8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bc8:	d102      	bne.n	8003bd0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003bdc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003be6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d010      	beq.n	8003c12 <HAL_DMA_Init+0x106>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d80c      	bhi.n	8003c12 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 fa93 	bl	8004124 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c0e:	605a      	str	r2, [r3, #4]
 8003c10:	e008      	b.n	8003c24 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40020407 	.word	0x40020407
 8003c48:	bffdfff8 	.word	0xbffdfff8
 8003c4c:	cccccccd 	.word	0xcccccccd
 8003c50:	40020000 	.word	0x40020000
 8003c54:	bffdfbf8 	.word	0xbffdfbf8
 8003c58:	40020400 	.word	0x40020400

08003c5c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
 8003c68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d101      	bne.n	8003c7c <HAL_DMA_Start_IT+0x20>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	e066      	b.n	8003d4a <HAL_DMA_Start_IT+0xee>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d155      	bne.n	8003d3c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2202      	movs	r2, #2
 8003c94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0201 	bic.w	r2, r2, #1
 8003cac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	68b9      	ldr	r1, [r7, #8]
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 f9b9 	bl	800402c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d008      	beq.n	8003cd4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 020e 	orr.w	r2, r2, #14
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	e00f      	b.n	8003cf4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0204 	bic.w	r2, r2, #4
 8003ce2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 020a 	orr.w	r2, r2, #10
 8003cf2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d007      	beq.n	8003d12 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d10:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d007      	beq.n	8003d2a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d28:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f042 0201 	orr.w	r2, r2, #1
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	e005      	b.n	8003d48 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d44:	2302      	movs	r3, #2
 8003d46:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e04f      	b.n	8003e04 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d008      	beq.n	8003d82 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2204      	movs	r2, #4
 8003d74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e040      	b.n	8003e04 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 020e 	bic.w	r2, r2, #14
 8003d90:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003da0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0201 	bic.w	r2, r2, #1
 8003db0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	f003 021c 	and.w	r2, r3, #28
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8003dc4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003dce:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00c      	beq.n	8003df2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003de6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003df0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d005      	beq.n	8003e34 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2204      	movs	r2, #4
 8003e2c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	73fb      	strb	r3, [r7, #15]
 8003e32:	e047      	b.n	8003ec4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 020e 	bic.w	r2, r2, #14
 8003e42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0201 	bic.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e68:	f003 021c 	and.w	r2, r3, #28
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	2101      	movs	r1, #1
 8003e72:	fa01 f202 	lsl.w	r2, r1, r2
 8003e76:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e80:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00c      	beq.n	8003ea4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e98:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ea2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	4798      	blx	r3
    }
  }
  return status;
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b084      	sub	sp, #16
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eea:	f003 031c 	and.w	r3, r3, #28
 8003eee:	2204      	movs	r2, #4
 8003ef0:	409a      	lsls	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d026      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x7a>
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d021      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0320 	and.w	r3, r3, #32
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d107      	bne.n	8003f22 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 0204 	bic.w	r2, r2, #4
 8003f20:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f26:	f003 021c 	and.w	r2, r3, #28
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	2104      	movs	r1, #4
 8003f30:	fa01 f202 	lsl.w	r2, r1, r2
 8003f34:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d071      	beq.n	8004022 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003f46:	e06c      	b.n	8004022 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4c:	f003 031c 	and.w	r3, r3, #28
 8003f50:	2202      	movs	r2, #2
 8003f52:	409a      	lsls	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4013      	ands	r3, r2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d02e      	beq.n	8003fba <HAL_DMA_IRQHandler+0xec>
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d029      	beq.n	8003fba <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0320 	and.w	r3, r3, #32
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10b      	bne.n	8003f8c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 020a 	bic.w	r2, r2, #10
 8003f82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f90:	f003 021c 	and.w	r2, r3, #28
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	2102      	movs	r1, #2
 8003f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f9e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d038      	beq.n	8004022 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003fb8:	e033      	b.n	8004022 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbe:	f003 031c 	and.w	r3, r3, #28
 8003fc2:	2208      	movs	r2, #8
 8003fc4:	409a      	lsls	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d02a      	beq.n	8004024 <HAL_DMA_IRQHandler+0x156>
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d025      	beq.n	8004024 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 020e 	bic.w	r2, r2, #14
 8003fe6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fec:	f003 021c 	and.w	r2, r3, #28
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8003ffa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004016:	2b00      	cmp	r3, #0
 8004018:	d004      	beq.n	8004024 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004022:	bf00      	nop
 8004024:	bf00      	nop
}
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004042:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004048:	2b00      	cmp	r3, #0
 800404a:	d004      	beq.n	8004056 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004054:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405a:	f003 021c 	and.w	r2, r3, #28
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	2101      	movs	r1, #1
 8004064:	fa01 f202 	lsl.w	r2, r1, r2
 8004068:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	2b10      	cmp	r3, #16
 8004078:	d108      	bne.n	800408c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800408a:	e007      	b.n	800409c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	60da      	str	r2, [r3, #12]
}
 800409c:	bf00      	nop
 800409e:	3714      	adds	r7, #20
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	461a      	mov	r2, r3
 80040b6:	4b17      	ldr	r3, [pc, #92]	; (8004114 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d80a      	bhi.n	80040d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c0:	089b      	lsrs	r3, r3, #2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040c8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6493      	str	r3, [r2, #72]	; 0x48
 80040d0:	e007      	b.n	80040e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d6:	089b      	lsrs	r3, r3, #2
 80040d8:	009a      	lsls	r2, r3, #2
 80040da:	4b0f      	ldr	r3, [pc, #60]	; (8004118 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80040dc:	4413      	add	r3, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	3b08      	subs	r3, #8
 80040ea:	4a0c      	ldr	r2, [pc, #48]	; (800411c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80040ec:	fba2 2303 	umull	r2, r3, r2, r3
 80040f0:	091b      	lsrs	r3, r3, #4
 80040f2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a0a      	ldr	r2, [pc, #40]	; (8004120 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80040f8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f003 031f 	and.w	r3, r3, #31
 8004100:	2201      	movs	r2, #1
 8004102:	409a      	lsls	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004108:	bf00      	nop
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	40020407 	.word	0x40020407
 8004118:	4002081c 	.word	0x4002081c
 800411c:	cccccccd 	.word	0xcccccccd
 8004120:	40020880 	.word	0x40020880

08004124 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004134:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800413a:	4413      	add	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	461a      	mov	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a09      	ldr	r2, [pc, #36]	; (800416c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004148:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	3b01      	subs	r3, #1
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	2201      	movs	r2, #1
 8004154:	409a      	lsls	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800415a:	bf00      	nop
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	1000823f 	.word	0x1000823f
 800416c:	40020940 	.word	0x40020940

08004170 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800417e:	e14c      	b.n	800441a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	2101      	movs	r1, #1
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	fa01 f303 	lsl.w	r3, r1, r3
 800418c:	4013      	ands	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 813e 	beq.w	8004414 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f003 0303 	and.w	r3, r3, #3
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d005      	beq.n	80041b0 <HAL_GPIO_Init+0x40>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f003 0303 	and.w	r3, r3, #3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d130      	bne.n	8004212 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	2203      	movs	r2, #3
 80041bc:	fa02 f303 	lsl.w	r3, r2, r3
 80041c0:	43db      	mvns	r3, r3
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4013      	ands	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041e6:	2201      	movs	r2, #1
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	fa02 f303 	lsl.w	r3, r2, r3
 80041ee:	43db      	mvns	r3, r3
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4013      	ands	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	091b      	lsrs	r3, r3, #4
 80041fc:	f003 0201 	and.w	r2, r3, #1
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	4313      	orrs	r3, r2
 800420a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	2b03      	cmp	r3, #3
 800421c:	d017      	beq.n	800424e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	2203      	movs	r2, #3
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	43db      	mvns	r3, r3
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4013      	ands	r3, r2
 8004234:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	4313      	orrs	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d123      	bne.n	80042a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	08da      	lsrs	r2, r3, #3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3208      	adds	r2, #8
 8004262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004266:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	220f      	movs	r2, #15
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43db      	mvns	r3, r3
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4013      	ands	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	691a      	ldr	r2, [r3, #16]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	08da      	lsrs	r2, r3, #3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3208      	adds	r2, #8
 800429c:	6939      	ldr	r1, [r7, #16]
 800429e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	2203      	movs	r2, #3
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	43db      	mvns	r3, r3
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	4013      	ands	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f003 0203 	and.w	r2, r3, #3
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 8098 	beq.w	8004414 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80042e4:	4a54      	ldr	r2, [pc, #336]	; (8004438 <HAL_GPIO_Init+0x2c8>)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	089b      	lsrs	r3, r3, #2
 80042ea:	3302      	adds	r3, #2
 80042ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f003 0303 	and.w	r3, r3, #3
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	220f      	movs	r2, #15
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	43db      	mvns	r3, r3
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	4013      	ands	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800430e:	d019      	beq.n	8004344 <HAL_GPIO_Init+0x1d4>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a4a      	ldr	r2, [pc, #296]	; (800443c <HAL_GPIO_Init+0x2cc>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d013      	beq.n	8004340 <HAL_GPIO_Init+0x1d0>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a49      	ldr	r2, [pc, #292]	; (8004440 <HAL_GPIO_Init+0x2d0>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d00d      	beq.n	800433c <HAL_GPIO_Init+0x1cc>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a48      	ldr	r2, [pc, #288]	; (8004444 <HAL_GPIO_Init+0x2d4>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d007      	beq.n	8004338 <HAL_GPIO_Init+0x1c8>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a47      	ldr	r2, [pc, #284]	; (8004448 <HAL_GPIO_Init+0x2d8>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d101      	bne.n	8004334 <HAL_GPIO_Init+0x1c4>
 8004330:	2304      	movs	r3, #4
 8004332:	e008      	b.n	8004346 <HAL_GPIO_Init+0x1d6>
 8004334:	2307      	movs	r3, #7
 8004336:	e006      	b.n	8004346 <HAL_GPIO_Init+0x1d6>
 8004338:	2303      	movs	r3, #3
 800433a:	e004      	b.n	8004346 <HAL_GPIO_Init+0x1d6>
 800433c:	2302      	movs	r3, #2
 800433e:	e002      	b.n	8004346 <HAL_GPIO_Init+0x1d6>
 8004340:	2301      	movs	r3, #1
 8004342:	e000      	b.n	8004346 <HAL_GPIO_Init+0x1d6>
 8004344:	2300      	movs	r3, #0
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	f002 0203 	and.w	r2, r2, #3
 800434c:	0092      	lsls	r2, r2, #2
 800434e:	4093      	lsls	r3, r2
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004356:	4938      	ldr	r1, [pc, #224]	; (8004438 <HAL_GPIO_Init+0x2c8>)
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	089b      	lsrs	r3, r3, #2
 800435c:	3302      	adds	r3, #2
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004364:	4b39      	ldr	r3, [pc, #228]	; (800444c <HAL_GPIO_Init+0x2dc>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	43db      	mvns	r3, r3
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	4013      	ands	r3, r2
 8004372:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004388:	4a30      	ldr	r2, [pc, #192]	; (800444c <HAL_GPIO_Init+0x2dc>)
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800438e:	4b2f      	ldr	r3, [pc, #188]	; (800444c <HAL_GPIO_Init+0x2dc>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	43db      	mvns	r3, r3
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4013      	ands	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80043b2:	4a26      	ldr	r2, [pc, #152]	; (800444c <HAL_GPIO_Init+0x2dc>)
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80043b8:	4b24      	ldr	r3, [pc, #144]	; (800444c <HAL_GPIO_Init+0x2dc>)
 80043ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	43db      	mvns	r3, r3
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4013      	ands	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4313      	orrs	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80043de:	4a1b      	ldr	r2, [pc, #108]	; (800444c <HAL_GPIO_Init+0x2dc>)
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80043e6:	4b19      	ldr	r3, [pc, #100]	; (800444c <HAL_GPIO_Init+0x2dc>)
 80043e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	43db      	mvns	r3, r3
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	4013      	ands	r3, r2
 80043f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	4313      	orrs	r3, r2
 800440a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800440c:	4a0f      	ldr	r2, [pc, #60]	; (800444c <HAL_GPIO_Init+0x2dc>)
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	3301      	adds	r3, #1
 8004418:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	fa22 f303 	lsr.w	r3, r2, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	f47f aeab 	bne.w	8004180 <HAL_GPIO_Init+0x10>
  }
}
 800442a:	bf00      	nop
 800442c:	bf00      	nop
 800442e:	371c      	adds	r7, #28
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	40010000 	.word	0x40010000
 800443c:	48000400 	.word	0x48000400
 8004440:	48000800 	.word	0x48000800
 8004444:	48000c00 	.word	0x48000c00
 8004448:	48001000 	.word	0x48001000
 800444c:	58000800 	.word	0x58000800

08004450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	807b      	strh	r3, [r7, #2]
 800445c:	4613      	mov	r3, r2
 800445e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004460:	787b      	ldrb	r3, [r7, #1]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004466:	887a      	ldrh	r2, [r7, #2]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800446c:	e002      	b.n	8004474 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800446e:	887a      	ldrh	r2, [r7, #2]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	4603      	mov	r3, r0
 8004488:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800448a:	4b08      	ldr	r3, [pc, #32]	; (80044ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	88fb      	ldrh	r3, [r7, #6]
 8004490:	4013      	ands	r3, r2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d006      	beq.n	80044a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004496:	4a05      	ldr	r2, [pc, #20]	; (80044ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800449c:	88fb      	ldrh	r3, [r7, #6]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fd f91e 	bl	80016e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80044a4:	bf00      	nop
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	58000800 	.word	0x58000800

080044b0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80044b6:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <HAL_HSEM_IRQHandler+0x30>)
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80044bc:	4b08      	ldr	r3, [pc, #32]	; (80044e0 <HAL_HSEM_IRQHandler+0x30>)
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	43db      	mvns	r3, r3
 80044c4:	4906      	ldr	r1, [pc, #24]	; (80044e0 <HAL_HSEM_IRQHandler+0x30>)
 80044c6:	4013      	ands	r3, r2
 80044c8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80044ca:	4a05      	ldr	r2, [pc, #20]	; (80044e0 <HAL_HSEM_IRQHandler+0x30>)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f807 	bl	80044e4 <HAL_HSEM_FreeCallback>
}
 80044d6:	bf00      	nop
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	58001500 	.word	0x58001500

080044e4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004500:	2300      	movs	r3, #0
 8004502:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d01e      	beq.n	8004548 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800450a:	4b13      	ldr	r3, [pc, #76]	; (8004558 <HAL_IPCC_Init+0x60>)
 800450c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d102      	bne.n	8004520 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fe fd8a 	bl	8003034 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004520:	68b8      	ldr	r0, [r7, #8]
 8004522:	f000 f85b 	bl	80045dc <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f82c 	bl	8004590 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004546:	e001      	b.n	800454c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800454c:	7bfb      	ldrb	r3, [r7, #15]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	58000c00 	.word	0x58000c00

0800455c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	4613      	mov	r3, r2
 8004568:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800456a:	bf00      	nop
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004576:	b480      	push	{r7}
 8004578:	b085      	sub	sp, #20
 800457a:	af00      	add	r7, sp, #0
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	60b9      	str	r1, [r7, #8]
 8004580:	4613      	mov	r3, r2
 8004582:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004598:	2300      	movs	r3, #0
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	e00f      	b.n	80045be <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	4a0b      	ldr	r2, [pc, #44]	; (80045d4 <IPCC_SetDefaultCallbacks+0x44>)
 80045a8:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	3306      	adds	r3, #6
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	4a08      	ldr	r2, [pc, #32]	; (80045d8 <IPCC_SetDefaultCallbacks+0x48>)
 80045b6:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	3301      	adds	r3, #1
 80045bc:	60fb      	str	r3, [r7, #12]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b05      	cmp	r3, #5
 80045c2:	d9ec      	bls.n	800459e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80045c4:	bf00      	nop
 80045c6:	bf00      	nop
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	0800455d 	.word	0x0800455d
 80045d8:	08004577 	.word	0x08004577

080045dc <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80045f0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	223f      	movs	r2, #63	; 0x3f
 80045f6:	609a      	str	r2, [r3, #8]
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e0c0      	b.n	8004798 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fe fe40 	bl	80032b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2203      	movs	r2, #3
 8004634:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4618      	mov	r0, r3
 800463e:	f004 fb05 	bl	8008c4c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004642:	2300      	movs	r3, #0
 8004644:	73fb      	strb	r3, [r7, #15]
 8004646:	e03e      	b.n	80046c6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004648:	7bfa      	ldrb	r2, [r7, #15]
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	4613      	mov	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	440b      	add	r3, r1
 8004656:	3311      	adds	r3, #17
 8004658:	2201      	movs	r2, #1
 800465a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800465c:	7bfa      	ldrb	r2, [r7, #15]
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	440b      	add	r3, r1
 800466a:	3310      	adds	r3, #16
 800466c:	7bfa      	ldrb	r2, [r7, #15]
 800466e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004670:	7bfa      	ldrb	r2, [r7, #15]
 8004672:	6879      	ldr	r1, [r7, #4]
 8004674:	4613      	mov	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	440b      	add	r3, r1
 800467e:	3313      	adds	r3, #19
 8004680:	2200      	movs	r2, #0
 8004682:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004684:	7bfa      	ldrb	r2, [r7, #15]
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	440b      	add	r3, r1
 8004692:	3320      	adds	r3, #32
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004698:	7bfa      	ldrb	r2, [r7, #15]
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	440b      	add	r3, r1
 80046a6:	3324      	adds	r3, #36	; 0x24
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	4613      	mov	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4413      	add	r3, r2
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	440b      	add	r3, r1
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
 80046c2:	3301      	adds	r3, #1
 80046c4:	73fb      	strb	r3, [r7, #15]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	791b      	ldrb	r3, [r3, #4]
 80046ca:	7bfa      	ldrb	r2, [r7, #15]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d3bb      	bcc.n	8004648 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046d0:	2300      	movs	r3, #0
 80046d2:	73fb      	strb	r3, [r7, #15]
 80046d4:	e044      	b.n	8004760 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80046d6:	7bfa      	ldrb	r2, [r7, #15]
 80046d8:	6879      	ldr	r1, [r7, #4]
 80046da:	4613      	mov	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	440b      	add	r3, r1
 80046e4:	f203 1351 	addw	r3, r3, #337	; 0x151
 80046e8:	2200      	movs	r2, #0
 80046ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80046ec:	7bfa      	ldrb	r2, [r7, #15]
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	4613      	mov	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	440b      	add	r3, r1
 80046fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80046fe:	7bfa      	ldrb	r2, [r7, #15]
 8004700:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004702:	7bfa      	ldrb	r2, [r7, #15]
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	4613      	mov	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	440b      	add	r3, r1
 8004710:	f203 1353 	addw	r3, r3, #339	; 0x153
 8004714:	2200      	movs	r2, #0
 8004716:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004718:	7bfa      	ldrb	r2, [r7, #15]
 800471a:	6879      	ldr	r1, [r7, #4]
 800471c:	4613      	mov	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	440b      	add	r3, r1
 8004726:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800472e:	7bfa      	ldrb	r2, [r7, #15]
 8004730:	6879      	ldr	r1, [r7, #4]
 8004732:	4613      	mov	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	440b      	add	r3, r1
 800473c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004744:	7bfa      	ldrb	r2, [r7, #15]
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	4613      	mov	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	440b      	add	r3, r1
 8004752:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004756:	2200      	movs	r2, #0
 8004758:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	3301      	adds	r3, #1
 800475e:	73fb      	strb	r3, [r7, #15]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	791b      	ldrb	r3, [r3, #4]
 8004764:	7bfa      	ldrb	r2, [r7, #15]
 8004766:	429a      	cmp	r2, r3
 8004768:	d3b5      	bcc.n	80046d6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6818      	ldr	r0, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	3304      	adds	r3, #4
 8004772:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004776:	f004 fa84 	bl	8008c82 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	7a9b      	ldrb	r3, [r3, #10]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d102      	bne.n	8004796 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f805 	bl	80047a0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	f043 0301 	orr.w	r3, r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80047d8:	b29b      	uxth	r3, r3
 80047da:	f043 0302 	orr.w	r3, r3, #2
 80047de:	b29a      	uxth	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047f8:	4b05      	ldr	r3, [pc, #20]	; (8004810 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a04      	ldr	r2, [pc, #16]	; (8004810 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004802:	6013      	str	r3, [r2, #0]
}
 8004804:	bf00      	nop
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	58000400 	.word	0x58000400

08004814 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004818:	4b04      	ldr	r3, [pc, #16]	; (800482c <HAL_PWREx_GetVoltageRange+0x18>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004820:	4618      	mov	r0, r3
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	58000400 	.word	0x58000400

08004830 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800483e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004842:	d101      	bne.n	8004848 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004844:	2301      	movs	r3, #1
 8004846:	e000      	b.n	800484a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <LL_RCC_HSE_Enable>:
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004866:	6013      	str	r3, [r2, #0]
}
 8004868:	bf00      	nop
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <LL_RCC_HSE_Disable>:
{
 8004872:	b480      	push	{r7}
 8004874:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004884:	6013      	str	r3, [r2, #0]
}
 8004886:	bf00      	nop
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <LL_RCC_HSE_IsReady>:
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048a2:	d101      	bne.n	80048a8 <LL_RCC_HSE_IsReady+0x18>
 80048a4:	2301      	movs	r3, #1
 80048a6:	e000      	b.n	80048aa <LL_RCC_HSE_IsReady+0x1a>
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <LL_RCC_HSI_Enable>:
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80048b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c6:	6013      	str	r3, [r2, #0]
}
 80048c8:	bf00      	nop
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <LL_RCC_HSI_Disable>:
{
 80048d2:	b480      	push	{r7}
 80048d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80048d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048e4:	6013      	str	r3, [r2, #0]
}
 80048e6:	bf00      	nop
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <LL_RCC_HSI_IsReady>:
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80048f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004902:	d101      	bne.n	8004908 <LL_RCC_HSI_IsReady+0x18>
 8004904:	2301      	movs	r3, #1
 8004906:	e000      	b.n	800490a <LL_RCC_HSI_IsReady+0x1a>
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800491c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	061b      	lsls	r3, r3, #24
 800492a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800492e:	4313      	orrs	r3, r2
 8004930:	604b      	str	r3, [r1, #4]
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <LL_RCC_HSI48_Enable>:
{
 800493e:	b480      	push	{r7}
 8004940:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004946:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800494a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004956:	bf00      	nop
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <LL_RCC_HSI48_Disable>:
{
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004968:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800496c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004970:	f023 0301 	bic.w	r3, r3, #1
 8004974:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004978:	bf00      	nop
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <LL_RCC_HSI48_IsReady>:
{
 8004982:	b480      	push	{r7}
 8004984:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800498a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b02      	cmp	r3, #2
 8004994:	d101      	bne.n	800499a <LL_RCC_HSI48_IsReady+0x18>
 8004996:	2301      	movs	r3, #1
 8004998:	e000      	b.n	800499c <LL_RCC_HSI48_IsReady+0x1a>
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <LL_RCC_LSE_Enable>:
{
 80049a6:	b480      	push	{r7}
 80049a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80049aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049b6:	f043 0301 	orr.w	r3, r3, #1
 80049ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80049be:	bf00      	nop
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <LL_RCC_LSE_Disable>:
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80049cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049d8:	f023 0301 	bic.w	r3, r3, #1
 80049dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80049e0:	bf00      	nop
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <LL_RCC_LSE_EnableBypass>:
{
 80049ea:	b480      	push	{r7}
 80049ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80049ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049fa:	f043 0304 	orr.w	r3, r3, #4
 80049fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004a02:	bf00      	nop
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <LL_RCC_LSE_DisableBypass>:
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a1c:	f023 0304 	bic.w	r3, r3, #4
 8004a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004a24:	bf00      	nop
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <LL_RCC_LSE_IsReady>:
{
 8004a2e:	b480      	push	{r7}
 8004a30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d101      	bne.n	8004a46 <LL_RCC_LSE_IsReady+0x18>
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <LL_RCC_LSE_IsReady+0x1a>
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <LL_RCC_LSI1_Enable>:
{
 8004a52:	b480      	push	{r7}
 8004a54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a62:	f043 0301 	orr.w	r3, r3, #1
 8004a66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004a6a:	bf00      	nop
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <LL_RCC_LSI1_Disable>:
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a84:	f023 0301 	bic.w	r3, r3, #1
 8004a88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004a8c:	bf00      	nop
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <LL_RCC_LSI1_IsReady>:
{
 8004a96:	b480      	push	{r7}
 8004a98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d101      	bne.n	8004aae <LL_RCC_LSI1_IsReady+0x18>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e000      	b.n	8004ab0 <LL_RCC_LSI1_IsReady+0x1a>
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <LL_RCC_LSI2_Enable>:
{
 8004aba:	b480      	push	{r7}
 8004abc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ac6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004aca:	f043 0304 	orr.w	r3, r3, #4
 8004ace:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004ad2:	bf00      	nop
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <LL_RCC_LSI2_Disable>:
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ae8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004aec:	f023 0304 	bic.w	r3, r3, #4
 8004af0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004af4:	bf00      	nop
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <LL_RCC_LSI2_IsReady>:
{
 8004afe:	b480      	push	{r7}
 8004b00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	2b08      	cmp	r3, #8
 8004b10:	d101      	bne.n	8004b16 <LL_RCC_LSI2_IsReady+0x18>
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <LL_RCC_LSI2_IsReady+0x1a>
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <LL_RCC_LSI2_SetTrimming>:
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b32:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	021b      	lsls	r3, r3, #8
 8004b3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <LL_RCC_MSI_Enable>:
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b5e:	f043 0301 	orr.w	r3, r3, #1
 8004b62:	6013      	str	r3, [r2, #0]
}
 8004b64:	bf00      	nop
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <LL_RCC_MSI_Disable>:
{
 8004b6e:	b480      	push	{r7}
 8004b70:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b7c:	f023 0301 	bic.w	r3, r3, #1
 8004b80:	6013      	str	r3, [r2, #0]
}
 8004b82:	bf00      	nop
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <LL_RCC_MSI_IsReady>:
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d101      	bne.n	8004ba2 <LL_RCC_MSI_IsReady+0x16>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e000      	b.n	8004ba4 <LL_RCC_MSI_IsReady+0x18>
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <LL_RCC_MSI_SetRange>:
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	600b      	str	r3, [r1, #0]
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <LL_RCC_MSI_GetRange>:
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004be6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2bb0      	cmp	r3, #176	; 0xb0
 8004bec:	d901      	bls.n	8004bf2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004bee:	23b0      	movs	r3, #176	; 0xb0
 8004bf0:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004bf2:	687b      	ldr	r3, [r7, #4]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	021b      	lsls	r3, r3, #8
 8004c16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	604b      	str	r3, [r1, #4]
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <LL_RCC_SetSysClkSource>:
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f023 0203 	bic.w	r2, r3, #3
 8004c3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	608b      	str	r3, [r1, #8]
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <LL_RCC_GetSysClkSource>:
{
 8004c52:	b480      	push	{r7}
 8004c54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f003 030c 	and.w	r3, r3, #12
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <LL_RCC_SetAHBPrescaler>:
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	608b      	str	r3, [r1, #8]
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <LL_C2_RCC_SetAHBPrescaler>:
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c9e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ca2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ca6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004cb2:	bf00      	nop
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <LL_RCC_SetAHB4Prescaler>:
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b083      	sub	sp, #12
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004cce:	f023 020f 	bic.w	r2, r3, #15
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	091b      	lsrs	r3, r3, #4
 8004cd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <LL_RCC_SetAPB1Prescaler>:
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	608b      	str	r3, [r1, #8]
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <LL_RCC_SetAPB2Prescaler>:
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	608b      	str	r3, [r1, #8]
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <LL_RCC_GetAHBPrescaler>:
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <LL_RCC_GetAHB4Prescaler>:
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d5c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004d60:	011b      	lsls	r3, r3, #4
 8004d62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <LL_RCC_GetAPB1Prescaler>:
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <LL_RCC_GetAPB2Prescaler>:
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004db2:	6013      	str	r3, [r2, #0]
}
 8004db4:	bf00      	nop
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dd0:	6013      	str	r3, [r2, #0]
}
 8004dd2:	bf00      	nop
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dee:	d101      	bne.n	8004df4 <LL_RCC_PLL_IsReady+0x18>
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <LL_RCC_PLL_IsReady+0x1a>
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	0a1b      	lsrs	r3, r3, #8
 8004e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004e32:	b480      	push	{r7}
 8004e34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f003 0303 	and.w	r3, r3, #3
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004e62:	b480      	push	{r7}
 8004e64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e74:	d101      	bne.n	8004e7a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004e76:	2301      	movs	r3, #1
 8004e78:	e000      	b.n	8004e7c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004e86:	b480      	push	{r7}
 8004e88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e8e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e9a:	d101      	bne.n	8004ea0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e000      	b.n	8004ea2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec0:	d101      	bne.n	8004ec6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e000      	b.n	8004ec8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ee4:	d101      	bne.n	8004eea <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f08:	d101      	bne.n	8004f0e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e000      	b.n	8004f10 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
	...

08004f1c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f1c:	b590      	push	{r4, r7, lr}
 8004f1e:	b08d      	sub	sp, #52	; 0x34
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e363      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0320 	and.w	r3, r3, #32
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 808d 	beq.w	8005056 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f3c:	f7ff fe89 	bl	8004c52 <LL_RCC_GetSysClkSource>
 8004f40:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f42:	f7ff ff82 	bl	8004e4a <LL_RCC_PLL_GetMainSource>
 8004f46:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d005      	beq.n	8004f5a <HAL_RCC_OscConfig+0x3e>
 8004f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f50:	2b0c      	cmp	r3, #12
 8004f52:	d147      	bne.n	8004fe4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d144      	bne.n	8004fe4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e347      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004f6a:	f7ff fe34 	bl	8004bd6 <LL_RCC_MSI_GetRange>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	429c      	cmp	r4, r3
 8004f72:	d914      	bls.n	8004f9e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 fd2f 	bl	80059dc <RCC_SetFlashLatencyFromMSIRange>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e336      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7ff fe0e 	bl	8004bae <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7ff fe32 	bl	8004c00 <LL_RCC_MSI_SetCalibTrimming>
 8004f9c:	e013      	b.n	8004fc6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7ff fe03 	bl	8004bae <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7ff fe27 	bl	8004c00 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fd10 	bl	80059dc <RCC_SetFlashLatencyFromMSIRange>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e317      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004fc6:	f000 fcc9 	bl	800595c <HAL_RCC_GetHCLKFreq>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	4aa4      	ldr	r2, [pc, #656]	; (8005260 <HAL_RCC_OscConfig+0x344>)
 8004fce:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004fd0:	4ba4      	ldr	r3, [pc, #656]	; (8005264 <HAL_RCC_OscConfig+0x348>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7fe fb81 	bl	80036dc <HAL_InitTick>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d039      	beq.n	8005054 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e308      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d01e      	beq.n	800502a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004fec:	f7ff fdb0 	bl	8004b50 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ff0:	f7fe fbc2 	bl	8003778 <HAL_GetTick>
 8004ff4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ff8:	f7fe fbbe 	bl	8003778 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e2f5      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800500a:	f7ff fdbf 	bl	8004b8c <LL_RCC_MSI_IsReady>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0f1      	beq.n	8004ff8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	4618      	mov	r0, r3
 800501a:	f7ff fdc8 	bl	8004bae <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	4618      	mov	r0, r3
 8005024:	f7ff fdec 	bl	8004c00 <LL_RCC_MSI_SetCalibTrimming>
 8005028:	e015      	b.n	8005056 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800502a:	f7ff fda0 	bl	8004b6e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800502e:	f7fe fba3 	bl	8003778 <HAL_GetTick>
 8005032:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005034:	e008      	b.n	8005048 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005036:	f7fe fb9f 	bl	8003778 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d901      	bls.n	8005048 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e2d6      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005048:	f7ff fda0 	bl	8004b8c <LL_RCC_MSI_IsReady>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1f1      	bne.n	8005036 <HAL_RCC_OscConfig+0x11a>
 8005052:	e000      	b.n	8005056 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005054:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d047      	beq.n	80050f2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005062:	f7ff fdf6 	bl	8004c52 <LL_RCC_GetSysClkSource>
 8005066:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005068:	f7ff feef 	bl	8004e4a <LL_RCC_PLL_GetMainSource>
 800506c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	2b08      	cmp	r3, #8
 8005072:	d005      	beq.n	8005080 <HAL_RCC_OscConfig+0x164>
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	2b0c      	cmp	r3, #12
 8005078:	d108      	bne.n	800508c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	2b03      	cmp	r3, #3
 800507e:	d105      	bne.n	800508c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d134      	bne.n	80050f2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e2b4      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005094:	d102      	bne.n	800509c <HAL_RCC_OscConfig+0x180>
 8005096:	f7ff fbdd 	bl	8004854 <LL_RCC_HSE_Enable>
 800509a:	e001      	b.n	80050a0 <HAL_RCC_OscConfig+0x184>
 800509c:	f7ff fbe9 	bl	8004872 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d012      	beq.n	80050ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a8:	f7fe fb66 	bl	8003778 <HAL_GetTick>
 80050ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050b0:	f7fe fb62 	bl	8003778 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b64      	cmp	r3, #100	; 0x64
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e299      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80050c2:	f7ff fbe5 	bl	8004890 <LL_RCC_HSE_IsReady>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0f1      	beq.n	80050b0 <HAL_RCC_OscConfig+0x194>
 80050cc:	e011      	b.n	80050f2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ce:	f7fe fb53 	bl	8003778 <HAL_GetTick>
 80050d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80050d4:	e008      	b.n	80050e8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050d6:	f7fe fb4f 	bl	8003778 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b64      	cmp	r3, #100	; 0x64
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e286      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80050e8:	f7ff fbd2 	bl	8004890 <LL_RCC_HSE_IsReady>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f1      	bne.n	80050d6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d04c      	beq.n	8005198 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050fe:	f7ff fda8 	bl	8004c52 <LL_RCC_GetSysClkSource>
 8005102:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005104:	f7ff fea1 	bl	8004e4a <LL_RCC_PLL_GetMainSource>
 8005108:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	2b04      	cmp	r3, #4
 800510e:	d005      	beq.n	800511c <HAL_RCC_OscConfig+0x200>
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	2b0c      	cmp	r3, #12
 8005114:	d10e      	bne.n	8005134 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2b02      	cmp	r3, #2
 800511a:	d10b      	bne.n	8005134 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e266      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff fbf1 	bl	8004914 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005132:	e031      	b.n	8005198 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d019      	beq.n	8005170 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800513c:	f7ff fbba 	bl	80048b4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005140:	f7fe fb1a 	bl	8003778 <HAL_GetTick>
 8005144:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005146:	e008      	b.n	800515a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005148:	f7fe fb16 	bl	8003778 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e24d      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800515a:	f7ff fbc9 	bl	80048f0 <LL_RCC_HSI_IsReady>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0f1      	beq.n	8005148 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	4618      	mov	r0, r3
 800516a:	f7ff fbd3 	bl	8004914 <LL_RCC_HSI_SetCalibTrimming>
 800516e:	e013      	b.n	8005198 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005170:	f7ff fbaf 	bl	80048d2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005174:	f7fe fb00 	bl	8003778 <HAL_GetTick>
 8005178:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800517c:	f7fe fafc 	bl	8003778 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e233      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800518e:	f7ff fbaf 	bl	80048f0 <LL_RCC_HSI_IsReady>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1f1      	bne.n	800517c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0308 	and.w	r3, r3, #8
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d106      	bne.n	80051b2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 80a3 	beq.w	80052f8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d076      	beq.n	80052a8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0310 	and.w	r3, r3, #16
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d046      	beq.n	8005254 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80051c6:	f7ff fc66 	bl	8004a96 <LL_RCC_LSI1_IsReady>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d113      	bne.n	80051f8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80051d0:	f7ff fc3f 	bl	8004a52 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051d4:	f7fe fad0 	bl	8003778 <HAL_GetTick>
 80051d8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80051dc:	f7fe facc 	bl	8003778 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e203      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80051ee:	f7ff fc52 	bl	8004a96 <LL_RCC_LSI1_IsReady>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0f1      	beq.n	80051dc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80051f8:	f7ff fc5f 	bl	8004aba <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051fc:	f7fe fabc 	bl	8003778 <HAL_GetTick>
 8005200:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005202:	e008      	b.n	8005216 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005204:	f7fe fab8 	bl	8003778 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b03      	cmp	r3, #3
 8005210:	d901      	bls.n	8005216 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e1ef      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005216:	f7ff fc72 	bl	8004afe <LL_RCC_LSI2_IsReady>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d0f1      	beq.n	8005204 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff fc7c 	bl	8004b22 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800522a:	f7ff fc23 	bl	8004a74 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522e:	f7fe faa3 	bl	8003778 <HAL_GetTick>
 8005232:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005234:	e008      	b.n	8005248 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005236:	f7fe fa9f 	bl	8003778 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e1d6      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005248:	f7ff fc25 	bl	8004a96 <LL_RCC_LSI1_IsReady>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1f1      	bne.n	8005236 <HAL_RCC_OscConfig+0x31a>
 8005252:	e051      	b.n	80052f8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005254:	f7ff fbfd 	bl	8004a52 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005258:	f7fe fa8e 	bl	8003778 <HAL_GetTick>
 800525c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800525e:	e00c      	b.n	800527a <HAL_RCC_OscConfig+0x35e>
 8005260:	20000008 	.word	0x20000008
 8005264:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005268:	f7fe fa86 	bl	8003778 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e1bd      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800527a:	f7ff fc0c 	bl	8004a96 <LL_RCC_LSI1_IsReady>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d0f1      	beq.n	8005268 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005284:	f7ff fc2a 	bl	8004adc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005288:	e008      	b.n	800529c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800528a:	f7fe fa75 	bl	8003778 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b03      	cmp	r3, #3
 8005296:	d901      	bls.n	800529c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e1ac      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800529c:	f7ff fc2f 	bl	8004afe <LL_RCC_LSI2_IsReady>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1f1      	bne.n	800528a <HAL_RCC_OscConfig+0x36e>
 80052a6:	e027      	b.n	80052f8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80052a8:	f7ff fc18 	bl	8004adc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ac:	f7fe fa64 	bl	8003778 <HAL_GetTick>
 80052b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80052b2:	e008      	b.n	80052c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80052b4:	f7fe fa60 	bl	8003778 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b03      	cmp	r3, #3
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e197      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80052c6:	f7ff fc1a 	bl	8004afe <LL_RCC_LSI2_IsReady>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1f1      	bne.n	80052b4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80052d0:	f7ff fbd0 	bl	8004a74 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d4:	f7fe fa50 	bl	8003778 <HAL_GetTick>
 80052d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80052dc:	f7fe fa4c 	bl	8003778 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e183      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80052ee:	f7ff fbd2 	bl	8004a96 <LL_RCC_LSI1_IsReady>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1f1      	bne.n	80052dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	2b00      	cmp	r3, #0
 8005302:	d05b      	beq.n	80053bc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005304:	4ba7      	ldr	r3, [pc, #668]	; (80055a4 <HAL_RCC_OscConfig+0x688>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530c:	2b00      	cmp	r3, #0
 800530e:	d114      	bne.n	800533a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005310:	f7ff fa70 	bl	80047f4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005314:	f7fe fa30 	bl	8003778 <HAL_GetTick>
 8005318:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800531a:	e008      	b.n	800532e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800531c:	f7fe fa2c 	bl	8003778 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e163      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800532e:	4b9d      	ldr	r3, [pc, #628]	; (80055a4 <HAL_RCC_OscConfig+0x688>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0f0      	beq.n	800531c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d102      	bne.n	8005348 <HAL_RCC_OscConfig+0x42c>
 8005342:	f7ff fb30 	bl	80049a6 <LL_RCC_LSE_Enable>
 8005346:	e00c      	b.n	8005362 <HAL_RCC_OscConfig+0x446>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	2b05      	cmp	r3, #5
 800534e:	d104      	bne.n	800535a <HAL_RCC_OscConfig+0x43e>
 8005350:	f7ff fb4b 	bl	80049ea <LL_RCC_LSE_EnableBypass>
 8005354:	f7ff fb27 	bl	80049a6 <LL_RCC_LSE_Enable>
 8005358:	e003      	b.n	8005362 <HAL_RCC_OscConfig+0x446>
 800535a:	f7ff fb35 	bl	80049c8 <LL_RCC_LSE_Disable>
 800535e:	f7ff fb55 	bl	8004a0c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d014      	beq.n	8005394 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800536a:	f7fe fa05 	bl	8003778 <HAL_GetTick>
 800536e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005370:	e00a      	b.n	8005388 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005372:	f7fe fa01 	bl	8003778 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005380:	4293      	cmp	r3, r2
 8005382:	d901      	bls.n	8005388 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e136      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005388:	f7ff fb51 	bl	8004a2e <LL_RCC_LSE_IsReady>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0ef      	beq.n	8005372 <HAL_RCC_OscConfig+0x456>
 8005392:	e013      	b.n	80053bc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005394:	f7fe f9f0 	bl	8003778 <HAL_GetTick>
 8005398:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800539a:	e00a      	b.n	80053b2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800539c:	f7fe f9ec 	bl	8003778 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e121      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80053b2:	f7ff fb3c 	bl	8004a2e <LL_RCC_LSE_IsReady>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1ef      	bne.n	800539c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d02c      	beq.n	8005422 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d014      	beq.n	80053fa <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053d0:	f7ff fab5 	bl	800493e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d4:	f7fe f9d0 	bl	8003778 <HAL_GetTick>
 80053d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053dc:	f7fe f9cc 	bl	8003778 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e103      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80053ee:	f7ff fac8 	bl	8004982 <LL_RCC_HSI48_IsReady>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d0f1      	beq.n	80053dc <HAL_RCC_OscConfig+0x4c0>
 80053f8:	e013      	b.n	8005422 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053fa:	f7ff fab1 	bl	8004960 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053fe:	f7fe f9bb 	bl	8003778 <HAL_GetTick>
 8005402:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005404:	e008      	b.n	8005418 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005406:	f7fe f9b7 	bl	8003778 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b02      	cmp	r3, #2
 8005412:	d901      	bls.n	8005418 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e0ee      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005418:	f7ff fab3 	bl	8004982 <LL_RCC_HSI48_IsReady>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1f1      	bne.n	8005406 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 80e4 	beq.w	80055f4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800542c:	f7ff fc11 	bl	8004c52 <LL_RCC_GetSysClkSource>
 8005430:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543e:	2b02      	cmp	r3, #2
 8005440:	f040 80b4 	bne.w	80055ac <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f003 0203 	and.w	r2, r3, #3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544e:	429a      	cmp	r2, r3
 8005450:	d123      	bne.n	800549a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800545c:	429a      	cmp	r2, r3
 800545e:	d11c      	bne.n	800549a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	0a1b      	lsrs	r3, r3, #8
 8005464:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800546c:	429a      	cmp	r2, r3
 800546e:	d114      	bne.n	800549a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800547a:	429a      	cmp	r2, r3
 800547c:	d10d      	bne.n	800549a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005488:	429a      	cmp	r2, r3
 800548a:	d106      	bne.n	800549a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005496:	429a      	cmp	r2, r3
 8005498:	d05d      	beq.n	8005556 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	2b0c      	cmp	r3, #12
 800549e:	d058      	beq.n	8005552 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80054a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e0a1      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80054b2:	f7ff fc84 	bl	8004dbe <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80054b6:	f7fe f95f 	bl	8003778 <HAL_GetTick>
 80054ba:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054bc:	e008      	b.n	80054d0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054be:	f7fe f95b 	bl	8003778 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d901      	bls.n	80054d0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e092      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1ef      	bne.n	80054be <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	4b30      	ldr	r3, [pc, #192]	; (80055a8 <HAL_RCC_OscConfig+0x68c>)
 80054e6:	4013      	ands	r3, r2
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054f0:	4311      	orrs	r1, r2
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054f6:	0212      	lsls	r2, r2, #8
 80054f8:	4311      	orrs	r1, r2
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80054fe:	4311      	orrs	r1, r2
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005504:	4311      	orrs	r1, r2
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800550a:	430a      	orrs	r2, r1
 800550c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005510:	4313      	orrs	r3, r2
 8005512:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005514:	f7ff fc44 	bl	8004da0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005526:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005528:	f7fe f926 	bl	8003778 <HAL_GetTick>
 800552c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800552e:	e008      	b.n	8005542 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005530:	f7fe f922 	bl	8003778 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e059      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d0ef      	beq.n	8005530 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005550:	e050      	b.n	80055f4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e04f      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d147      	bne.n	80055f4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005564:	f7ff fc1c 	bl	8004da0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005576:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005578:	f7fe f8fe 	bl	8003778 <HAL_GetTick>
 800557c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800557e:	e008      	b.n	8005592 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005580:	f7fe f8fa 	bl	8003778 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e031      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0ef      	beq.n	8005580 <HAL_RCC_OscConfig+0x664>
 80055a0:	e028      	b.n	80055f4 <HAL_RCC_OscConfig+0x6d8>
 80055a2:	bf00      	nop
 80055a4:	58000400 	.word	0x58000400
 80055a8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	2b0c      	cmp	r3, #12
 80055b0:	d01e      	beq.n	80055f0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055b2:	f7ff fc04 	bl	8004dbe <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b6:	f7fe f8df 	bl	8003778 <HAL_GetTick>
 80055ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055bc:	e008      	b.n	80055d0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055be:	f7fe f8db 	bl	8003778 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d901      	bls.n	80055d0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e012      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1ef      	bne.n	80055be <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80055de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055e8:	4b05      	ldr	r3, [pc, #20]	; (8005600 <HAL_RCC_OscConfig+0x6e4>)
 80055ea:	4013      	ands	r3, r2
 80055ec:	60cb      	str	r3, [r1, #12]
 80055ee:	e001      	b.n	80055f4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e000      	b.n	80055f6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3734      	adds	r7, #52	; 0x34
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd90      	pop	{r4, r7, pc}
 80055fe:	bf00      	nop
 8005600:	eefefffc 	.word	0xeefefffc

08005604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e12d      	b.n	8005874 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005618:	4b98      	ldr	r3, [pc, #608]	; (800587c <HAL_RCC_ClockConfig+0x278>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0307 	and.w	r3, r3, #7
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	429a      	cmp	r2, r3
 8005624:	d91b      	bls.n	800565e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005626:	4b95      	ldr	r3, [pc, #596]	; (800587c <HAL_RCC_ClockConfig+0x278>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f023 0207 	bic.w	r2, r3, #7
 800562e:	4993      	ldr	r1, [pc, #588]	; (800587c <HAL_RCC_ClockConfig+0x278>)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	4313      	orrs	r3, r2
 8005634:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005636:	f7fe f89f 	bl	8003778 <HAL_GetTick>
 800563a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800563c:	e008      	b.n	8005650 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800563e:	f7fe f89b 	bl	8003778 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e111      	b.n	8005874 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005650:	4b8a      	ldr	r3, [pc, #552]	; (800587c <HAL_RCC_ClockConfig+0x278>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0307 	and.w	r3, r3, #7
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	429a      	cmp	r2, r3
 800565c:	d1ef      	bne.n	800563e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d016      	beq.n	8005698 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	4618      	mov	r0, r3
 8005670:	f7ff fafb 	bl	8004c6a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005674:	f7fe f880 	bl	8003778 <HAL_GetTick>
 8005678:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800567a:	e008      	b.n	800568e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800567c:	f7fe f87c 	bl	8003778 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e0f2      	b.n	8005874 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800568e:	f7ff fbe8 	bl	8004e62 <LL_RCC_IsActiveFlag_HPRE>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0f1      	beq.n	800567c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0320 	and.w	r3, r3, #32
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d016      	beq.n	80056d2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7ff faf2 	bl	8004c92 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80056ae:	f7fe f863 	bl	8003778 <HAL_GetTick>
 80056b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80056b4:	e008      	b.n	80056c8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80056b6:	f7fe f85f 	bl	8003778 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d901      	bls.n	80056c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e0d5      	b.n	8005874 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80056c8:	f7ff fbdd 	bl	8004e86 <LL_RCC_IsActiveFlag_C2HPRE>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0f1      	beq.n	80056b6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d016      	beq.n	800570c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff faeb 	bl	8004cbe <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80056e8:	f7fe f846 	bl	8003778 <HAL_GetTick>
 80056ec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80056f0:	f7fe f842 	bl	8003778 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e0b8      	b.n	8005874 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005702:	f7ff fbd3 	bl	8004eac <LL_RCC_IsActiveFlag_SHDHPRE>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0f1      	beq.n	80056f0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0304 	and.w	r3, r3, #4
 8005714:	2b00      	cmp	r3, #0
 8005716:	d016      	beq.n	8005746 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	4618      	mov	r0, r3
 800571e:	f7ff fae5 	bl	8004cec <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005722:	f7fe f829 	bl	8003778 <HAL_GetTick>
 8005726:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005728:	e008      	b.n	800573c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800572a:	f7fe f825 	bl	8003778 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d901      	bls.n	800573c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e09b      	b.n	8005874 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800573c:	f7ff fbc9 	bl	8004ed2 <LL_RCC_IsActiveFlag_PPRE1>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0f1      	beq.n	800572a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0308 	and.w	r3, r3, #8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d017      	beq.n	8005782 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	4618      	mov	r0, r3
 800575a:	f7ff fadb 	bl	8004d14 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800575e:	f7fe f80b 	bl	8003778 <HAL_GetTick>
 8005762:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005764:	e008      	b.n	8005778 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005766:	f7fe f807 	bl	8003778 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d901      	bls.n	8005778 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e07d      	b.n	8005874 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005778:	f7ff fbbd 	bl	8004ef6 <LL_RCC_IsActiveFlag_PPRE2>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0f1      	beq.n	8005766 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d043      	beq.n	8005816 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2b02      	cmp	r3, #2
 8005794:	d106      	bne.n	80057a4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005796:	f7ff f87b 	bl	8004890 <LL_RCC_HSE_IsReady>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d11e      	bne.n	80057de <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e067      	b.n	8005874 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2b03      	cmp	r3, #3
 80057aa:	d106      	bne.n	80057ba <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80057ac:	f7ff fb16 	bl	8004ddc <LL_RCC_PLL_IsReady>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d113      	bne.n	80057de <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e05c      	b.n	8005874 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d106      	bne.n	80057d0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80057c2:	f7ff f9e3 	bl	8004b8c <LL_RCC_MSI_IsReady>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d108      	bne.n	80057de <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e051      	b.n	8005874 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80057d0:	f7ff f88e 	bl	80048f0 <LL_RCC_HSI_IsReady>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e04a      	b.n	8005874 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff fa21 	bl	8004c2a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057e8:	f7fd ffc6 	bl	8003778 <HAL_GetTick>
 80057ec:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ee:	e00a      	b.n	8005806 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057f0:	f7fd ffc2 	bl	8003778 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80057fe:	4293      	cmp	r3, r2
 8005800:	d901      	bls.n	8005806 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e036      	b.n	8005874 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005806:	f7ff fa24 	bl	8004c52 <LL_RCC_GetSysClkSource>
 800580a:	4602      	mov	r2, r0
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	429a      	cmp	r2, r3
 8005814:	d1ec      	bne.n	80057f0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005816:	4b19      	ldr	r3, [pc, #100]	; (800587c <HAL_RCC_ClockConfig+0x278>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0307 	and.w	r3, r3, #7
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	429a      	cmp	r2, r3
 8005822:	d21b      	bcs.n	800585c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005824:	4b15      	ldr	r3, [pc, #84]	; (800587c <HAL_RCC_ClockConfig+0x278>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f023 0207 	bic.w	r2, r3, #7
 800582c:	4913      	ldr	r1, [pc, #76]	; (800587c <HAL_RCC_ClockConfig+0x278>)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	4313      	orrs	r3, r2
 8005832:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005834:	f7fd ffa0 	bl	8003778 <HAL_GetTick>
 8005838:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800583a:	e008      	b.n	800584e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800583c:	f7fd ff9c 	bl	8003778 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e012      	b.n	8005874 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800584e:	4b0b      	ldr	r3, [pc, #44]	; (800587c <HAL_RCC_ClockConfig+0x278>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0307 	and.w	r3, r3, #7
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	429a      	cmp	r2, r3
 800585a:	d1ef      	bne.n	800583c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800585c:	f000 f87e 	bl	800595c <HAL_RCC_GetHCLKFreq>
 8005860:	4603      	mov	r3, r0
 8005862:	4a07      	ldr	r2, [pc, #28]	; (8005880 <HAL_RCC_ClockConfig+0x27c>)
 8005864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005866:	f7fd ff93 	bl	8003790 <HAL_GetTickPrio>
 800586a:	4603      	mov	r3, r0
 800586c:	4618      	mov	r0, r3
 800586e:	f7fd ff35 	bl	80036dc <HAL_InitTick>
 8005872:	4603      	mov	r3, r0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	58004000 	.word	0x58004000
 8005880:	20000008 	.word	0x20000008

08005884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005884:	b590      	push	{r4, r7, lr}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800588a:	f7ff f9e2 	bl	8004c52 <LL_RCC_GetSysClkSource>
 800588e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10a      	bne.n	80058ac <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005896:	f7ff f99e 	bl	8004bd6 <LL_RCC_MSI_GetRange>
 800589a:	4603      	mov	r3, r0
 800589c:	091b      	lsrs	r3, r3, #4
 800589e:	f003 030f 	and.w	r3, r3, #15
 80058a2:	4a2b      	ldr	r2, [pc, #172]	; (8005950 <HAL_RCC_GetSysClockFreq+0xcc>)
 80058a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	e04b      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d102      	bne.n	80058b8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058b2:	4b28      	ldr	r3, [pc, #160]	; (8005954 <HAL_RCC_GetSysClockFreq+0xd0>)
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	e045      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b08      	cmp	r3, #8
 80058bc:	d10a      	bne.n	80058d4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80058be:	f7fe ffb7 	bl	8004830 <LL_RCC_HSE_IsEnabledDiv2>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d102      	bne.n	80058ce <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80058c8:	4b22      	ldr	r3, [pc, #136]	; (8005954 <HAL_RCC_GetSysClockFreq+0xd0>)
 80058ca:	60fb      	str	r3, [r7, #12]
 80058cc:	e03a      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80058ce:	4b22      	ldr	r3, [pc, #136]	; (8005958 <HAL_RCC_GetSysClockFreq+0xd4>)
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	e037      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80058d4:	f7ff fab9 	bl	8004e4a <LL_RCC_PLL_GetMainSource>
 80058d8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d003      	beq.n	80058e8 <HAL_RCC_GetSysClockFreq+0x64>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2b03      	cmp	r3, #3
 80058e4:	d003      	beq.n	80058ee <HAL_RCC_GetSysClockFreq+0x6a>
 80058e6:	e00d      	b.n	8005904 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80058e8:	4b1a      	ldr	r3, [pc, #104]	; (8005954 <HAL_RCC_GetSysClockFreq+0xd0>)
 80058ea:	60bb      	str	r3, [r7, #8]
        break;
 80058ec:	e015      	b.n	800591a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80058ee:	f7fe ff9f 	bl	8004830 <LL_RCC_HSE_IsEnabledDiv2>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d102      	bne.n	80058fe <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80058f8:	4b16      	ldr	r3, [pc, #88]	; (8005954 <HAL_RCC_GetSysClockFreq+0xd0>)
 80058fa:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80058fc:	e00d      	b.n	800591a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80058fe:	4b16      	ldr	r3, [pc, #88]	; (8005958 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005900:	60bb      	str	r3, [r7, #8]
        break;
 8005902:	e00a      	b.n	800591a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005904:	f7ff f967 	bl	8004bd6 <LL_RCC_MSI_GetRange>
 8005908:	4603      	mov	r3, r0
 800590a:	091b      	lsrs	r3, r3, #4
 800590c:	f003 030f 	and.w	r3, r3, #15
 8005910:	4a0f      	ldr	r2, [pc, #60]	; (8005950 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005916:	60bb      	str	r3, [r7, #8]
        break;
 8005918:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800591a:	f7ff fa71 	bl	8004e00 <LL_RCC_PLL_GetN>
 800591e:	4602      	mov	r2, r0
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	fb03 f402 	mul.w	r4, r3, r2
 8005926:	f7ff fa84 	bl	8004e32 <LL_RCC_PLL_GetDivider>
 800592a:	4603      	mov	r3, r0
 800592c:	091b      	lsrs	r3, r3, #4
 800592e:	3301      	adds	r3, #1
 8005930:	fbb4 f4f3 	udiv	r4, r4, r3
 8005934:	f7ff fa71 	bl	8004e1a <LL_RCC_PLL_GetR>
 8005938:	4603      	mov	r3, r0
 800593a:	0f5b      	lsrs	r3, r3, #29
 800593c:	3301      	adds	r3, #1
 800593e:	fbb4 f3f3 	udiv	r3, r4, r3
 8005942:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005944:	68fb      	ldr	r3, [r7, #12]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	bd90      	pop	{r4, r7, pc}
 800594e:	bf00      	nop
 8005950:	0801005c 	.word	0x0801005c
 8005954:	00f42400 	.word	0x00f42400
 8005958:	01e84800 	.word	0x01e84800

0800595c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800595c:	b598      	push	{r3, r4, r7, lr}
 800595e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005960:	f7ff ff90 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 8005964:	4604      	mov	r4, r0
 8005966:	f7ff f9e9 	bl	8004d3c <LL_RCC_GetAHBPrescaler>
 800596a:	4603      	mov	r3, r0
 800596c:	091b      	lsrs	r3, r3, #4
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	4a03      	ldr	r2, [pc, #12]	; (8005980 <HAL_RCC_GetHCLKFreq+0x24>)
 8005974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005978:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800597c:	4618      	mov	r0, r3
 800597e:	bd98      	pop	{r3, r4, r7, pc}
 8005980:	0800fffc 	.word	0x0800fffc

08005984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005984:	b598      	push	{r3, r4, r7, lr}
 8005986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005988:	f7ff ffe8 	bl	800595c <HAL_RCC_GetHCLKFreq>
 800598c:	4604      	mov	r4, r0
 800598e:	f7ff f9ef 	bl	8004d70 <LL_RCC_GetAPB1Prescaler>
 8005992:	4603      	mov	r3, r0
 8005994:	0a1b      	lsrs	r3, r3, #8
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	4a04      	ldr	r2, [pc, #16]	; (80059ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800599c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059a0:	f003 031f 	and.w	r3, r3, #31
 80059a4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	bd98      	pop	{r3, r4, r7, pc}
 80059ac:	0801003c 	.word	0x0801003c

080059b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059b0:	b598      	push	{r3, r4, r7, lr}
 80059b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80059b4:	f7ff ffd2 	bl	800595c <HAL_RCC_GetHCLKFreq>
 80059b8:	4604      	mov	r4, r0
 80059ba:	f7ff f9e5 	bl	8004d88 <LL_RCC_GetAPB2Prescaler>
 80059be:	4603      	mov	r3, r0
 80059c0:	0adb      	lsrs	r3, r3, #11
 80059c2:	f003 0307 	and.w	r3, r3, #7
 80059c6:	4a04      	ldr	r2, [pc, #16]	; (80059d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80059c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059cc:	f003 031f 	and.w	r3, r3, #31
 80059d0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	bd98      	pop	{r3, r4, r7, pc}
 80059d8:	0801003c 	.word	0x0801003c

080059dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80059dc:	b590      	push	{r4, r7, lr}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2bb0      	cmp	r3, #176	; 0xb0
 80059e8:	d903      	bls.n	80059f2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80059ea:	4b15      	ldr	r3, [pc, #84]	; (8005a40 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80059ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	e007      	b.n	8005a02 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	091b      	lsrs	r3, r3, #4
 80059f6:	f003 030f 	and.w	r3, r3, #15
 80059fa:	4a11      	ldr	r2, [pc, #68]	; (8005a40 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80059fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a00:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005a02:	f7ff f9a7 	bl	8004d54 <LL_RCC_GetAHB4Prescaler>
 8005a06:	4603      	mov	r3, r0
 8005a08:	091b      	lsrs	r3, r3, #4
 8005a0a:	f003 030f 	and.w	r3, r3, #15
 8005a0e:	4a0d      	ldr	r2, [pc, #52]	; (8005a44 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	4a0a      	ldr	r2, [pc, #40]	; (8005a48 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005a20:	fba2 2303 	umull	r2, r3, r2, r3
 8005a24:	0c9c      	lsrs	r4, r3, #18
 8005a26:	f7fe fef5 	bl	8004814 <HAL_PWREx_GetVoltageRange>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4620      	mov	r0, r4
 8005a30:	f000 f80c 	bl	8005a4c <RCC_SetFlashLatency>
 8005a34:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd90      	pop	{r4, r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	0801005c 	.word	0x0801005c
 8005a44:	0800fffc 	.word	0x0800fffc
 8005a48:	431bde83 	.word	0x431bde83

08005a4c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005a4c:	b590      	push	{r4, r7, lr}
 8005a4e:	b093      	sub	sp, #76	; 0x4c
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005a56:	4b37      	ldr	r3, [pc, #220]	; (8005b34 <RCC_SetFlashLatency+0xe8>)
 8005a58:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005a5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005a62:	4a35      	ldr	r2, [pc, #212]	; (8005b38 <RCC_SetFlashLatency+0xec>)
 8005a64:	f107 031c 	add.w	r3, r7, #28
 8005a68:	ca07      	ldmia	r2, {r0, r1, r2}
 8005a6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005a6e:	4b33      	ldr	r3, [pc, #204]	; (8005b3c <RCC_SetFlashLatency+0xf0>)
 8005a70:	f107 040c 	add.w	r4, r7, #12
 8005a74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a84:	d11a      	bne.n	8005abc <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005a86:	2300      	movs	r3, #0
 8005a88:	643b      	str	r3, [r7, #64]	; 0x40
 8005a8a:	e013      	b.n	8005ab4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	3348      	adds	r3, #72	; 0x48
 8005a92:	443b      	add	r3, r7
 8005a94:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d807      	bhi.n	8005aae <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	3348      	adds	r3, #72	; 0x48
 8005aa4:	443b      	add	r3, r7
 8005aa6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005aaa:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005aac:	e020      	b.n	8005af0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	643b      	str	r3, [r7, #64]	; 0x40
 8005ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	d9e8      	bls.n	8005a8c <RCC_SetFlashLatency+0x40>
 8005aba:	e019      	b.n	8005af0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005abc:	2300      	movs	r3, #0
 8005abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ac0:	e013      	b.n	8005aea <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	3348      	adds	r3, #72	; 0x48
 8005ac8:	443b      	add	r3, r7
 8005aca:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d807      	bhi.n	8005ae4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	3348      	adds	r3, #72	; 0x48
 8005ada:	443b      	add	r3, r7
 8005adc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005ae0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005ae2:	e005      	b.n	8005af0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d9e8      	bls.n	8005ac2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005af0:	4b13      	ldr	r3, [pc, #76]	; (8005b40 <RCC_SetFlashLatency+0xf4>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f023 0207 	bic.w	r2, r3, #7
 8005af8:	4911      	ldr	r1, [pc, #68]	; (8005b40 <RCC_SetFlashLatency+0xf4>)
 8005afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005afc:	4313      	orrs	r3, r2
 8005afe:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b00:	f7fd fe3a 	bl	8003778 <HAL_GetTick>
 8005b04:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005b06:	e008      	b.n	8005b1a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b08:	f7fd fe36 	bl	8003778 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d901      	bls.n	8005b1a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e007      	b.n	8005b2a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005b1a:	4b09      	ldr	r3, [pc, #36]	; (8005b40 <RCC_SetFlashLatency+0xf4>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0307 	and.w	r3, r3, #7
 8005b22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d1ef      	bne.n	8005b08 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	374c      	adds	r7, #76	; 0x4c
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd90      	pop	{r4, r7, pc}
 8005b32:	bf00      	nop
 8005b34:	0800ed7c 	.word	0x0800ed7c
 8005b38:	0800ed8c 	.word	0x0800ed8c
 8005b3c:	0800ed98 	.word	0x0800ed98
 8005b40:	58004000 	.word	0x58004000

08005b44 <LL_RCC_LSE_IsEnabled>:
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d101      	bne.n	8005b5c <LL_RCC_LSE_IsEnabled+0x18>
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e000      	b.n	8005b5e <LL_RCC_LSE_IsEnabled+0x1a>
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <LL_RCC_LSE_IsReady>:
{
 8005b68:	b480      	push	{r7}
 8005b6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b74:	f003 0302 	and.w	r3, r3, #2
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d101      	bne.n	8005b80 <LL_RCC_LSE_IsReady+0x18>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e000      	b.n	8005b82 <LL_RCC_LSE_IsReady+0x1a>
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <LL_RCC_MSI_EnablePLLMode>:
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b9a:	f043 0304 	orr.w	r3, r3, #4
 8005b9e:	6013      	str	r3, [r2, #0]
}
 8005ba0:	bf00      	nop
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <LL_RCC_SetRFWKPClockSource>:
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005bbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005bca:	bf00      	nop
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <LL_RCC_SetSMPSClockSource>:
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be4:	f023 0203 	bic.w	r2, r3, #3
 8005be8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005bf2:	bf00      	nop
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <LL_RCC_SetSMPSPrescaler>:
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <LL_RCC_SetUSARTClockSource>:
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c36:	f023 0203 	bic.w	r2, r3, #3
 8005c3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005c46:	bf00      	nop
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr

08005c52 <LL_RCC_SetLPUARTClockSource>:
{
 8005c52:	b480      	push	{r7}
 8005c54:	b083      	sub	sp, #12
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005c72:	bf00      	nop
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <LL_RCC_SetI2CClockSource>:
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	091b      	lsrs	r3, r3, #4
 8005c92:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005c96:	43db      	mvns	r3, r3
 8005c98:	401a      	ands	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	011b      	lsls	r3, r3, #4
 8005c9e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005ca2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <LL_RCC_SetLPTIMClockSource>:
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cc4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	0c1b      	lsrs	r3, r3, #16
 8005ccc:	041b      	lsls	r3, r3, #16
 8005cce:	43db      	mvns	r3, r3
 8005cd0:	401a      	ands	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	041b      	lsls	r3, r3, #16
 8005cd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <LL_RCC_SetSAIClockSource>:
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cfc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <LL_RCC_SetRNGClockSource>:
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d28:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005d2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <LL_RCC_SetCLK48ClockSource>:
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d54:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <LL_RCC_SetUSBClockSource>:
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7ff ffe3 	bl	8005d44 <LL_RCC_SetCLK48ClockSource>
}
 8005d7e:	bf00      	nop
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <LL_RCC_SetADCClockSource>:
{
 8005d86:	b480      	push	{r7}
 8005d88:	b083      	sub	sp, #12
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <LL_RCC_SetRTCClockSource>:
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005dd2:	bf00      	nop
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <LL_RCC_GetRTCClockSource>:
{
 8005dde:	b480      	push	{r7}
 8005de0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <LL_RCC_ForceBackupDomainReset>:
{
 8005df8:	b480      	push	{r7}
 8005dfa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005e10:	bf00      	nop
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <LL_RCC_ReleaseBackupDomainReset>:
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005e32:	bf00      	nop
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <LL_RCC_PLLSAI1_Enable>:
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e4e:	6013      	str	r3, [r2, #0]
}
 8005e50:	bf00      	nop
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <LL_RCC_PLLSAI1_Disable>:
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e6c:	6013      	str	r3, [r2, #0]
}
 8005e6e:	bf00      	nop
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <LL_RCC_PLLSAI1_IsReady>:
{
 8005e78:	b480      	push	{r7}
 8005e7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e8a:	d101      	bne.n	8005e90 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e000      	b.n	8005e92 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b088      	sub	sp, #32
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d034      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ec0:	d021      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005ec2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ec6:	d81b      	bhi.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ec8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ecc:	d01d      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005ece:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ed2:	d815      	bhi.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00b      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005ed8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005edc:	d110      	bne.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eec:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005eee:	e00d      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	3304      	adds	r3, #4
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f000 f94d 	bl	8006194 <RCCEx_PLLSAI1_ConfigNP>
 8005efa:	4603      	mov	r3, r0
 8005efc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005efe:	e005      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	77fb      	strb	r3, [r7, #31]
        break;
 8005f04:	e002      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005f06:	bf00      	nop
 8005f08:	e000      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f0c:	7ffb      	ldrb	r3, [r7, #31]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d105      	bne.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7ff fee8 	bl	8005cec <LL_RCC_SetSAIClockSource>
 8005f1c:	e001      	b.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f1e:	7ffb      	ldrb	r3, [r7, #31]
 8005f20:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d046      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005f2e:	f7ff ff56 	bl	8005dde <LL_RCC_GetRTCClockSource>
 8005f32:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d03c      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005f3e:	f7fe fc59 	bl	80047f4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d105      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7ff ff30 	bl	8005db2 <LL_RCC_SetRTCClockSource>
 8005f52:	e02e      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f5c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005f5e:	f7ff ff4b 	bl	8005df8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005f62:	f7ff ff5a 	bl	8005e1a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f70:	4313      	orrs	r3, r2
 8005f72:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005f74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005f7e:	f7ff fde1 	bl	8005b44 <LL_RCC_LSE_IsEnabled>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d114      	bne.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f88:	f7fd fbf6 	bl	8003778 <HAL_GetTick>
 8005f8c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005f8e:	e00b      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f90:	f7fd fbf2 	bl	8003778 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d902      	bls.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	77fb      	strb	r3, [r7, #31]
              break;
 8005fa6:	e004      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005fa8:	f7ff fdde 	bl	8005b68 <LL_RCC_LSE_IsReady>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d1ee      	bne.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005fb2:	7ffb      	ldrb	r3, [r7, #31]
 8005fb4:	77bb      	strb	r3, [r7, #30]
 8005fb6:	e001      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb8:	7ffb      	ldrb	r3, [r7, #31]
 8005fba:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d004      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7ff fe2a 	bl	8005c26 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d004      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7ff fe35 	bl	8005c52 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0310 	and.w	r3, r3, #16
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d004      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7ff fe5d 	bl	8005cb8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0320 	and.w	r3, r3, #32
 8006006:	2b00      	cmp	r3, #0
 8006008:	d004      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff fe52 	bl	8005cb8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0304 	and.w	r3, r3, #4
 800601c:	2b00      	cmp	r3, #0
 800601e:	d004      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff fe2a 	bl	8005c7e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0308 	and.w	r3, r3, #8
 8006032:	2b00      	cmp	r3, #0
 8006034:	d004      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603a:	4618      	mov	r0, r3
 800603c:	f7ff fe1f 	bl	8005c7e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006048:	2b00      	cmp	r3, #0
 800604a:	d022      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006050:	4618      	mov	r0, r3
 8006052:	f7ff fe8d 	bl	8005d70 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800605e:	d107      	bne.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800606a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800606e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006074:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006078:	d10b      	bne.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	3304      	adds	r3, #4
 800607e:	4618      	mov	r0, r3
 8006080:	f000 f8e3 	bl	800624a <RCCEx_PLLSAI1_ConfigNQ>
 8006084:	4603      	mov	r3, r0
 8006086:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006088:	7ffb      	ldrb	r3, [r7, #31]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800608e:	7ffb      	ldrb	r3, [r7, #31]
 8006090:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800609a:	2b00      	cmp	r3, #0
 800609c:	d02b      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a6:	d008      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060b0:	d003      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d105      	bne.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060be:	4618      	mov	r0, r3
 80060c0:	f7ff fe2a 	bl	8005d18 <LL_RCC_SetRNGClockSource>
 80060c4:	e00a      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x240>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	2000      	movs	r0, #0
 80060d2:	f7ff fe21 	bl	8005d18 <LL_RCC_SetRNGClockSource>
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f7ff fe34 	bl	8005d44 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80060e4:	d107      	bne.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80060e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060f4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d022      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006106:	4618      	mov	r0, r3
 8006108:	f7ff fe3d 	bl	8005d86 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006114:	d107      	bne.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006124:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800612e:	d10b      	bne.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	3304      	adds	r3, #4
 8006134:	4618      	mov	r0, r3
 8006136:	f000 f8e3 	bl	8006300 <RCCEx_PLLSAI1_ConfigNR>
 800613a:	4603      	mov	r3, r0
 800613c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800613e:	7ffb      	ldrb	r3, [r7, #31]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006144:	7ffb      	ldrb	r3, [r7, #31]
 8006146:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d004      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006158:	4618      	mov	r0, r3
 800615a:	f7ff fd26 	bl	8005baa <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d009      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800616e:	4618      	mov	r0, r3
 8006170:	f7ff fd45 	bl	8005bfe <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006178:	4618      	mov	r0, r3
 800617a:	f7ff fd2c 	bl	8005bd6 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800617e:	7fbb      	ldrb	r3, [r7, #30]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3720      	adds	r7, #32
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800618c:	f7ff fcfe 	bl	8005b8c <LL_RCC_MSI_EnablePLLMode>
}
 8006190:	bf00      	nop
 8006192:	bd80      	pop	{r7, pc}

08006194 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800619c:	2300      	movs	r3, #0
 800619e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80061a0:	f7ff fe5b 	bl	8005e5a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80061a4:	f7fd fae8 	bl	8003778 <HAL_GetTick>
 80061a8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80061aa:	e009      	b.n	80061c0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061ac:	f7fd fae4 	bl	8003778 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d902      	bls.n	80061c0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	73fb      	strb	r3, [r7, #15]
      break;
 80061be:	e004      	b.n	80061ca <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80061c0:	f7ff fe5a 	bl	8005e78 <LL_RCC_PLLSAI1_IsReady>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1f0      	bne.n	80061ac <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d137      	bne.n	8006240 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80061d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	021b      	lsls	r3, r3, #8
 80061e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061e4:	4313      	orrs	r3, r2
 80061e6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80061e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061fa:	4313      	orrs	r3, r2
 80061fc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80061fe:	f7ff fe1d 	bl	8005e3c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006202:	f7fd fab9 	bl	8003778 <HAL_GetTick>
 8006206:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006208:	e009      	b.n	800621e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800620a:	f7fd fab5 	bl	8003778 <HAL_GetTick>
 800620e:	4602      	mov	r2, r0
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	2b02      	cmp	r3, #2
 8006216:	d902      	bls.n	800621e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	73fb      	strb	r3, [r7, #15]
        break;
 800621c:	e004      	b.n	8006228 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800621e:	f7ff fe2b 	bl	8005e78 <LL_RCC_PLLSAI1_IsReady>
 8006222:	4603      	mov	r3, r0
 8006224:	2b01      	cmp	r3, #1
 8006226:	d1f0      	bne.n	800620a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006228:	7bfb      	ldrb	r3, [r7, #15]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d108      	bne.n	8006240 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800622e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006232:	691a      	ldr	r2, [r3, #16]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800623c:	4313      	orrs	r3, r2
 800623e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006240:	7bfb      	ldrb	r3, [r7, #15]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b084      	sub	sp, #16
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006252:	2300      	movs	r3, #0
 8006254:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006256:	f7ff fe00 	bl	8005e5a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800625a:	f7fd fa8d 	bl	8003778 <HAL_GetTick>
 800625e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006260:	e009      	b.n	8006276 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006262:	f7fd fa89 	bl	8003778 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	2b02      	cmp	r3, #2
 800626e:	d902      	bls.n	8006276 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	73fb      	strb	r3, [r7, #15]
      break;
 8006274:	e004      	b.n	8006280 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006276:	f7ff fdff 	bl	8005e78 <LL_RCC_PLLSAI1_IsReady>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1f0      	bne.n	8006262 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006280:	7bfb      	ldrb	r3, [r7, #15]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d137      	bne.n	80062f6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	021b      	lsls	r3, r3, #8
 8006296:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800629a:	4313      	orrs	r3, r2
 800629c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800629e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062b0:	4313      	orrs	r3, r2
 80062b2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80062b4:	f7ff fdc2 	bl	8005e3c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062b8:	f7fd fa5e 	bl	8003778 <HAL_GetTick>
 80062bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80062be:	e009      	b.n	80062d4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80062c0:	f7fd fa5a 	bl	8003778 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d902      	bls.n	80062d4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	73fb      	strb	r3, [r7, #15]
        break;
 80062d2:	e004      	b.n	80062de <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80062d4:	f7ff fdd0 	bl	8005e78 <LL_RCC_PLLSAI1_IsReady>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d1f0      	bne.n	80062c0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80062de:	7bfb      	ldrb	r3, [r7, #15]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d108      	bne.n	80062f6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80062e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062e8:	691a      	ldr	r2, [r3, #16]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062f2:	4313      	orrs	r3, r2
 80062f4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006308:	2300      	movs	r3, #0
 800630a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800630c:	f7ff fda5 	bl	8005e5a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006310:	f7fd fa32 	bl	8003778 <HAL_GetTick>
 8006314:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006316:	e009      	b.n	800632c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006318:	f7fd fa2e 	bl	8003778 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	2b02      	cmp	r3, #2
 8006324:	d902      	bls.n	800632c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	73fb      	strb	r3, [r7, #15]
      break;
 800632a:	e004      	b.n	8006336 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800632c:	f7ff fda4 	bl	8005e78 <LL_RCC_PLLSAI1_IsReady>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1f0      	bne.n	8006318 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006336:	7bfb      	ldrb	r3, [r7, #15]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d137      	bne.n	80063ac <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800633c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	021b      	lsls	r3, r3, #8
 800634c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006350:	4313      	orrs	r3, r2
 8006352:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006366:	4313      	orrs	r3, r2
 8006368:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800636a:	f7ff fd67 	bl	8005e3c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800636e:	f7fd fa03 	bl	8003778 <HAL_GetTick>
 8006372:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006374:	e009      	b.n	800638a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006376:	f7fd f9ff 	bl	8003778 <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	2b02      	cmp	r3, #2
 8006382:	d902      	bls.n	800638a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	73fb      	strb	r3, [r7, #15]
        break;
 8006388:	e004      	b.n	8006394 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800638a:	f7ff fd75 	bl	8005e78 <LL_RCC_PLLSAI1_IsReady>
 800638e:	4603      	mov	r3, r0
 8006390:	2b01      	cmp	r3, #1
 8006392:	d1f0      	bne.n	8006376 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006394:	7bfb      	ldrb	r3, [r7, #15]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d108      	bne.n	80063ac <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800639a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800639e:	691a      	ldr	r2, [r3, #16]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063a8:	4313      	orrs	r3, r2
 80063aa:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80063ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
	...

080063b8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e09f      	b.n	800650a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d106      	bne.n	80063e4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7fc fe4c 	bl	800307c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2202      	movs	r2, #2
 80063e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80063ec:	4b49      	ldr	r3, [pc, #292]	; (8006514 <HAL_RTC_Init+0x15c>)
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f003 0310 	and.w	r3, r3, #16
 80063f4:	2b10      	cmp	r3, #16
 80063f6:	d07e      	beq.n	80064f6 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	22ca      	movs	r2, #202	; 0xca
 80063fe:	625a      	str	r2, [r3, #36]	; 0x24
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2253      	movs	r2, #83	; 0x53
 8006406:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 f8ab 	bl	8006564 <RTC_EnterInitMode>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00a      	beq.n	800642a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	22ff      	movs	r2, #255	; 0xff
 800641a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2204      	movs	r2, #4
 8006420:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	73fb      	strb	r3, [r7, #15]
 8006428:	e067      	b.n	80064fa <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	6812      	ldr	r2, [r2, #0]
 8006434:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800643c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6899      	ldr	r1, [r3, #8]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	431a      	orrs	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	431a      	orrs	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	68d2      	ldr	r2, [r2, #12]
 8006464:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6919      	ldr	r1, [r3, #16]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	041a      	lsls	r2, r3, #16
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68da      	ldr	r2, [r3, #12]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006488:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f022 0203 	bic.w	r2, r2, #3
 8006498:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	69da      	ldr	r2, [r3, #28]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	431a      	orrs	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f003 0320 	and.w	r3, r3, #32
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d113      	bne.n	80064e8 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f829 	bl	8006518 <HAL_RTC_WaitForSynchro>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00d      	beq.n	80064e8 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	22ff      	movs	r2, #255	; 0xff
 80064d2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2204      	movs	r2, #4
 80064d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e010      	b.n	800650a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	22ff      	movs	r2, #255	; 0xff
 80064ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80064f0:	2300      	movs	r3, #0
 80064f2:	73fb      	strb	r3, [r7, #15]
 80064f4:	e001      	b.n	80064fa <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80064f6:	2300      	movs	r3, #0
 80064f8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80064fa:	7bfb      	ldrb	r3, [r7, #15]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d103      	bne.n	8006508 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8006508:	7bfb      	ldrb	r3, [r7, #15]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	40002800 	.word	0x40002800

08006518 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68da      	ldr	r2, [r3, #12]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800652e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006530:	f7fd f922 	bl	8003778 <HAL_GetTick>
 8006534:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006536:	e009      	b.n	800654c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006538:	f7fd f91e 	bl	8003778 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006546:	d901      	bls.n	800654c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e007      	b.n	800655c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b00      	cmp	r3, #0
 8006558:	d0ee      	beq.n	8006538 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006576:	2b00      	cmp	r3, #0
 8006578:	d119      	bne.n	80065ae <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f04f 32ff 	mov.w	r2, #4294967295
 8006582:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006584:	f7fd f8f8 	bl	8003778 <HAL_GetTick>
 8006588:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800658a:	e009      	b.n	80065a0 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800658c:	f7fd f8f4 	bl	8003778 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800659a:	d901      	bls.n	80065a0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e007      	b.n	80065b0 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d0ee      	beq.n	800658c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d101      	bne.n	80065d2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80065ce:	2302      	movs	r3, #2
 80065d0:	e0a8      	b.n	8006724 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2202      	movs	r2, #2
 80065de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	22ca      	movs	r2, #202	; 0xca
 80065e8:	625a      	str	r2, [r3, #36]	; 0x24
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2253      	movs	r2, #83	; 0x53
 80065f0:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d020      	beq.n	8006642 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8006600:	f7fd f8ba 	bl	8003778 <HAL_GetTick>
 8006604:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006606:	e015      	b.n	8006634 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006608:	f7fd f8b6 	bl	8003778 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006616:	d90d      	bls.n	8006634 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	22ff      	movs	r2, #255	; 0xff
 800661e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2203      	movs	r2, #3
 8006624:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e077      	b.n	8006724 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	f003 0304 	and.w	r3, r3, #4
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1e2      	bne.n	8006608 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006650:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	b2da      	uxtb	r2, r3
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006662:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006664:	f7fd f888 	bl	8003778 <HAL_GetTick>
 8006668:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800666a:	e015      	b.n	8006698 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800666c:	f7fd f884 	bl	8003778 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800667a:	d90d      	bls.n	8006698 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	22ff      	movs	r2, #255	; 0xff
 8006682:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2203      	movs	r2, #3
 8006688:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e045      	b.n	8006724 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	f003 0304 	and.w	r3, r3, #4
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d0e2      	beq.n	800666c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 0207 	bic.w	r2, r2, #7
 80066bc:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6899      	ldr	r1, [r3, #8]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80066ce:	4b17      	ldr	r3, [pc, #92]	; (800672c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80066d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066d4:	4a15      	ldr	r2, [pc, #84]	; (800672c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80066d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066da:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80066de:	4b13      	ldr	r3, [pc, #76]	; (800672c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a12      	ldr	r2, [pc, #72]	; (800672c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80066e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066e8:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689a      	ldr	r2, [r3, #8]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066f8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006708:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	22ff      	movs	r2, #255	; 0xff
 8006710:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3718      	adds	r7, #24
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	58000800 	.word	0x58000800

08006730 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e049      	b.n	80067d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d106      	bne.n	800675c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7fc fcf0 	bl	800313c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2202      	movs	r2, #2
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	3304      	adds	r3, #4
 800676c:	4619      	mov	r1, r3
 800676e:	4610      	mov	r0, r2
 8006770:	f000 fbb8 	bl	8006ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b082      	sub	sp, #8
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d101      	bne.n	80067f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e049      	b.n	8006884 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d106      	bne.n	800680a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f841 	bl	800688c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2202      	movs	r2, #2
 800680e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	3304      	adds	r3, #4
 800681a:	4619      	mov	r1, r3
 800681c:	4610      	mov	r0, r2
 800681e:	f000 fb61 	bl	8006ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3708      	adds	r7, #8
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d109      	bne.n	80068c4 <HAL_TIM_PWM_Start+0x24>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	bf14      	ite	ne
 80068bc:	2301      	movne	r3, #1
 80068be:	2300      	moveq	r3, #0
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	e03c      	b.n	800693e <HAL_TIM_PWM_Start+0x9e>
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	d109      	bne.n	80068de <HAL_TIM_PWM_Start+0x3e>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	bf14      	ite	ne
 80068d6:	2301      	movne	r3, #1
 80068d8:	2300      	moveq	r3, #0
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	e02f      	b.n	800693e <HAL_TIM_PWM_Start+0x9e>
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	2b08      	cmp	r3, #8
 80068e2:	d109      	bne.n	80068f8 <HAL_TIM_PWM_Start+0x58>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	bf14      	ite	ne
 80068f0:	2301      	movne	r3, #1
 80068f2:	2300      	moveq	r3, #0
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	e022      	b.n	800693e <HAL_TIM_PWM_Start+0x9e>
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	2b0c      	cmp	r3, #12
 80068fc:	d109      	bne.n	8006912 <HAL_TIM_PWM_Start+0x72>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b01      	cmp	r3, #1
 8006908:	bf14      	ite	ne
 800690a:	2301      	movne	r3, #1
 800690c:	2300      	moveq	r3, #0
 800690e:	b2db      	uxtb	r3, r3
 8006910:	e015      	b.n	800693e <HAL_TIM_PWM_Start+0x9e>
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2b10      	cmp	r3, #16
 8006916:	d109      	bne.n	800692c <HAL_TIM_PWM_Start+0x8c>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b01      	cmp	r3, #1
 8006922:	bf14      	ite	ne
 8006924:	2301      	movne	r3, #1
 8006926:	2300      	moveq	r3, #0
 8006928:	b2db      	uxtb	r3, r3
 800692a:	e008      	b.n	800693e <HAL_TIM_PWM_Start+0x9e>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b01      	cmp	r3, #1
 8006936:	bf14      	ite	ne
 8006938:	2301      	movne	r3, #1
 800693a:	2300      	moveq	r3, #0
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e079      	b.n	8006a3a <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d104      	bne.n	8006956 <HAL_TIM_PWM_Start+0xb6>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2202      	movs	r2, #2
 8006950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006954:	e023      	b.n	800699e <HAL_TIM_PWM_Start+0xfe>
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2b04      	cmp	r3, #4
 800695a:	d104      	bne.n	8006966 <HAL_TIM_PWM_Start+0xc6>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006964:	e01b      	b.n	800699e <HAL_TIM_PWM_Start+0xfe>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b08      	cmp	r3, #8
 800696a:	d104      	bne.n	8006976 <HAL_TIM_PWM_Start+0xd6>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2202      	movs	r2, #2
 8006970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006974:	e013      	b.n	800699e <HAL_TIM_PWM_Start+0xfe>
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2b0c      	cmp	r3, #12
 800697a:	d104      	bne.n	8006986 <HAL_TIM_PWM_Start+0xe6>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2202      	movs	r2, #2
 8006980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006984:	e00b      	b.n	800699e <HAL_TIM_PWM_Start+0xfe>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b10      	cmp	r3, #16
 800698a:	d104      	bne.n	8006996 <HAL_TIM_PWM_Start+0xf6>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2202      	movs	r2, #2
 8006990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006994:	e003      	b.n	800699e <HAL_TIM_PWM_Start+0xfe>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2202      	movs	r2, #2
 800699a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2201      	movs	r2, #1
 80069a4:	6839      	ldr	r1, [r7, #0]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 fd8a 	bl	80074c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a24      	ldr	r2, [pc, #144]	; (8006a44 <HAL_TIM_PWM_Start+0x1a4>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d009      	beq.n	80069ca <HAL_TIM_PWM_Start+0x12a>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a23      	ldr	r2, [pc, #140]	; (8006a48 <HAL_TIM_PWM_Start+0x1a8>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d004      	beq.n	80069ca <HAL_TIM_PWM_Start+0x12a>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a21      	ldr	r2, [pc, #132]	; (8006a4c <HAL_TIM_PWM_Start+0x1ac>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d101      	bne.n	80069ce <HAL_TIM_PWM_Start+0x12e>
 80069ca:	2301      	movs	r3, #1
 80069cc:	e000      	b.n	80069d0 <HAL_TIM_PWM_Start+0x130>
 80069ce:	2300      	movs	r3, #0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d007      	beq.n	80069e4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069e2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a16      	ldr	r2, [pc, #88]	; (8006a44 <HAL_TIM_PWM_Start+0x1a4>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d004      	beq.n	80069f8 <HAL_TIM_PWM_Start+0x158>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f6:	d115      	bne.n	8006a24 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689a      	ldr	r2, [r3, #8]
 80069fe:	4b14      	ldr	r3, [pc, #80]	; (8006a50 <HAL_TIM_PWM_Start+0x1b0>)
 8006a00:	4013      	ands	r3, r2
 8006a02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2b06      	cmp	r3, #6
 8006a08:	d015      	beq.n	8006a36 <HAL_TIM_PWM_Start+0x196>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a10:	d011      	beq.n	8006a36 <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f042 0201 	orr.w	r2, r2, #1
 8006a20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a22:	e008      	b.n	8006a36 <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f042 0201 	orr.w	r2, r2, #1
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	e000      	b.n	8006a38 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	40012c00 	.word	0x40012c00
 8006a48:	40014400 	.word	0x40014400
 8006a4c:	40014800 	.word	0x40014800
 8006a50:	00010007 	.word	0x00010007

08006a54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e097      	b.n	8006b98 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d106      	bne.n	8006a82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f7fc fb31 	bl	80030e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2202      	movs	r2, #2
 8006a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	6812      	ldr	r2, [r2, #0]
 8006a94:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006a98:	f023 0307 	bic.w	r3, r3, #7
 8006a9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	f000 fa1b 	bl	8006ee4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6a1b      	ldr	r3, [r3, #32]
 8006ac4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ad6:	f023 0303 	bic.w	r3, r3, #3
 8006ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	689a      	ldr	r2, [r3, #8]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	699b      	ldr	r3, [r3, #24]
 8006ae4:	021b      	lsls	r3, r3, #8
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006af4:	f023 030c 	bic.w	r3, r3, #12
 8006af8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	68da      	ldr	r2, [r3, #12]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	69db      	ldr	r3, [r3, #28]
 8006b0e:	021b      	lsls	r3, r3, #8
 8006b10:	4313      	orrs	r3, r2
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	011a      	lsls	r2, r3, #4
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	031b      	lsls	r3, r3, #12
 8006b24:	4313      	orrs	r3, r2
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006b32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006b3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	695b      	ldr	r3, [r3, #20]
 8006b44:	011b      	lsls	r3, r3, #4
 8006b46:	4313      	orrs	r3, r2
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bb0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006bb8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bc0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bc8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d110      	bne.n	8006bf2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bd0:	7bfb      	ldrb	r3, [r7, #15]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d102      	bne.n	8006bdc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bd6:	7b7b      	ldrb	r3, [r7, #13]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d001      	beq.n	8006be0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e069      	b.n	8006cb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2202      	movs	r2, #2
 8006be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2202      	movs	r2, #2
 8006bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bf0:	e031      	b.n	8006c56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	2b04      	cmp	r3, #4
 8006bf6:	d110      	bne.n	8006c1a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bf8:	7bbb      	ldrb	r3, [r7, #14]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d102      	bne.n	8006c04 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bfe:	7b3b      	ldrb	r3, [r7, #12]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d001      	beq.n	8006c08 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e055      	b.n	8006cb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2202      	movs	r2, #2
 8006c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c18:	e01d      	b.n	8006c56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c1a:	7bfb      	ldrb	r3, [r7, #15]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d108      	bne.n	8006c32 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c20:	7bbb      	ldrb	r3, [r7, #14]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d105      	bne.n	8006c32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c26:	7b7b      	ldrb	r3, [r7, #13]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d102      	bne.n	8006c32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c2c:	7b3b      	ldrb	r3, [r7, #12]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d001      	beq.n	8006c36 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e03e      	b.n	8006cb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2202      	movs	r2, #2
 8006c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2202      	movs	r2, #2
 8006c42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2202      	movs	r2, #2
 8006c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2202      	movs	r2, #2
 8006c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d003      	beq.n	8006c64 <HAL_TIM_Encoder_Start+0xc4>
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	2b04      	cmp	r3, #4
 8006c60:	d008      	beq.n	8006c74 <HAL_TIM_Encoder_Start+0xd4>
 8006c62:	e00f      	b.n	8006c84 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 fc27 	bl	80074c0 <TIM_CCxChannelCmd>
      break;
 8006c72:	e016      	b.n	8006ca2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	2104      	movs	r1, #4
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 fc1f 	bl	80074c0 <TIM_CCxChannelCmd>
      break;
 8006c82:	e00e      	b.n	8006ca2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 fc17 	bl	80074c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2201      	movs	r2, #1
 8006c98:	2104      	movs	r1, #4
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 fc10 	bl	80074c0 <TIM_CCxChannelCmd>
      break;
 8006ca0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f042 0201 	orr.w	r2, r2, #1
 8006cb0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b086      	sub	sp, #24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d101      	bne.n	8006cda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	e0ff      	b.n	8006eda <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2b14      	cmp	r3, #20
 8006ce6:	f200 80f0 	bhi.w	8006eca <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006cea:	a201      	add	r2, pc, #4	; (adr r2, 8006cf0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf0:	08006d45 	.word	0x08006d45
 8006cf4:	08006ecb 	.word	0x08006ecb
 8006cf8:	08006ecb 	.word	0x08006ecb
 8006cfc:	08006ecb 	.word	0x08006ecb
 8006d00:	08006d85 	.word	0x08006d85
 8006d04:	08006ecb 	.word	0x08006ecb
 8006d08:	08006ecb 	.word	0x08006ecb
 8006d0c:	08006ecb 	.word	0x08006ecb
 8006d10:	08006dc7 	.word	0x08006dc7
 8006d14:	08006ecb 	.word	0x08006ecb
 8006d18:	08006ecb 	.word	0x08006ecb
 8006d1c:	08006ecb 	.word	0x08006ecb
 8006d20:	08006e07 	.word	0x08006e07
 8006d24:	08006ecb 	.word	0x08006ecb
 8006d28:	08006ecb 	.word	0x08006ecb
 8006d2c:	08006ecb 	.word	0x08006ecb
 8006d30:	08006e49 	.word	0x08006e49
 8006d34:	08006ecb 	.word	0x08006ecb
 8006d38:	08006ecb 	.word	0x08006ecb
 8006d3c:	08006ecb 	.word	0x08006ecb
 8006d40:	08006e89 	.word	0x08006e89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68b9      	ldr	r1, [r7, #8]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 f93a 	bl	8006fc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	699a      	ldr	r2, [r3, #24]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f042 0208 	orr.w	r2, r2, #8
 8006d5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	699a      	ldr	r2, [r3, #24]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f022 0204 	bic.w	r2, r2, #4
 8006d6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6999      	ldr	r1, [r3, #24]
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	691a      	ldr	r2, [r3, #16]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	619a      	str	r2, [r3, #24]
      break;
 8006d82:	e0a5      	b.n	8006ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68b9      	ldr	r1, [r7, #8]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 f996 	bl	80070bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	699a      	ldr	r2, [r3, #24]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	699a      	ldr	r2, [r3, #24]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6999      	ldr	r1, [r3, #24]
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	021a      	lsls	r2, r3, #8
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	619a      	str	r2, [r3, #24]
      break;
 8006dc4:	e084      	b.n	8006ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68b9      	ldr	r1, [r7, #8]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f000 f9ef 	bl	80071b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	69da      	ldr	r2, [r3, #28]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f042 0208 	orr.w	r2, r2, #8
 8006de0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	69da      	ldr	r2, [r3, #28]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 0204 	bic.w	r2, r2, #4
 8006df0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	69d9      	ldr	r1, [r3, #28]
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	691a      	ldr	r2, [r3, #16]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	430a      	orrs	r2, r1
 8006e02:	61da      	str	r2, [r3, #28]
      break;
 8006e04:	e064      	b.n	8006ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68b9      	ldr	r1, [r7, #8]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f000 fa47 	bl	80072a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	69da      	ldr	r2, [r3, #28]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	69da      	ldr	r2, [r3, #28]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	69d9      	ldr	r1, [r3, #28]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	021a      	lsls	r2, r3, #8
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	61da      	str	r2, [r3, #28]
      break;
 8006e46:	e043      	b.n	8006ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68b9      	ldr	r1, [r7, #8]
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f000 fa84 	bl	800735c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f042 0208 	orr.w	r2, r2, #8
 8006e62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f022 0204 	bic.w	r2, r2, #4
 8006e72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	691a      	ldr	r2, [r3, #16]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	430a      	orrs	r2, r1
 8006e84:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e86:	e023      	b.n	8006ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68b9      	ldr	r1, [r7, #8]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f000 fabc 	bl	800740c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ea2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eb2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	021a      	lsls	r2, r3, #8
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	430a      	orrs	r2, r1
 8006ec6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006ec8:	e002      	b.n	8006ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	75fb      	strb	r3, [r7, #23]
      break;
 8006ece:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3718      	adds	r7, #24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop

08006ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a30      	ldr	r2, [pc, #192]	; (8006fb8 <TIM_Base_SetConfig+0xd4>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d003      	beq.n	8006f04 <TIM_Base_SetConfig+0x20>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f02:	d108      	bne.n	8006f16 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a27      	ldr	r2, [pc, #156]	; (8006fb8 <TIM_Base_SetConfig+0xd4>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d00b      	beq.n	8006f36 <TIM_Base_SetConfig+0x52>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f24:	d007      	beq.n	8006f36 <TIM_Base_SetConfig+0x52>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a24      	ldr	r2, [pc, #144]	; (8006fbc <TIM_Base_SetConfig+0xd8>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d003      	beq.n	8006f36 <TIM_Base_SetConfig+0x52>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a23      	ldr	r2, [pc, #140]	; (8006fc0 <TIM_Base_SetConfig+0xdc>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d108      	bne.n	8006f48 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	689a      	ldr	r2, [r3, #8]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a12      	ldr	r2, [pc, #72]	; (8006fb8 <TIM_Base_SetConfig+0xd4>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d007      	beq.n	8006f84 <TIM_Base_SetConfig+0xa0>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a11      	ldr	r2, [pc, #68]	; (8006fbc <TIM_Base_SetConfig+0xd8>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d003      	beq.n	8006f84 <TIM_Base_SetConfig+0xa0>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a10      	ldr	r2, [pc, #64]	; (8006fc0 <TIM_Base_SetConfig+0xdc>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d103      	bne.n	8006f8c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	691a      	ldr	r2, [r3, #16]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d105      	bne.n	8006faa <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	f023 0201 	bic.w	r2, r3, #1
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	611a      	str	r2, [r3, #16]
  }
}
 8006faa:	bf00      	nop
 8006fac:	3714      	adds	r7, #20
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	40012c00 	.word	0x40012c00
 8006fbc:	40014400 	.word	0x40014400
 8006fc0:	40014800 	.word	0x40014800

08006fc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b087      	sub	sp, #28
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a1b      	ldr	r3, [r3, #32]
 8006fd8:	f023 0201 	bic.w	r2, r3, #1
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f023 0303 	bic.w	r3, r3, #3
 8006ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	4313      	orrs	r3, r2
 8007008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f023 0302 	bic.w	r3, r3, #2
 8007010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	4313      	orrs	r3, r2
 800701a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a24      	ldr	r2, [pc, #144]	; (80070b0 <TIM_OC1_SetConfig+0xec>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d007      	beq.n	8007034 <TIM_OC1_SetConfig+0x70>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a23      	ldr	r2, [pc, #140]	; (80070b4 <TIM_OC1_SetConfig+0xf0>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d003      	beq.n	8007034 <TIM_OC1_SetConfig+0x70>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a22      	ldr	r2, [pc, #136]	; (80070b8 <TIM_OC1_SetConfig+0xf4>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d10c      	bne.n	800704e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	f023 0308 	bic.w	r3, r3, #8
 800703a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	4313      	orrs	r3, r2
 8007044:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f023 0304 	bic.w	r3, r3, #4
 800704c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a17      	ldr	r2, [pc, #92]	; (80070b0 <TIM_OC1_SetConfig+0xec>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d007      	beq.n	8007066 <TIM_OC1_SetConfig+0xa2>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a17      	ldr	r2, [pc, #92]	; (80070b8 <TIM_OC1_SetConfig+0xf4>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d003      	beq.n	8007066 <TIM_OC1_SetConfig+0xa2>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a14      	ldr	r2, [pc, #80]	; (80070b4 <TIM_OC1_SetConfig+0xf0>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d111      	bne.n	800708a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800706c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	4313      	orrs	r3, r2
 800707e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	4313      	orrs	r3, r2
 8007088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	621a      	str	r2, [r3, #32]
}
 80070a4:	bf00      	nop
 80070a6:	371c      	adds	r7, #28
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	40012c00 	.word	0x40012c00
 80070b4:	40014800 	.word	0x40014800
 80070b8:	40014400 	.word	0x40014400

080070bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070bc:	b480      	push	{r7}
 80070be:	b087      	sub	sp, #28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a1b      	ldr	r3, [r3, #32]
 80070d0:	f023 0210 	bic.w	r2, r3, #16
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	021b      	lsls	r3, r3, #8
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	4313      	orrs	r3, r2
 8007102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	f023 0320 	bic.w	r3, r3, #32
 800710a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	011b      	lsls	r3, r3, #4
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	4313      	orrs	r3, r2
 8007116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a22      	ldr	r2, [pc, #136]	; (80071a4 <TIM_OC2_SetConfig+0xe8>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d10d      	bne.n	800713c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	011b      	lsls	r3, r3, #4
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	4313      	orrs	r3, r2
 8007132:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800713a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a19      	ldr	r2, [pc, #100]	; (80071a4 <TIM_OC2_SetConfig+0xe8>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d007      	beq.n	8007154 <TIM_OC2_SetConfig+0x98>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a18      	ldr	r2, [pc, #96]	; (80071a8 <TIM_OC2_SetConfig+0xec>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d003      	beq.n	8007154 <TIM_OC2_SetConfig+0x98>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a17      	ldr	r2, [pc, #92]	; (80071ac <TIM_OC2_SetConfig+0xf0>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d113      	bne.n	800717c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800715a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007162:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	4313      	orrs	r3, r2
 800716e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	4313      	orrs	r3, r2
 800717a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	621a      	str	r2, [r3, #32]
}
 8007196:	bf00      	nop
 8007198:	371c      	adds	r7, #28
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	40012c00 	.word	0x40012c00
 80071a8:	40014400 	.word	0x40014400
 80071ac:	40014800 	.word	0x40014800

080071b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b087      	sub	sp, #28
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a1b      	ldr	r3, [r3, #32]
 80071c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	69db      	ldr	r3, [r3, #28]
 80071d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f023 0303 	bic.w	r3, r3, #3
 80071ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	021b      	lsls	r3, r3, #8
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	4313      	orrs	r3, r2
 8007208:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a21      	ldr	r2, [pc, #132]	; (8007294 <TIM_OC3_SetConfig+0xe4>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d10d      	bne.n	800722e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007218:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	021b      	lsls	r3, r3, #8
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	4313      	orrs	r3, r2
 8007224:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800722c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a18      	ldr	r2, [pc, #96]	; (8007294 <TIM_OC3_SetConfig+0xe4>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d007      	beq.n	8007246 <TIM_OC3_SetConfig+0x96>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a17      	ldr	r2, [pc, #92]	; (8007298 <TIM_OC3_SetConfig+0xe8>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d003      	beq.n	8007246 <TIM_OC3_SetConfig+0x96>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a16      	ldr	r2, [pc, #88]	; (800729c <TIM_OC3_SetConfig+0xec>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d113      	bne.n	800726e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800724c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	011b      	lsls	r3, r3, #4
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	4313      	orrs	r3, r2
 8007260:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	011b      	lsls	r3, r3, #4
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	4313      	orrs	r3, r2
 800726c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	697a      	ldr	r2, [r7, #20]
 8007286:	621a      	str	r2, [r3, #32]
}
 8007288:	bf00      	nop
 800728a:	371c      	adds	r7, #28
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	40012c00 	.word	0x40012c00
 8007298:	40014400 	.word	0x40014400
 800729c:	40014800 	.word	0x40014800

080072a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b087      	sub	sp, #28
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a1b      	ldr	r3, [r3, #32]
 80072b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	69db      	ldr	r3, [r3, #28]
 80072c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	021b      	lsls	r3, r3, #8
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	031b      	lsls	r3, r3, #12
 80072f6:	693a      	ldr	r2, [r7, #16]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a14      	ldr	r2, [pc, #80]	; (8007350 <TIM_OC4_SetConfig+0xb0>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d007      	beq.n	8007314 <TIM_OC4_SetConfig+0x74>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a13      	ldr	r2, [pc, #76]	; (8007354 <TIM_OC4_SetConfig+0xb4>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d003      	beq.n	8007314 <TIM_OC4_SetConfig+0x74>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a12      	ldr	r2, [pc, #72]	; (8007358 <TIM_OC4_SetConfig+0xb8>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d109      	bne.n	8007328 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800731a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	019b      	lsls	r3, r3, #6
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	4313      	orrs	r3, r2
 8007326:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	621a      	str	r2, [r3, #32]
}
 8007342:	bf00      	nop
 8007344:	371c      	adds	r7, #28
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	40012c00 	.word	0x40012c00
 8007354:	40014400 	.word	0x40014400
 8007358:	40014800 	.word	0x40014800

0800735c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800735c:	b480      	push	{r7}
 800735e:	b087      	sub	sp, #28
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a1b      	ldr	r3, [r3, #32]
 8007370:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800738a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800738e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	4313      	orrs	r3, r2
 8007398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80073a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	041b      	lsls	r3, r3, #16
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a13      	ldr	r2, [pc, #76]	; (8007400 <TIM_OC5_SetConfig+0xa4>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d007      	beq.n	80073c6 <TIM_OC5_SetConfig+0x6a>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a12      	ldr	r2, [pc, #72]	; (8007404 <TIM_OC5_SetConfig+0xa8>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d003      	beq.n	80073c6 <TIM_OC5_SetConfig+0x6a>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a11      	ldr	r2, [pc, #68]	; (8007408 <TIM_OC5_SetConfig+0xac>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d109      	bne.n	80073da <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	021b      	lsls	r3, r3, #8
 80073d4:	697a      	ldr	r2, [r7, #20]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	685a      	ldr	r2, [r3, #4]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	621a      	str	r2, [r3, #32]
}
 80073f4:	bf00      	nop
 80073f6:	371c      	adds	r7, #28
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr
 8007400:	40012c00 	.word	0x40012c00
 8007404:	40014400 	.word	0x40014400
 8007408:	40014800 	.word	0x40014800

0800740c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800740c:	b480      	push	{r7}
 800740e:	b087      	sub	sp, #28
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a1b      	ldr	r3, [r3, #32]
 8007420:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800743a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800743e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	021b      	lsls	r3, r3, #8
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	4313      	orrs	r3, r2
 800744a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007452:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	051b      	lsls	r3, r3, #20
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	4313      	orrs	r3, r2
 800745e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a14      	ldr	r2, [pc, #80]	; (80074b4 <TIM_OC6_SetConfig+0xa8>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d007      	beq.n	8007478 <TIM_OC6_SetConfig+0x6c>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a13      	ldr	r2, [pc, #76]	; (80074b8 <TIM_OC6_SetConfig+0xac>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d003      	beq.n	8007478 <TIM_OC6_SetConfig+0x6c>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a12      	ldr	r2, [pc, #72]	; (80074bc <TIM_OC6_SetConfig+0xb0>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d109      	bne.n	800748c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800747e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	695b      	ldr	r3, [r3, #20]
 8007484:	029b      	lsls	r3, r3, #10
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	4313      	orrs	r3, r2
 800748a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	621a      	str	r2, [r3, #32]
}
 80074a6:	bf00      	nop
 80074a8:	371c      	adds	r7, #28
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	40012c00 	.word	0x40012c00
 80074b8:	40014400 	.word	0x40014400
 80074bc:	40014800 	.word	0x40014800

080074c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b087      	sub	sp, #28
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	f003 031f 	and.w	r3, r3, #31
 80074d2:	2201      	movs	r2, #1
 80074d4:	fa02 f303 	lsl.w	r3, r2, r3
 80074d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6a1a      	ldr	r2, [r3, #32]
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	43db      	mvns	r3, r3
 80074e2:	401a      	ands	r2, r3
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6a1a      	ldr	r2, [r3, #32]
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	f003 031f 	and.w	r3, r3, #31
 80074f2:	6879      	ldr	r1, [r7, #4]
 80074f4:	fa01 f303 	lsl.w	r3, r1, r3
 80074f8:	431a      	orrs	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	621a      	str	r2, [r3, #32]
}
 80074fe:	bf00      	nop
 8007500:	371c      	adds	r7, #28
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
	...

0800750c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800751c:	2b01      	cmp	r3, #1
 800751e:	d101      	bne.n	8007524 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007520:	2302      	movs	r3, #2
 8007522:	e04a      	b.n	80075ba <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2202      	movs	r2, #2
 8007530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a1f      	ldr	r2, [pc, #124]	; (80075c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d108      	bne.n	8007560 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007554:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	4313      	orrs	r3, r2
 800755e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007566:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	4313      	orrs	r3, r2
 8007570:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a12      	ldr	r2, [pc, #72]	; (80075c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d004      	beq.n	800758e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800758c:	d10c      	bne.n	80075a8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007594:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	4313      	orrs	r3, r2
 800759e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	40012c00 	.word	0x40012c00

080075cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80075d6:	2300      	movs	r3, #0
 80075d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d101      	bne.n	80075e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80075e4:	2302      	movs	r3, #2
 80075e6:	e06e      	b.n	80076c6 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	4313      	orrs	r3, r2
 800760a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	4313      	orrs	r3, r2
 8007618:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4313      	orrs	r3, r2
 8007626:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	4313      	orrs	r3, r2
 8007634:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	4313      	orrs	r3, r2
 8007642:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764e:	4313      	orrs	r3, r2
 8007650:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	041b      	lsls	r3, r3, #16
 800765e:	4313      	orrs	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	69db      	ldr	r3, [r3, #28]
 800766c:	4313      	orrs	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a17      	ldr	r2, [pc, #92]	; (80076d4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d11c      	bne.n	80076b4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007684:	051b      	lsls	r3, r3, #20
 8007686:	4313      	orrs	r3, r2
 8007688:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	6a1b      	ldr	r3, [r3, #32]
 8007694:	4313      	orrs	r3, r2
 8007696:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a2:	4313      	orrs	r3, r2
 80076a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b0:	4313      	orrs	r3, r2
 80076b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3714      	adds	r7, #20
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	40012c00 	.word	0x40012c00

080076d8 <LL_RCC_GetUSARTClockSource>:
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80076e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4013      	ands	r3, r2
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <LL_RCC_GetLPUARTClockSource>:
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007704:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4013      	ands	r3, r2
}
 800770c:	4618      	mov	r0, r3
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d101      	bne.n	800772a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e042      	b.n	80077b0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007730:	2b00      	cmp	r3, #0
 8007732:	d106      	bne.n	8007742 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f7fb fd3d 	bl	80031bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2224      	movs	r2, #36	; 0x24
 8007746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f022 0201 	bic.w	r2, r2, #1
 8007758:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775e:	2b00      	cmp	r3, #0
 8007760:	d002      	beq.n	8007768 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fe14 	bl	8008390 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 fbe9 	bl	8007f40 <UART_SetConfig>
 800776e:	4603      	mov	r3, r0
 8007770:	2b01      	cmp	r3, #1
 8007772:	d101      	bne.n	8007778 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e01b      	b.n	80077b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	685a      	ldr	r2, [r3, #4]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007786:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689a      	ldr	r2, [r3, #8]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007796:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f042 0201 	orr.w	r2, r2, #1
 80077a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 fe93 	bl	80084d4 <UART_CheckIdleState>
 80077ae:	4603      	mov	r3, r0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b08a      	sub	sp, #40	; 0x28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	4613      	mov	r3, r2
 80077c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077cc:	2b20      	cmp	r3, #32
 80077ce:	d167      	bne.n	80078a0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d002      	beq.n	80077dc <HAL_UART_Transmit_DMA+0x24>
 80077d6:	88fb      	ldrh	r3, [r7, #6]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d101      	bne.n	80077e0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e060      	b.n	80078a2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	68ba      	ldr	r2, [r7, #8]
 80077e4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	88fa      	ldrh	r2, [r7, #6]
 80077ea:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	88fa      	ldrh	r2, [r7, #6]
 80077f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2221      	movs	r2, #33	; 0x21
 8007802:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800780a:	2b00      	cmp	r3, #0
 800780c:	d028      	beq.n	8007860 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007812:	4a26      	ldr	r2, [pc, #152]	; (80078ac <HAL_UART_Transmit_DMA+0xf4>)
 8007814:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800781a:	4a25      	ldr	r2, [pc, #148]	; (80078b0 <HAL_UART_Transmit_DMA+0xf8>)
 800781c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007822:	4a24      	ldr	r2, [pc, #144]	; (80078b4 <HAL_UART_Transmit_DMA+0xfc>)
 8007824:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800782a:	2200      	movs	r2, #0
 800782c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007836:	4619      	mov	r1, r3
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3328      	adds	r3, #40	; 0x28
 800783e:	461a      	mov	r2, r3
 8007840:	88fb      	ldrh	r3, [r7, #6]
 8007842:	f7fc fa0b 	bl	8003c5c <HAL_DMA_Start_IT>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d009      	beq.n	8007860 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2210      	movs	r2, #16
 8007850:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2220      	movs	r2, #32
 8007858:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e020      	b.n	80078a2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2240      	movs	r2, #64	; 0x40
 8007866:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	3308      	adds	r3, #8
 800786e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	e853 3f00 	ldrex	r3, [r3]
 8007876:	613b      	str	r3, [r7, #16]
   return(result);
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800787e:	627b      	str	r3, [r7, #36]	; 0x24
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	3308      	adds	r3, #8
 8007886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007888:	623a      	str	r2, [r7, #32]
 800788a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788c:	69f9      	ldr	r1, [r7, #28]
 800788e:	6a3a      	ldr	r2, [r7, #32]
 8007890:	e841 2300 	strex	r3, r2, [r1]
 8007894:	61bb      	str	r3, [r7, #24]
   return(result);
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1e5      	bne.n	8007868 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	e000      	b.n	80078a2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80078a0:	2302      	movs	r3, #2
  }
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3728      	adds	r7, #40	; 0x28
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	08008851 	.word	0x08008851
 80078b0:	080088eb 	.word	0x080088eb
 80078b4:	08008907 	.word	0x08008907

080078b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b0ba      	sub	sp, #232	; 0xe8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	69db      	ldr	r3, [r3, #28]
 80078c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80078de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80078e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80078e6:	4013      	ands	r3, r2
 80078e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80078ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d11b      	bne.n	800792c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80078f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078f8:	f003 0320 	and.w	r3, r3, #32
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d015      	beq.n	800792c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007904:	f003 0320 	and.w	r3, r3, #32
 8007908:	2b00      	cmp	r3, #0
 800790a:	d105      	bne.n	8007918 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800790c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007914:	2b00      	cmp	r3, #0
 8007916:	d009      	beq.n	800792c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800791c:	2b00      	cmp	r3, #0
 800791e:	f000 82e3 	beq.w	8007ee8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	4798      	blx	r3
      }
      return;
 800792a:	e2dd      	b.n	8007ee8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800792c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 8123 	beq.w	8007b7c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007936:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800793a:	4b8d      	ldr	r3, [pc, #564]	; (8007b70 <HAL_UART_IRQHandler+0x2b8>)
 800793c:	4013      	ands	r3, r2
 800793e:	2b00      	cmp	r3, #0
 8007940:	d106      	bne.n	8007950 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007942:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007946:	4b8b      	ldr	r3, [pc, #556]	; (8007b74 <HAL_UART_IRQHandler+0x2bc>)
 8007948:	4013      	ands	r3, r2
 800794a:	2b00      	cmp	r3, #0
 800794c:	f000 8116 	beq.w	8007b7c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007954:	f003 0301 	and.w	r3, r3, #1
 8007958:	2b00      	cmp	r3, #0
 800795a:	d011      	beq.n	8007980 <HAL_UART_IRQHandler+0xc8>
 800795c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00b      	beq.n	8007980 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2201      	movs	r2, #1
 800796e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007976:	f043 0201 	orr.w	r2, r3, #1
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007984:	f003 0302 	and.w	r3, r3, #2
 8007988:	2b00      	cmp	r3, #0
 800798a:	d011      	beq.n	80079b0 <HAL_UART_IRQHandler+0xf8>
 800798c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00b      	beq.n	80079b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2202      	movs	r2, #2
 800799e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079a6:	f043 0204 	orr.w	r2, r3, #4
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079b4:	f003 0304 	and.w	r3, r3, #4
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d011      	beq.n	80079e0 <HAL_UART_IRQHandler+0x128>
 80079bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079c0:	f003 0301 	and.w	r3, r3, #1
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00b      	beq.n	80079e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2204      	movs	r2, #4
 80079ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d6:	f043 0202 	orr.w	r2, r3, #2
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80079e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079e4:	f003 0308 	and.w	r3, r3, #8
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d017      	beq.n	8007a1c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80079ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079f0:	f003 0320 	and.w	r3, r3, #32
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d105      	bne.n	8007a04 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80079f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80079fc:	4b5c      	ldr	r3, [pc, #368]	; (8007b70 <HAL_UART_IRQHandler+0x2b8>)
 80079fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00b      	beq.n	8007a1c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2208      	movs	r2, #8
 8007a0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a12:	f043 0208 	orr.w	r2, r3, #8
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d012      	beq.n	8007a4e <HAL_UART_IRQHandler+0x196>
 8007a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00c      	beq.n	8007a4e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a44:	f043 0220 	orr.w	r2, r3, #32
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 8249 	beq.w	8007eec <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a5e:	f003 0320 	and.w	r3, r3, #32
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d013      	beq.n	8007a8e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a6a:	f003 0320 	and.w	r3, r3, #32
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d105      	bne.n	8007a7e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d007      	beq.n	8007a8e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa2:	2b40      	cmp	r3, #64	; 0x40
 8007aa4:	d005      	beq.n	8007ab2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007aa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007aaa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d054      	beq.n	8007b5c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fe66 	bl	8008784 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ac2:	2b40      	cmp	r3, #64	; 0x40
 8007ac4:	d146      	bne.n	8007b54 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	3308      	adds	r3, #8
 8007acc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ad4:	e853 3f00 	ldrex	r3, [r3]
 8007ad8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007adc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ae4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3308      	adds	r3, #8
 8007aee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007af2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007af6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007afe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b02:	e841 2300 	strex	r3, r2, [r1]
 8007b06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1d9      	bne.n	8007ac6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d017      	beq.n	8007b4c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b22:	4a15      	ldr	r2, [pc, #84]	; (8007b78 <HAL_UART_IRQHandler+0x2c0>)
 8007b24:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7fc f96f 	bl	8003e10 <HAL_DMA_Abort_IT>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d019      	beq.n	8007b6c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007b46:	4610      	mov	r0, r2
 8007b48:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b4a:	e00f      	b.n	8007b6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f9e1 	bl	8007f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b52:	e00b      	b.n	8007b6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f9dd 	bl	8007f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b5a:	e007      	b.n	8007b6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f9d9 	bl	8007f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007b6a:	e1bf      	b.n	8007eec <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b6c:	bf00      	nop
    return;
 8007b6e:	e1bd      	b.n	8007eec <HAL_UART_IRQHandler+0x634>
 8007b70:	10000001 	.word	0x10000001
 8007b74:	04000120 	.word	0x04000120
 8007b78:	08008987 	.word	0x08008987

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	f040 8153 	bne.w	8007e2c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b8a:	f003 0310 	and.w	r3, r3, #16
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f000 814c 	beq.w	8007e2c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b98:	f003 0310 	and.w	r3, r3, #16
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f000 8145 	beq.w	8007e2c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2210      	movs	r2, #16
 8007ba8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb4:	2b40      	cmp	r3, #64	; 0x40
 8007bb6:	f040 80bb 	bne.w	8007d30 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007bc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f000 818f 	beq.w	8007ef0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007bd8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	f080 8187 	bcs.w	8007ef0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007be8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 0320 	and.w	r3, r3, #32
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f040 8087 	bne.w	8007d0e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c0c:	e853 3f00 	ldrex	r3, [r3]
 8007c10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	461a      	mov	r2, r3
 8007c26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c2e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c3a:	e841 2300 	strex	r3, r2, [r1]
 8007c3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1da      	bne.n	8007c00 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	3308      	adds	r3, #8
 8007c50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c54:	e853 3f00 	ldrex	r3, [r3]
 8007c58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c5c:	f023 0301 	bic.w	r3, r3, #1
 8007c60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	3308      	adds	r3, #8
 8007c6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007c72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c7a:	e841 2300 	strex	r3, r2, [r1]
 8007c7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1e1      	bne.n	8007c4a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	3308      	adds	r3, #8
 8007c8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	3308      	adds	r3, #8
 8007ca6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007caa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007cac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007cb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007cb2:	e841 2300 	strex	r3, r2, [r1]
 8007cb6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007cb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e3      	bne.n	8007c86 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2220      	movs	r2, #32
 8007cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cd4:	e853 3f00 	ldrex	r3, [r3]
 8007cd8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cdc:	f023 0310 	bic.w	r3, r3, #16
 8007ce0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	461a      	mov	r2, r3
 8007cea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cee:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cf0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007cf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cf6:	e841 2300 	strex	r3, r2, [r1]
 8007cfa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1e4      	bne.n	8007ccc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7fc f822 	bl	8003d52 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2202      	movs	r2, #2
 8007d12:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	4619      	mov	r1, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f8fd 	bl	8007f28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d2e:	e0df      	b.n	8007ef0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f000 80d1 	beq.w	8007ef4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007d52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f000 80cc 	beq.w	8007ef4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d64:	e853 3f00 	ldrex	r3, [r3]
 8007d68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8007d80:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d86:	e841 2300 	strex	r3, r2, [r1]
 8007d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1e4      	bne.n	8007d5c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	3308      	adds	r3, #8
 8007d98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9c:	e853 3f00 	ldrex	r3, [r3]
 8007da0:	623b      	str	r3, [r7, #32]
   return(result);
 8007da2:	6a3b      	ldr	r3, [r7, #32]
 8007da4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007da8:	f023 0301 	bic.w	r3, r3, #1
 8007dac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	3308      	adds	r3, #8
 8007db6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007dba:	633a      	str	r2, [r7, #48]	; 0x30
 8007dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dc2:	e841 2300 	strex	r3, r2, [r1]
 8007dc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1e1      	bne.n	8007d92 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2220      	movs	r2, #32
 8007dd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	e853 3f00 	ldrex	r3, [r3]
 8007dee:	60fb      	str	r3, [r7, #12]
   return(result);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f023 0310 	bic.w	r3, r3, #16
 8007df6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	461a      	mov	r2, r3
 8007e00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e04:	61fb      	str	r3, [r7, #28]
 8007e06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e08:	69b9      	ldr	r1, [r7, #24]
 8007e0a:	69fa      	ldr	r2, [r7, #28]
 8007e0c:	e841 2300 	strex	r3, r2, [r1]
 8007e10:	617b      	str	r3, [r7, #20]
   return(result);
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1e4      	bne.n	8007de2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e22:	4619      	mov	r1, r3
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f87f 	bl	8007f28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e2a:	e063      	b.n	8007ef4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00e      	beq.n	8007e56 <HAL_UART_IRQHandler+0x59e>
 8007e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d008      	beq.n	8007e56 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007e4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 fdda 	bl	8008a08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e54:	e051      	b.n	8007efa <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d014      	beq.n	8007e8c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d105      	bne.n	8007e7a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d008      	beq.n	8007e8c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d03a      	beq.n	8007ef8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	4798      	blx	r3
    }
    return;
 8007e8a:	e035      	b.n	8007ef8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d009      	beq.n	8007eac <HAL_UART_IRQHandler+0x5f4>
 8007e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d003      	beq.n	8007eac <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fd84 	bl	80089b2 <UART_EndTransmit_IT>
    return;
 8007eaa:	e026      	b.n	8007efa <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d009      	beq.n	8007ecc <HAL_UART_IRQHandler+0x614>
 8007eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ebc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d003      	beq.n	8007ecc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 fdb3 	bl	8008a30 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007eca:	e016      	b.n	8007efa <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d010      	beq.n	8007efa <HAL_UART_IRQHandler+0x642>
 8007ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	da0c      	bge.n	8007efa <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fd9b 	bl	8008a1c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ee6:	e008      	b.n	8007efa <HAL_UART_IRQHandler+0x642>
      return;
 8007ee8:	bf00      	nop
 8007eea:	e006      	b.n	8007efa <HAL_UART_IRQHandler+0x642>
    return;
 8007eec:	bf00      	nop
 8007eee:	e004      	b.n	8007efa <HAL_UART_IRQHandler+0x642>
      return;
 8007ef0:	bf00      	nop
 8007ef2:	e002      	b.n	8007efa <HAL_UART_IRQHandler+0x642>
      return;
 8007ef4:	bf00      	nop
 8007ef6:	e000      	b.n	8007efa <HAL_UART_IRQHandler+0x642>
    return;
 8007ef8:	bf00      	nop
  }
}
 8007efa:	37e8      	adds	r7, #232	; 0xe8
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f1c:	bf00      	nop
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	460b      	mov	r3, r1
 8007f32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f44:	b08c      	sub	sp, #48	; 0x30
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	689a      	ldr	r2, [r3, #8]
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	431a      	orrs	r2, r3
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	695b      	ldr	r3, [r3, #20]
 8007f5e:	431a      	orrs	r2, r3
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	69db      	ldr	r3, [r3, #28]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	4baf      	ldr	r3, [pc, #700]	; (800822c <UART_SetConfig+0x2ec>)
 8007f70:	4013      	ands	r3, r2
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	6812      	ldr	r2, [r2, #0]
 8007f76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f78:	430b      	orrs	r3, r1
 8007f7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	68da      	ldr	r2, [r3, #12]
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4aa4      	ldr	r2, [pc, #656]	; (8008230 <UART_SetConfig+0x2f0>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d004      	beq.n	8007fac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007fb6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	6812      	ldr	r2, [r2, #0]
 8007fbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fc0:	430b      	orrs	r3, r1
 8007fc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fca:	f023 010f 	bic.w	r1, r3, #15
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a95      	ldr	r2, [pc, #596]	; (8008234 <UART_SetConfig+0x2f4>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d125      	bne.n	8008030 <UART_SetConfig+0xf0>
 8007fe4:	2003      	movs	r0, #3
 8007fe6:	f7ff fb77 	bl	80076d8 <LL_RCC_GetUSARTClockSource>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b03      	cmp	r3, #3
 8007fee:	d81b      	bhi.n	8008028 <UART_SetConfig+0xe8>
 8007ff0:	a201      	add	r2, pc, #4	; (adr r2, 8007ff8 <UART_SetConfig+0xb8>)
 8007ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff6:	bf00      	nop
 8007ff8:	08008009 	.word	0x08008009
 8007ffc:	08008019 	.word	0x08008019
 8008000:	08008011 	.word	0x08008011
 8008004:	08008021 	.word	0x08008021
 8008008:	2301      	movs	r3, #1
 800800a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800800e:	e042      	b.n	8008096 <UART_SetConfig+0x156>
 8008010:	2302      	movs	r3, #2
 8008012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008016:	e03e      	b.n	8008096 <UART_SetConfig+0x156>
 8008018:	2304      	movs	r3, #4
 800801a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800801e:	e03a      	b.n	8008096 <UART_SetConfig+0x156>
 8008020:	2308      	movs	r3, #8
 8008022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008026:	e036      	b.n	8008096 <UART_SetConfig+0x156>
 8008028:	2310      	movs	r3, #16
 800802a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800802e:	e032      	b.n	8008096 <UART_SetConfig+0x156>
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a7e      	ldr	r2, [pc, #504]	; (8008230 <UART_SetConfig+0x2f0>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d12a      	bne.n	8008090 <UART_SetConfig+0x150>
 800803a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800803e:	f7ff fb5b 	bl	80076f8 <LL_RCC_GetLPUARTClockSource>
 8008042:	4603      	mov	r3, r0
 8008044:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008048:	d01a      	beq.n	8008080 <UART_SetConfig+0x140>
 800804a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800804e:	d81b      	bhi.n	8008088 <UART_SetConfig+0x148>
 8008050:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008054:	d00c      	beq.n	8008070 <UART_SetConfig+0x130>
 8008056:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800805a:	d815      	bhi.n	8008088 <UART_SetConfig+0x148>
 800805c:	2b00      	cmp	r3, #0
 800805e:	d003      	beq.n	8008068 <UART_SetConfig+0x128>
 8008060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008064:	d008      	beq.n	8008078 <UART_SetConfig+0x138>
 8008066:	e00f      	b.n	8008088 <UART_SetConfig+0x148>
 8008068:	2300      	movs	r3, #0
 800806a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800806e:	e012      	b.n	8008096 <UART_SetConfig+0x156>
 8008070:	2302      	movs	r3, #2
 8008072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008076:	e00e      	b.n	8008096 <UART_SetConfig+0x156>
 8008078:	2304      	movs	r3, #4
 800807a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800807e:	e00a      	b.n	8008096 <UART_SetConfig+0x156>
 8008080:	2308      	movs	r3, #8
 8008082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008086:	e006      	b.n	8008096 <UART_SetConfig+0x156>
 8008088:	2310      	movs	r3, #16
 800808a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800808e:	e002      	b.n	8008096 <UART_SetConfig+0x156>
 8008090:	2310      	movs	r3, #16
 8008092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a65      	ldr	r2, [pc, #404]	; (8008230 <UART_SetConfig+0x2f0>)
 800809c:	4293      	cmp	r3, r2
 800809e:	f040 8097 	bne.w	80081d0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80080a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80080a6:	2b08      	cmp	r3, #8
 80080a8:	d823      	bhi.n	80080f2 <UART_SetConfig+0x1b2>
 80080aa:	a201      	add	r2, pc, #4	; (adr r2, 80080b0 <UART_SetConfig+0x170>)
 80080ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b0:	080080d5 	.word	0x080080d5
 80080b4:	080080f3 	.word	0x080080f3
 80080b8:	080080dd 	.word	0x080080dd
 80080bc:	080080f3 	.word	0x080080f3
 80080c0:	080080e3 	.word	0x080080e3
 80080c4:	080080f3 	.word	0x080080f3
 80080c8:	080080f3 	.word	0x080080f3
 80080cc:	080080f3 	.word	0x080080f3
 80080d0:	080080eb 	.word	0x080080eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080d4:	f7fd fc56 	bl	8005984 <HAL_RCC_GetPCLK1Freq>
 80080d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80080da:	e010      	b.n	80080fe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080dc:	4b56      	ldr	r3, [pc, #344]	; (8008238 <UART_SetConfig+0x2f8>)
 80080de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80080e0:	e00d      	b.n	80080fe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080e2:	f7fd fbcf 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 80080e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80080e8:	e009      	b.n	80080fe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80080f0:	e005      	b.n	80080fe <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80080f2:	2300      	movs	r3, #0
 80080f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80080fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80080fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008100:	2b00      	cmp	r3, #0
 8008102:	f000 812b 	beq.w	800835c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810a:	4a4c      	ldr	r2, [pc, #304]	; (800823c <UART_SetConfig+0x2fc>)
 800810c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008110:	461a      	mov	r2, r3
 8008112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008114:	fbb3 f3f2 	udiv	r3, r3, r2
 8008118:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	685a      	ldr	r2, [r3, #4]
 800811e:	4613      	mov	r3, r2
 8008120:	005b      	lsls	r3, r3, #1
 8008122:	4413      	add	r3, r2
 8008124:	69ba      	ldr	r2, [r7, #24]
 8008126:	429a      	cmp	r2, r3
 8008128:	d305      	bcc.n	8008136 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008130:	69ba      	ldr	r2, [r7, #24]
 8008132:	429a      	cmp	r2, r3
 8008134:	d903      	bls.n	800813e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800813c:	e10e      	b.n	800835c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800813e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008140:	2200      	movs	r2, #0
 8008142:	60bb      	str	r3, [r7, #8]
 8008144:	60fa      	str	r2, [r7, #12]
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814a:	4a3c      	ldr	r2, [pc, #240]	; (800823c <UART_SetConfig+0x2fc>)
 800814c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008150:	b29b      	uxth	r3, r3
 8008152:	2200      	movs	r2, #0
 8008154:	603b      	str	r3, [r7, #0]
 8008156:	607a      	str	r2, [r7, #4]
 8008158:	e9d7 2300 	ldrd	r2, r3, [r7]
 800815c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008160:	f7f8 fc54 	bl	8000a0c <__aeabi_uldivmod>
 8008164:	4602      	mov	r2, r0
 8008166:	460b      	mov	r3, r1
 8008168:	4610      	mov	r0, r2
 800816a:	4619      	mov	r1, r3
 800816c:	f04f 0200 	mov.w	r2, #0
 8008170:	f04f 0300 	mov.w	r3, #0
 8008174:	020b      	lsls	r3, r1, #8
 8008176:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800817a:	0202      	lsls	r2, r0, #8
 800817c:	6979      	ldr	r1, [r7, #20]
 800817e:	6849      	ldr	r1, [r1, #4]
 8008180:	0849      	lsrs	r1, r1, #1
 8008182:	2000      	movs	r0, #0
 8008184:	460c      	mov	r4, r1
 8008186:	4605      	mov	r5, r0
 8008188:	eb12 0804 	adds.w	r8, r2, r4
 800818c:	eb43 0905 	adc.w	r9, r3, r5
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	469a      	mov	sl, r3
 8008198:	4693      	mov	fp, r2
 800819a:	4652      	mov	r2, sl
 800819c:	465b      	mov	r3, fp
 800819e:	4640      	mov	r0, r8
 80081a0:	4649      	mov	r1, r9
 80081a2:	f7f8 fc33 	bl	8000a0c <__aeabi_uldivmod>
 80081a6:	4602      	mov	r2, r0
 80081a8:	460b      	mov	r3, r1
 80081aa:	4613      	mov	r3, r2
 80081ac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80081ae:	6a3b      	ldr	r3, [r7, #32]
 80081b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081b4:	d308      	bcc.n	80081c8 <UART_SetConfig+0x288>
 80081b6:	6a3b      	ldr	r3, [r7, #32]
 80081b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081bc:	d204      	bcs.n	80081c8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	6a3a      	ldr	r2, [r7, #32]
 80081c4:	60da      	str	r2, [r3, #12]
 80081c6:	e0c9      	b.n	800835c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80081ce:	e0c5      	b.n	800835c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	69db      	ldr	r3, [r3, #28]
 80081d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081d8:	d16d      	bne.n	80082b6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80081da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80081de:	3b01      	subs	r3, #1
 80081e0:	2b07      	cmp	r3, #7
 80081e2:	d82d      	bhi.n	8008240 <UART_SetConfig+0x300>
 80081e4:	a201      	add	r2, pc, #4	; (adr r2, 80081ec <UART_SetConfig+0x2ac>)
 80081e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ea:	bf00      	nop
 80081ec:	0800820d 	.word	0x0800820d
 80081f0:	08008215 	.word	0x08008215
 80081f4:	08008241 	.word	0x08008241
 80081f8:	0800821b 	.word	0x0800821b
 80081fc:	08008241 	.word	0x08008241
 8008200:	08008241 	.word	0x08008241
 8008204:	08008241 	.word	0x08008241
 8008208:	08008223 	.word	0x08008223
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800820c:	f7fd fbd0 	bl	80059b0 <HAL_RCC_GetPCLK2Freq>
 8008210:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008212:	e01b      	b.n	800824c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008214:	4b08      	ldr	r3, [pc, #32]	; (8008238 <UART_SetConfig+0x2f8>)
 8008216:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008218:	e018      	b.n	800824c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800821a:	f7fd fb33 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 800821e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008220:	e014      	b.n	800824c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008226:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008228:	e010      	b.n	800824c <UART_SetConfig+0x30c>
 800822a:	bf00      	nop
 800822c:	cfff69f3 	.word	0xcfff69f3
 8008230:	40008000 	.word	0x40008000
 8008234:	40013800 	.word	0x40013800
 8008238:	00f42400 	.word	0x00f42400
 800823c:	0801009c 	.word	0x0801009c
      default:
        pclk = 0U;
 8008240:	2300      	movs	r3, #0
 8008242:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800824a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800824c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824e:	2b00      	cmp	r3, #0
 8008250:	f000 8084 	beq.w	800835c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008258:	4a4b      	ldr	r2, [pc, #300]	; (8008388 <UART_SetConfig+0x448>)
 800825a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800825e:	461a      	mov	r2, r3
 8008260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008262:	fbb3 f3f2 	udiv	r3, r3, r2
 8008266:	005a      	lsls	r2, r3, #1
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	085b      	lsrs	r3, r3, #1
 800826e:	441a      	add	r2, r3
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	fbb2 f3f3 	udiv	r3, r2, r3
 8008278:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800827a:	6a3b      	ldr	r3, [r7, #32]
 800827c:	2b0f      	cmp	r3, #15
 800827e:	d916      	bls.n	80082ae <UART_SetConfig+0x36e>
 8008280:	6a3b      	ldr	r3, [r7, #32]
 8008282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008286:	d212      	bcs.n	80082ae <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008288:	6a3b      	ldr	r3, [r7, #32]
 800828a:	b29b      	uxth	r3, r3
 800828c:	f023 030f 	bic.w	r3, r3, #15
 8008290:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008292:	6a3b      	ldr	r3, [r7, #32]
 8008294:	085b      	lsrs	r3, r3, #1
 8008296:	b29b      	uxth	r3, r3
 8008298:	f003 0307 	and.w	r3, r3, #7
 800829c:	b29a      	uxth	r2, r3
 800829e:	8bfb      	ldrh	r3, [r7, #30]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	8bfa      	ldrh	r2, [r7, #30]
 80082aa:	60da      	str	r2, [r3, #12]
 80082ac:	e056      	b.n	800835c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80082b4:	e052      	b.n	800835c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80082b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80082ba:	3b01      	subs	r3, #1
 80082bc:	2b07      	cmp	r3, #7
 80082be:	d822      	bhi.n	8008306 <UART_SetConfig+0x3c6>
 80082c0:	a201      	add	r2, pc, #4	; (adr r2, 80082c8 <UART_SetConfig+0x388>)
 80082c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c6:	bf00      	nop
 80082c8:	080082e9 	.word	0x080082e9
 80082cc:	080082f1 	.word	0x080082f1
 80082d0:	08008307 	.word	0x08008307
 80082d4:	080082f7 	.word	0x080082f7
 80082d8:	08008307 	.word	0x08008307
 80082dc:	08008307 	.word	0x08008307
 80082e0:	08008307 	.word	0x08008307
 80082e4:	080082ff 	.word	0x080082ff
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082e8:	f7fd fb62 	bl	80059b0 <HAL_RCC_GetPCLK2Freq>
 80082ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082ee:	e010      	b.n	8008312 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082f0:	4b26      	ldr	r3, [pc, #152]	; (800838c <UART_SetConfig+0x44c>)
 80082f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082f4:	e00d      	b.n	8008312 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082f6:	f7fd fac5 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 80082fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082fc:	e009      	b.n	8008312 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008302:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008304:	e005      	b.n	8008312 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008306:	2300      	movs	r3, #0
 8008308:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008310:	bf00      	nop
    }

    if (pclk != 0U)
 8008312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008314:	2b00      	cmp	r3, #0
 8008316:	d021      	beq.n	800835c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831c:	4a1a      	ldr	r2, [pc, #104]	; (8008388 <UART_SetConfig+0x448>)
 800831e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008322:	461a      	mov	r2, r3
 8008324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008326:	fbb3 f2f2 	udiv	r2, r3, r2
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	085b      	lsrs	r3, r3, #1
 8008330:	441a      	add	r2, r3
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	fbb2 f3f3 	udiv	r3, r2, r3
 800833a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	2b0f      	cmp	r3, #15
 8008340:	d909      	bls.n	8008356 <UART_SetConfig+0x416>
 8008342:	6a3b      	ldr	r3, [r7, #32]
 8008344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008348:	d205      	bcs.n	8008356 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800834a:	6a3b      	ldr	r3, [r7, #32]
 800834c:	b29a      	uxth	r2, r3
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	60da      	str	r2, [r3, #12]
 8008354:	e002      	b.n	800835c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	2201      	movs	r2, #1
 8008360:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	2201      	movs	r2, #1
 8008368:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	2200      	movs	r2, #0
 8008370:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	2200      	movs	r2, #0
 8008376:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008378:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800837c:	4618      	mov	r0, r3
 800837e:	3730      	adds	r7, #48	; 0x30
 8008380:	46bd      	mov	sp, r7
 8008382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008386:	bf00      	nop
 8008388:	0801009c 	.word	0x0801009c
 800838c:	00f42400 	.word	0x00f42400

08008390 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839c:	f003 0308 	and.w	r3, r3, #8
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00a      	beq.n	80083ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	430a      	orrs	r2, r1
 80083b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00a      	beq.n	80083dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	430a      	orrs	r2, r1
 80083da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e0:	f003 0302 	and.w	r3, r3, #2
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00a      	beq.n	80083fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008402:	f003 0304 	and.w	r3, r3, #4
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00a      	beq.n	8008420 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	430a      	orrs	r2, r1
 800841e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008424:	f003 0310 	and.w	r3, r3, #16
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00a      	beq.n	8008442 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	430a      	orrs	r2, r1
 8008440:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008446:	f003 0320 	and.w	r3, r3, #32
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00a      	beq.n	8008464 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	430a      	orrs	r2, r1
 8008462:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800846c:	2b00      	cmp	r3, #0
 800846e:	d01a      	beq.n	80084a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	430a      	orrs	r2, r1
 8008484:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800848a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800848e:	d10a      	bne.n	80084a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	430a      	orrs	r2, r1
 80084a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00a      	beq.n	80084c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	430a      	orrs	r2, r1
 80084c6:	605a      	str	r2, [r3, #4]
  }
}
 80084c8:	bf00      	nop
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b098      	sub	sp, #96	; 0x60
 80084d8:	af02      	add	r7, sp, #8
 80084da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084e4:	f7fb f948 	bl	8003778 <HAL_GetTick>
 80084e8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0308 	and.w	r3, r3, #8
 80084f4:	2b08      	cmp	r3, #8
 80084f6:	d12f      	bne.n	8008558 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008500:	2200      	movs	r2, #0
 8008502:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f88e 	bl	8008628 <UART_WaitOnFlagUntilTimeout>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d022      	beq.n	8008558 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851a:	e853 3f00 	ldrex	r3, [r3]
 800851e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008526:	653b      	str	r3, [r7, #80]	; 0x50
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	461a      	mov	r2, r3
 800852e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008530:	647b      	str	r3, [r7, #68]	; 0x44
 8008532:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008534:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008536:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008538:	e841 2300 	strex	r3, r2, [r1]
 800853c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800853e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1e6      	bne.n	8008512 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2220      	movs	r2, #32
 8008548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008554:	2303      	movs	r3, #3
 8008556:	e063      	b.n	8008620 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 0304 	and.w	r3, r3, #4
 8008562:	2b04      	cmp	r3, #4
 8008564:	d149      	bne.n	80085fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008566:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800856e:	2200      	movs	r2, #0
 8008570:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f857 	bl	8008628 <UART_WaitOnFlagUntilTimeout>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d03c      	beq.n	80085fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008588:	e853 3f00 	ldrex	r3, [r3]
 800858c:	623b      	str	r3, [r7, #32]
   return(result);
 800858e:	6a3b      	ldr	r3, [r7, #32]
 8008590:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008594:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	461a      	mov	r2, r3
 800859c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800859e:	633b      	str	r3, [r7, #48]	; 0x30
 80085a0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085a6:	e841 2300 	strex	r3, r2, [r1]
 80085aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1e6      	bne.n	8008580 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	3308      	adds	r3, #8
 80085b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	e853 3f00 	ldrex	r3, [r3]
 80085c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f023 0301 	bic.w	r3, r3, #1
 80085c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	3308      	adds	r3, #8
 80085d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085d2:	61fa      	str	r2, [r7, #28]
 80085d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d6:	69b9      	ldr	r1, [r7, #24]
 80085d8:	69fa      	ldr	r2, [r7, #28]
 80085da:	e841 2300 	strex	r3, r2, [r1]
 80085de:	617b      	str	r3, [r7, #20]
   return(result);
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1e5      	bne.n	80085b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2220      	movs	r2, #32
 80085ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085f6:	2303      	movs	r3, #3
 80085f8:	e012      	b.n	8008620 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2220      	movs	r2, #32
 80085fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2220      	movs	r2, #32
 8008606:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3758      	adds	r7, #88	; 0x58
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	603b      	str	r3, [r7, #0]
 8008634:	4613      	mov	r3, r2
 8008636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008638:	e04f      	b.n	80086da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008640:	d04b      	beq.n	80086da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008642:	f7fb f899 	bl	8003778 <HAL_GetTick>
 8008646:	4602      	mov	r2, r0
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	1ad3      	subs	r3, r2, r3
 800864c:	69ba      	ldr	r2, [r7, #24]
 800864e:	429a      	cmp	r2, r3
 8008650:	d302      	bcc.n	8008658 <UART_WaitOnFlagUntilTimeout+0x30>
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d101      	bne.n	800865c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008658:	2303      	movs	r3, #3
 800865a:	e04e      	b.n	80086fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 0304 	and.w	r3, r3, #4
 8008666:	2b00      	cmp	r3, #0
 8008668:	d037      	beq.n	80086da <UART_WaitOnFlagUntilTimeout+0xb2>
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	2b80      	cmp	r3, #128	; 0x80
 800866e:	d034      	beq.n	80086da <UART_WaitOnFlagUntilTimeout+0xb2>
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	2b40      	cmp	r3, #64	; 0x40
 8008674:	d031      	beq.n	80086da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	69db      	ldr	r3, [r3, #28]
 800867c:	f003 0308 	and.w	r3, r3, #8
 8008680:	2b08      	cmp	r3, #8
 8008682:	d110      	bne.n	80086a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2208      	movs	r2, #8
 800868a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	f000 f879 	bl	8008784 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2208      	movs	r2, #8
 8008696:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2200      	movs	r2, #0
 800869e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	e029      	b.n	80086fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	69db      	ldr	r3, [r3, #28]
 80086ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086b4:	d111      	bne.n	80086da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f000 f85f 	bl	8008784 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2220      	movs	r2, #32
 80086ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80086d6:	2303      	movs	r3, #3
 80086d8:	e00f      	b.n	80086fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	69da      	ldr	r2, [r3, #28]
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	4013      	ands	r3, r2
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	bf0c      	ite	eq
 80086ea:	2301      	moveq	r3, #1
 80086ec:	2300      	movne	r3, #0
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	461a      	mov	r2, r3
 80086f2:	79fb      	ldrb	r3, [r7, #7]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d0a0      	beq.n	800863a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008702:	b480      	push	{r7}
 8008704:	b08f      	sub	sp, #60	; 0x3c
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008710:	6a3b      	ldr	r3, [r7, #32]
 8008712:	e853 3f00 	ldrex	r3, [r3]
 8008716:	61fb      	str	r3, [r7, #28]
   return(result);
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800871e:	637b      	str	r3, [r7, #52]	; 0x34
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	461a      	mov	r2, r3
 8008726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800872a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800872e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008730:	e841 2300 	strex	r3, r2, [r1]
 8008734:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1e6      	bne.n	800870a <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3308      	adds	r3, #8
 8008742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	e853 3f00 	ldrex	r3, [r3]
 800874a:	60bb      	str	r3, [r7, #8]
   return(result);
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008752:	633b      	str	r3, [r7, #48]	; 0x30
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	3308      	adds	r3, #8
 800875a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800875c:	61ba      	str	r2, [r7, #24]
 800875e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008760:	6979      	ldr	r1, [r7, #20]
 8008762:	69ba      	ldr	r2, [r7, #24]
 8008764:	e841 2300 	strex	r3, r2, [r1]
 8008768:	613b      	str	r3, [r7, #16]
   return(result);
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1e5      	bne.n	800873c <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2220      	movs	r2, #32
 8008774:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8008778:	bf00      	nop
 800877a:	373c      	adds	r7, #60	; 0x3c
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008784:	b480      	push	{r7}
 8008786:	b095      	sub	sp, #84	; 0x54
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008794:	e853 3f00 	ldrex	r3, [r3]
 8008798:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800879a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	461a      	mov	r2, r3
 80087a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087aa:	643b      	str	r3, [r7, #64]	; 0x40
 80087ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087b2:	e841 2300 	strex	r3, r2, [r1]
 80087b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1e6      	bne.n	800878c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	3308      	adds	r3, #8
 80087c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c6:	6a3b      	ldr	r3, [r7, #32]
 80087c8:	e853 3f00 	ldrex	r3, [r3]
 80087cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087d4:	f023 0301 	bic.w	r3, r3, #1
 80087d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	3308      	adds	r3, #8
 80087e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087ea:	e841 2300 	strex	r3, r2, [r1]
 80087ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1e3      	bne.n	80087be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d118      	bne.n	8008830 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	e853 3f00 	ldrex	r3, [r3]
 800880a:	60bb      	str	r3, [r7, #8]
   return(result);
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	f023 0310 	bic.w	r3, r3, #16
 8008812:	647b      	str	r3, [r7, #68]	; 0x44
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	461a      	mov	r2, r3
 800881a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800881c:	61bb      	str	r3, [r7, #24]
 800881e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008820:	6979      	ldr	r1, [r7, #20]
 8008822:	69ba      	ldr	r2, [r7, #24]
 8008824:	e841 2300 	strex	r3, r2, [r1]
 8008828:	613b      	str	r3, [r7, #16]
   return(result);
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d1e6      	bne.n	80087fe <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2220      	movs	r2, #32
 8008834:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008844:	bf00      	nop
 8008846:	3754      	adds	r7, #84	; 0x54
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b090      	sub	sp, #64	; 0x40
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800885c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 0320 	and.w	r3, r3, #32
 8008868:	2b00      	cmp	r3, #0
 800886a:	d137      	bne.n	80088dc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800886c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800886e:	2200      	movs	r2, #0
 8008870:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	3308      	adds	r3, #8
 800887a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887e:	e853 3f00 	ldrex	r3, [r3]
 8008882:	623b      	str	r3, [r7, #32]
   return(result);
 8008884:	6a3b      	ldr	r3, [r7, #32]
 8008886:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800888a:	63bb      	str	r3, [r7, #56]	; 0x38
 800888c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	3308      	adds	r3, #8
 8008892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008894:	633a      	str	r2, [r7, #48]	; 0x30
 8008896:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008898:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800889a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800889c:	e841 2300 	strex	r3, r2, [r1]
 80088a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1e5      	bne.n	8008874 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	e853 3f00 	ldrex	r3, [r3]
 80088b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088bc:	637b      	str	r3, [r7, #52]	; 0x34
 80088be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	461a      	mov	r2, r3
 80088c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c6:	61fb      	str	r3, [r7, #28]
 80088c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ca:	69b9      	ldr	r1, [r7, #24]
 80088cc:	69fa      	ldr	r2, [r7, #28]
 80088ce:	e841 2300 	strex	r3, r2, [r1]
 80088d2:	617b      	str	r3, [r7, #20]
   return(result);
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d1e6      	bne.n	80088a8 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80088da:	e002      	b.n	80088e2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80088dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80088de:	f7f9 ffab 	bl	8002838 <HAL_UART_TxCpltCallback>
}
 80088e2:	bf00      	nop
 80088e4:	3740      	adds	r7, #64	; 0x40
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b084      	sub	sp, #16
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f7ff fb01 	bl	8007f00 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088fe:	bf00      	nop
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b086      	sub	sp, #24
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008912:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800891a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008922:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800892e:	2b80      	cmp	r3, #128	; 0x80
 8008930:	d109      	bne.n	8008946 <UART_DMAError+0x40>
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	2b21      	cmp	r3, #33	; 0x21
 8008936:	d106      	bne.n	8008946 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	2200      	movs	r2, #0
 800893c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008940:	6978      	ldr	r0, [r7, #20]
 8008942:	f7ff fede 	bl	8008702 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008950:	2b40      	cmp	r3, #64	; 0x40
 8008952:	d109      	bne.n	8008968 <UART_DMAError+0x62>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2b22      	cmp	r3, #34	; 0x22
 8008958:	d106      	bne.n	8008968 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	2200      	movs	r2, #0
 800895e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008962:	6978      	ldr	r0, [r7, #20]
 8008964:	f7ff ff0e 	bl	8008784 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800896e:	f043 0210 	orr.w	r2, r3, #16
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008978:	6978      	ldr	r0, [r7, #20]
 800897a:	f7ff facb 	bl	8007f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800897e:	bf00      	nop
 8008980:	3718      	adds	r7, #24
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b084      	sub	sp, #16
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008992:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2200      	movs	r2, #0
 8008998:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f7ff fab5 	bl	8007f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089aa:	bf00      	nop
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b088      	sub	sp, #32
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	e853 3f00 	ldrex	r3, [r3]
 80089c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089ce:	61fb      	str	r3, [r7, #28]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	461a      	mov	r2, r3
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	61bb      	str	r3, [r7, #24]
 80089da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089dc:	6979      	ldr	r1, [r7, #20]
 80089de:	69ba      	ldr	r2, [r7, #24]
 80089e0:	e841 2300 	strex	r3, r2, [r1]
 80089e4:	613b      	str	r3, [r7, #16]
   return(result);
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1e6      	bne.n	80089ba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2220      	movs	r2, #32
 80089f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7f9 ff1c 	bl	8002838 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a00:	bf00      	nop
 8008a02:	3720      	adds	r7, #32
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008a38:	bf00      	nop
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d101      	bne.n	8008a5a <HAL_UARTEx_DisableFifoMode+0x16>
 8008a56:	2302      	movs	r3, #2
 8008a58:	e027      	b.n	8008aaa <HAL_UARTEx_DisableFifoMode+0x66>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2224      	movs	r2, #36	; 0x24
 8008a66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f022 0201 	bic.w	r2, r2, #1
 8008a80:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2220      	movs	r2, #32
 8008a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3714      	adds	r7, #20
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr

08008ab6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b084      	sub	sp, #16
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
 8008abe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d101      	bne.n	8008ace <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008aca:	2302      	movs	r3, #2
 8008acc:	e02d      	b.n	8008b2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2224      	movs	r2, #36	; 0x24
 8008ada:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f022 0201 	bic.w	r2, r2, #1
 8008af4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	683a      	ldr	r2, [r7, #0]
 8008b06:	430a      	orrs	r2, r1
 8008b08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f850 	bl	8008bb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2220      	movs	r2, #32
 8008b1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b084      	sub	sp, #16
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
 8008b3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d101      	bne.n	8008b4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b46:	2302      	movs	r3, #2
 8008b48:	e02d      	b.n	8008ba6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2224      	movs	r2, #36	; 0x24
 8008b56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f022 0201 	bic.w	r2, r2, #1
 8008b70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	683a      	ldr	r2, [r7, #0]
 8008b82:	430a      	orrs	r2, r1
 8008b84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 f812 	bl	8008bb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2220      	movs	r2, #32
 8008b98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
	...

08008bb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d108      	bne.n	8008bd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008bd0:	e031      	b.n	8008c36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008bd2:	2308      	movs	r3, #8
 8008bd4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008bd6:	2308      	movs	r3, #8
 8008bd8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	0e5b      	lsrs	r3, r3, #25
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	f003 0307 	and.w	r3, r3, #7
 8008be8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	0f5b      	lsrs	r3, r3, #29
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	f003 0307 	and.w	r3, r3, #7
 8008bf8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bfa:	7bbb      	ldrb	r3, [r7, #14]
 8008bfc:	7b3a      	ldrb	r2, [r7, #12]
 8008bfe:	4911      	ldr	r1, [pc, #68]	; (8008c44 <UARTEx_SetNbDataToProcess+0x94>)
 8008c00:	5c8a      	ldrb	r2, [r1, r2]
 8008c02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008c06:	7b3a      	ldrb	r2, [r7, #12]
 8008c08:	490f      	ldr	r1, [pc, #60]	; (8008c48 <UARTEx_SetNbDataToProcess+0x98>)
 8008c0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c18:	7bfb      	ldrb	r3, [r7, #15]
 8008c1a:	7b7a      	ldrb	r2, [r7, #13]
 8008c1c:	4909      	ldr	r1, [pc, #36]	; (8008c44 <UARTEx_SetNbDataToProcess+0x94>)
 8008c1e:	5c8a      	ldrb	r2, [r1, r2]
 8008c20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c24:	7b7a      	ldrb	r2, [r7, #13]
 8008c26:	4908      	ldr	r1, [pc, #32]	; (8008c48 <UARTEx_SetNbDataToProcess+0x98>)
 8008c28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008c36:	bf00      	nop
 8008c38:	3714      	adds	r7, #20
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	080100b4 	.word	0x080100b4
 8008c48:	080100bc 	.word	0x080100bc

08008c4c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008c54:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008c58:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	43db      	mvns	r3, r3
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3714      	adds	r7, #20
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr

08008c82 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008c82:	b480      	push	{r7}
 8008c84:	b085      	sub	sp, #20
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	60f8      	str	r0, [r7, #12]
 8008c8a:	1d3b      	adds	r3, r7, #4
 8008c8c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3714      	adds	r7, #20
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr

08008cbe <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b088      	sub	sp, #32
 8008cc2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008cc8:	f107 0308 	add.w	r3, r7, #8
 8008ccc:	2218      	movs	r2, #24
 8008cce:	2100      	movs	r1, #0
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f001 f8d8 	bl	8009e86 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008cd6:	233f      	movs	r3, #63	; 0x3f
 8008cd8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8008cda:	2381      	movs	r3, #129	; 0x81
 8008cdc:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008cde:	1dfb      	adds	r3, r7, #7
 8008ce0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008ce6:	f107 0308 	add.w	r3, r7, #8
 8008cea:	2100      	movs	r1, #0
 8008cec:	4618      	mov	r0, r3
 8008cee:	f001 fb53 	bl	800a398 <hci_send_req>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	da01      	bge.n	8008cfc <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008cf8:	23ff      	movs	r3, #255	; 0xff
 8008cfa:	e000      	b.n	8008cfe <aci_gap_set_non_discoverable+0x40>
  return status;
 8008cfc:	79fb      	ldrb	r3, [r7, #7]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3720      	adds	r7, #32
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8008d06:	b5b0      	push	{r4, r5, r7, lr}
 8008d08:	b0ce      	sub	sp, #312	; 0x138
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	4605      	mov	r5, r0
 8008d0e:	460c      	mov	r4, r1
 8008d10:	4610      	mov	r0, r2
 8008d12:	4619      	mov	r1, r3
 8008d14:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008d18:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008d1c:	462a      	mov	r2, r5
 8008d1e:	701a      	strb	r2, [r3, #0]
 8008d20:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008d24:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008d28:	4622      	mov	r2, r4
 8008d2a:	801a      	strh	r2, [r3, #0]
 8008d2c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008d30:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8008d34:	4602      	mov	r2, r0
 8008d36:	801a      	strh	r2, [r3, #0]
 8008d38:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008d3c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008d40:	460a      	mov	r2, r1
 8008d42:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8008d44:	f107 0310 	add.w	r3, r7, #16
 8008d48:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8008d4c:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008d50:	3308      	adds	r3, #8
 8008d52:	f107 0210 	add.w	r2, r7, #16
 8008d56:	4413      	add	r3, r2
 8008d58:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8008d5c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008d60:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008d64:	4413      	add	r3, r2
 8008d66:	3309      	adds	r3, #9
 8008d68:	f107 0210 	add.w	r2, r7, #16
 8008d6c:	4413      	add	r3, r2
 8008d6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008d72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008d76:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8008d84:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d88:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008d8c:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8008d90:	7812      	ldrb	r2, [r2, #0]
 8008d92:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008d94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d98:	3301      	adds	r3, #1
 8008d9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8008d9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008da2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008da6:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8008daa:	8812      	ldrh	r2, [r2, #0]
 8008dac:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8008db0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008db4:	3302      	adds	r3, #2
 8008db6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8008dba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008dbe:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008dc2:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8008dc6:	8812      	ldrh	r2, [r2, #0]
 8008dc8:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8008dcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008dd0:	3302      	adds	r3, #2
 8008dd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8008dd6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008dda:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008dde:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008de2:	7812      	ldrb	r2, [r2, #0]
 8008de4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008de6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008dea:	3301      	adds	r3, #1
 8008dec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8008df0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008df4:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008df8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008dfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008dfe:	3301      	adds	r3, #1
 8008e00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8008e04:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008e08:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008e0c:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8008e0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e12:	3301      	adds	r3, #1
 8008e14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8008e18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008e1c:	3308      	adds	r3, #8
 8008e1e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008e22:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8008e26:	4618      	mov	r0, r3
 8008e28:	f001 f81d 	bl	8009e66 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8008e2c:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008e30:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008e34:	4413      	add	r3, r2
 8008e36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8008e3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008e3e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008e42:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008e44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e48:	3301      	adds	r3, #1
 8008e4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8008e4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008e52:	3301      	adds	r3, #1
 8008e54:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008e58:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f001 f802 	bl	8009e66 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8008e62:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008e66:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008e6a:	4413      	add	r3, r2
 8008e6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8008e70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e74:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8008e78:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008e7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e7e:	3302      	adds	r3, #2
 8008e80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8008e84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e88:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8008e8c:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8008e8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e92:	3302      	adds	r3, #2
 8008e94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008e98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e9c:	2218      	movs	r2, #24
 8008e9e:	2100      	movs	r1, #0
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f000 fff0 	bl	8009e86 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008ea6:	233f      	movs	r3, #63	; 0x3f
 8008ea8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8008eac:	2383      	movs	r3, #131	; 0x83
 8008eae:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008eb2:	f107 0310 	add.w	r3, r7, #16
 8008eb6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008eba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ebe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008ec2:	f107 030f 	add.w	r3, r7, #15
 8008ec6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008ed0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f001 fa5e 	bl	800a398 <hci_send_req>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	da01      	bge.n	8008ee6 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8008ee2:	23ff      	movs	r3, #255	; 0xff
 8008ee4:	e004      	b.n	8008ef0 <aci_gap_set_discoverable+0x1ea>
  return status;
 8008ee6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008eea:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008eee:	781b      	ldrb	r3, [r3, #0]
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bdb0      	pop	{r4, r5, r7, pc}

08008efa <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b0cc      	sub	sp, #304	; 0x130
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	4602      	mov	r2, r0
 8008f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f06:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008f0a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8008f0c:	f107 0310 	add.w	r3, r7, #16
 8008f10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008f14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f18:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008f20:	2300      	movs	r3, #0
 8008f22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8008f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f2a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f2e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008f32:	7812      	ldrb	r2, [r2, #0]
 8008f34:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008f36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008f40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f44:	2218      	movs	r2, #24
 8008f46:	2100      	movs	r1, #0
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f000 ff9c 	bl	8009e86 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008f4e:	233f      	movs	r3, #63	; 0x3f
 8008f50:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8008f54:	2385      	movs	r3, #133	; 0x85
 8008f56:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008f5a:	f107 0310 	add.w	r3, r7, #16
 8008f5e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008f62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008f6a:	f107 030f 	add.w	r3, r7, #15
 8008f6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008f72:	2301      	movs	r3, #1
 8008f74:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008f78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f001 fa0a 	bl	800a398 <hci_send_req>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	da01      	bge.n	8008f8e <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8008f8a:	23ff      	movs	r3, #255	; 0xff
 8008f8c:	e004      	b.n	8008f98 <aci_gap_set_io_capability+0x9e>
  return status;
 8008f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f92:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008f96:	781b      	ldrb	r3, [r3, #0]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8008fa2:	b5b0      	push	{r4, r5, r7, lr}
 8008fa4:	b0cc      	sub	sp, #304	; 0x130
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	4605      	mov	r5, r0
 8008faa:	460c      	mov	r4, r1
 8008fac:	4610      	mov	r0, r2
 8008fae:	4619      	mov	r1, r3
 8008fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fb4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008fb8:	462a      	mov	r2, r5
 8008fba:	701a      	strb	r2, [r3, #0]
 8008fbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fc0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008fc4:	4622      	mov	r2, r4
 8008fc6:	701a      	strb	r2, [r3, #0]
 8008fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fcc:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	701a      	strb	r2, [r3, #0]
 8008fd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fdc:	460a      	mov	r2, r1
 8008fde:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8008fe0:	f107 0310 	add.w	r3, r7, #16
 8008fe4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fec:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8008ffa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ffe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009002:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009006:	7812      	ldrb	r2, [r2, #0]
 8009008:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800900a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800900e:	3301      	adds	r3, #1
 8009010:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8009014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009018:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800901c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009020:	7812      	ldrb	r2, [r2, #0]
 8009022:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009024:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009028:	3301      	adds	r3, #1
 800902a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800902e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009032:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009036:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800903a:	7812      	ldrb	r2, [r2, #0]
 800903c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800903e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009042:	3301      	adds	r3, #1
 8009044:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8009048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800904c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009050:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009054:	7812      	ldrb	r2, [r2, #0]
 8009056:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8009058:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800905c:	3301      	adds	r3, #1
 800905e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8009062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009066:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800906a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800906c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009070:	3301      	adds	r3, #1
 8009072:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8009076:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800907a:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800907e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009080:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009084:	3301      	adds	r3, #1
 8009086:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800908a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800908e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8009092:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009094:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009098:	3301      	adds	r3, #1
 800909a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800909e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090a2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80090a6:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80090aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090ae:	3304      	adds	r3, #4
 80090b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80090b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090b8:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80090bc:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80090be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090c2:	3301      	adds	r3, #1
 80090c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80090c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80090cc:	2218      	movs	r2, #24
 80090ce:	2100      	movs	r1, #0
 80090d0:	4618      	mov	r0, r3
 80090d2:	f000 fed8 	bl	8009e86 <Osal_MemSet>
  rq.ogf = 0x3f;
 80090d6:	233f      	movs	r3, #63	; 0x3f
 80090d8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80090dc:	2386      	movs	r3, #134	; 0x86
 80090de:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80090e2:	f107 0310 	add.w	r3, r7, #16
 80090e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80090ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80090f2:	f107 030f 	add.w	r3, r7, #15
 80090f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80090fa:	2301      	movs	r3, #1
 80090fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009100:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009104:	2100      	movs	r1, #0
 8009106:	4618      	mov	r0, r3
 8009108:	f001 f946 	bl	800a398 <hci_send_req>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	da01      	bge.n	8009116 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8009112:	23ff      	movs	r3, #255	; 0xff
 8009114:	e004      	b.n	8009120 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8009116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800911a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800911e:	781b      	ldrb	r3, [r3, #0]
}
 8009120:	4618      	mov	r0, r3
 8009122:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009126:	46bd      	mov	sp, r7
 8009128:	bdb0      	pop	{r4, r5, r7, pc}

0800912a <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b0cc      	sub	sp, #304	; 0x130
 800912e:	af00      	add	r7, sp, #0
 8009130:	4602      	mov	r2, r0
 8009132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009136:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800913a:	6019      	str	r1, [r3, #0]
 800913c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009140:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009144:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8009146:	f107 0310 	add.w	r3, r7, #16
 800914a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800914e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009152:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009156:	2200      	movs	r2, #0
 8009158:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800915a:	2300      	movs	r3, #0
 800915c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009160:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009164:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009168:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800916c:	8812      	ldrh	r2, [r2, #0]
 800916e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009170:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009174:	3302      	adds	r3, #2
 8009176:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800917a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800917e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009182:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8009186:	6812      	ldr	r2, [r2, #0]
 8009188:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800918c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009190:	3304      	adds	r3, #4
 8009192:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009196:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800919a:	2218      	movs	r2, #24
 800919c:	2100      	movs	r1, #0
 800919e:	4618      	mov	r0, r3
 80091a0:	f000 fe71 	bl	8009e86 <Osal_MemSet>
  rq.ogf = 0x3f;
 80091a4:	233f      	movs	r3, #63	; 0x3f
 80091a6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 80091aa:	2388      	movs	r3, #136	; 0x88
 80091ac:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80091b0:	f107 0310 	add.w	r3, r7, #16
 80091b4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80091b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80091c0:	f107 030f 	add.w	r3, r7, #15
 80091c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80091c8:	2301      	movs	r3, #1
 80091ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80091ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80091d2:	2100      	movs	r1, #0
 80091d4:	4618      	mov	r0, r3
 80091d6:	f001 f8df 	bl	800a398 <hci_send_req>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	da01      	bge.n	80091e4 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 80091e0:	23ff      	movs	r3, #255	; 0xff
 80091e2:	e004      	b.n	80091ee <aci_gap_pass_key_resp+0xc4>
  return status;
 80091e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091e8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80091ec:	781b      	ldrb	r3, [r3, #0]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80091f8:	b590      	push	{r4, r7, lr}
 80091fa:	b0cd      	sub	sp, #308	; 0x134
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	4604      	mov	r4, r0
 8009200:	4608      	mov	r0, r1
 8009202:	4611      	mov	r1, r2
 8009204:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009208:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800920c:	6013      	str	r3, [r2, #0]
 800920e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009212:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009216:	4622      	mov	r2, r4
 8009218:	701a      	strb	r2, [r3, #0]
 800921a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800921e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009222:	4602      	mov	r2, r0
 8009224:	701a      	strb	r2, [r3, #0]
 8009226:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800922a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800922e:	460a      	mov	r2, r1
 8009230:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8009232:	f107 0310 	add.w	r3, r7, #16
 8009236:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800923a:	f107 0308 	add.w	r3, r7, #8
 800923e:	2207      	movs	r2, #7
 8009240:	2100      	movs	r1, #0
 8009242:	4618      	mov	r0, r3
 8009244:	f000 fe1f 	bl	8009e86 <Osal_MemSet>
  int index_input = 0;
 8009248:	2300      	movs	r3, #0
 800924a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800924e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009252:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009256:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800925a:	7812      	ldrb	r2, [r2, #0]
 800925c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800925e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009262:	3301      	adds	r3, #1
 8009264:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8009268:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800926c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009270:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009274:	7812      	ldrb	r2, [r2, #0]
 8009276:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009278:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800927c:	3301      	adds	r3, #1
 800927e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8009282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009286:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800928a:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800928e:	7812      	ldrb	r2, [r2, #0]
 8009290:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009292:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009296:	3301      	adds	r3, #1
 8009298:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800929c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80092a0:	2218      	movs	r2, #24
 80092a2:	2100      	movs	r1, #0
 80092a4:	4618      	mov	r0, r3
 80092a6:	f000 fdee 	bl	8009e86 <Osal_MemSet>
  rq.ogf = 0x3f;
 80092aa:	233f      	movs	r3, #63	; 0x3f
 80092ac:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80092b0:	238a      	movs	r3, #138	; 0x8a
 80092b2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80092b6:	f107 0310 	add.w	r3, r7, #16
 80092ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80092be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80092c6:	f107 0308 	add.w	r3, r7, #8
 80092ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80092ce:	2307      	movs	r3, #7
 80092d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80092d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80092d8:	2100      	movs	r1, #0
 80092da:	4618      	mov	r0, r3
 80092dc:	f001 f85c 	bl	800a398 <hci_send_req>
 80092e0:	4603      	mov	r3, r0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	da01      	bge.n	80092ea <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80092e6:	23ff      	movs	r3, #255	; 0xff
 80092e8:	e02e      	b.n	8009348 <aci_gap_init+0x150>
  if ( resp.Status )
 80092ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d005      	beq.n	8009304 <aci_gap_init+0x10c>
    return resp.Status;
 80092f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092fc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	e021      	b.n	8009348 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8009304:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009308:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800930c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009310:	b29a      	uxth	r2, r3
 8009312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009316:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800931e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009322:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009326:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800932a:	b29a      	uxth	r2, r3
 800932c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009330:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8009332:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009336:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800933a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800933e:	b29a      	uxth	r2, r3
 8009340:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009344:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009346:	2300      	movs	r3, #0
}
 8009348:	4618      	mov	r0, r3
 800934a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800934e:	46bd      	mov	sp, r7
 8009350:	bd90      	pop	{r4, r7, pc}

08009352 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b0cc      	sub	sp, #304	; 0x130
 8009356:	af00      	add	r7, sp, #0
 8009358:	4602      	mov	r2, r0
 800935a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800935e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009362:	6019      	str	r1, [r3, #0]
 8009364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009368:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800936c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800936e:	f107 0310 	add.w	r3, r7, #16
 8009372:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800937a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800937e:	2200      	movs	r2, #0
 8009380:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009382:	2300      	movs	r3, #0
 8009384:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8009388:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800938c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009390:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009394:	7812      	ldrb	r2, [r2, #0]
 8009396:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009398:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800939c:	3301      	adds	r3, #1
 800939e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80093a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093a6:	1c58      	adds	r0, r3, #1
 80093a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093ac:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80093b0:	781a      	ldrb	r2, [r3, #0]
 80093b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093ba:	6819      	ldr	r1, [r3, #0]
 80093bc:	f000 fd53 	bl	8009e66 <Osal_MemCpy>
  index_input += AdvDataLen;
 80093c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093c4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80093ce:	4413      	add	r3, r2
 80093d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80093d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80093d8:	2218      	movs	r2, #24
 80093da:	2100      	movs	r1, #0
 80093dc:	4618      	mov	r0, r3
 80093de:	f000 fd52 	bl	8009e86 <Osal_MemSet>
  rq.ogf = 0x3f;
 80093e2:	233f      	movs	r3, #63	; 0x3f
 80093e4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80093e8:	238e      	movs	r3, #142	; 0x8e
 80093ea:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80093ee:	f107 0310 	add.w	r3, r7, #16
 80093f2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80093f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80093fe:	f107 030f 	add.w	r3, r7, #15
 8009402:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009406:	2301      	movs	r3, #1
 8009408:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800940c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009410:	2100      	movs	r1, #0
 8009412:	4618      	mov	r0, r3
 8009414:	f000 ffc0 	bl	800a398 <hci_send_req>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	da01      	bge.n	8009422 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800941e:	23ff      	movs	r3, #255	; 0xff
 8009420:	e004      	b.n	800942c <aci_gap_update_adv_data+0xda>
  return status;
 8009422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009426:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800942a:	781b      	ldrb	r3, [r3, #0]
}
 800942c:	4618      	mov	r0, r3
 800942e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b088      	sub	sp, #32
 800943a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800943c:	2300      	movs	r3, #0
 800943e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009440:	f107 0308 	add.w	r3, r7, #8
 8009444:	2218      	movs	r2, #24
 8009446:	2100      	movs	r1, #0
 8009448:	4618      	mov	r0, r3
 800944a:	f000 fd1c 	bl	8009e86 <Osal_MemSet>
  rq.ogf = 0x3f;
 800944e:	233f      	movs	r3, #63	; 0x3f
 8009450:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8009452:	2392      	movs	r3, #146	; 0x92
 8009454:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009456:	1dfb      	adds	r3, r7, #7
 8009458:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800945a:	2301      	movs	r3, #1
 800945c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800945e:	f107 0308 	add.w	r3, r7, #8
 8009462:	2100      	movs	r1, #0
 8009464:	4618      	mov	r0, r3
 8009466:	f000 ff97 	bl	800a398 <hci_send_req>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	da01      	bge.n	8009474 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009470:	23ff      	movs	r3, #255	; 0xff
 8009472:	e000      	b.n	8009476 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8009474:	79fb      	ldrb	r3, [r7, #7]
}
 8009476:	4618      	mov	r0, r3
 8009478:	3720      	adds	r7, #32
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b0cc      	sub	sp, #304	; 0x130
 8009482:	af00      	add	r7, sp, #0
 8009484:	4602      	mov	r2, r0
 8009486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800948a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800948e:	801a      	strh	r2, [r3, #0]
 8009490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009494:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009498:	460a      	mov	r2, r1
 800949a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800949c:	f107 0310 	add.w	r3, r7, #16
 80094a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80094a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094a8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80094ac:	2200      	movs	r2, #0
 80094ae:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80094b0:	2300      	movs	r3, #0
 80094b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80094b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80094be:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80094c2:	8812      	ldrh	r2, [r2, #0]
 80094c4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80094c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094ca:	3302      	adds	r3, #2
 80094cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80094d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80094d8:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80094dc:	7812      	ldrb	r2, [r2, #0]
 80094de:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80094e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094e4:	3301      	adds	r3, #1
 80094e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80094ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80094ee:	2218      	movs	r2, #24
 80094f0:	2100      	movs	r1, #0
 80094f2:	4618      	mov	r0, r3
 80094f4:	f000 fcc7 	bl	8009e86 <Osal_MemSet>
  rq.ogf = 0x3f;
 80094f8:	233f      	movs	r3, #63	; 0x3f
 80094fa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 80094fe:	23a5      	movs	r3, #165	; 0xa5
 8009500:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009504:	f107 0310 	add.w	r3, r7, #16
 8009508:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800950c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009510:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009514:	f107 030f 	add.w	r3, r7, #15
 8009518:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800951c:	2301      	movs	r3, #1
 800951e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009522:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009526:	2100      	movs	r1, #0
 8009528:	4618      	mov	r0, r3
 800952a:	f000 ff35 	bl	800a398 <hci_send_req>
 800952e:	4603      	mov	r3, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	da01      	bge.n	8009538 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8009534:	23ff      	movs	r3, #255	; 0xff
 8009536:	e004      	b.n	8009542 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8009538:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800953c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009540:	781b      	ldrb	r3, [r3, #0]
}
 8009542:	4618      	mov	r0, r3
 8009544:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b088      	sub	sp, #32
 8009550:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009552:	2300      	movs	r3, #0
 8009554:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009556:	f107 0308 	add.w	r3, r7, #8
 800955a:	2218      	movs	r2, #24
 800955c:	2100      	movs	r1, #0
 800955e:	4618      	mov	r0, r3
 8009560:	f000 fc91 	bl	8009e86 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009564:	233f      	movs	r3, #63	; 0x3f
 8009566:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8009568:	f240 1301 	movw	r3, #257	; 0x101
 800956c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800956e:	1dfb      	adds	r3, r7, #7
 8009570:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009572:	2301      	movs	r3, #1
 8009574:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009576:	f107 0308 	add.w	r3, r7, #8
 800957a:	2100      	movs	r1, #0
 800957c:	4618      	mov	r0, r3
 800957e:	f000 ff0b 	bl	800a398 <hci_send_req>
 8009582:	4603      	mov	r3, r0
 8009584:	2b00      	cmp	r3, #0
 8009586:	da01      	bge.n	800958c <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8009588:	23ff      	movs	r3, #255	; 0xff
 800958a:	e000      	b.n	800958e <aci_gatt_init+0x42>
  return status;
 800958c:	79fb      	ldrb	r3, [r7, #7]
}
 800958e:	4618      	mov	r0, r3
 8009590:	3720      	adds	r7, #32
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8009596:	b590      	push	{r4, r7, lr}
 8009598:	b0cf      	sub	sp, #316	; 0x13c
 800959a:	af00      	add	r7, sp, #0
 800959c:	4604      	mov	r4, r0
 800959e:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80095a2:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 80095a6:	6001      	str	r1, [r0, #0]
 80095a8:	4610      	mov	r0, r2
 80095aa:	4619      	mov	r1, r3
 80095ac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80095b0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80095b4:	4622      	mov	r2, r4
 80095b6:	701a      	strb	r2, [r3, #0]
 80095b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80095bc:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80095c0:	4602      	mov	r2, r0
 80095c2:	701a      	strb	r2, [r3, #0]
 80095c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80095c8:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80095cc:	460a      	mov	r2, r1
 80095ce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80095d0:	f107 0310 	add.w	r3, r7, #16
 80095d4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80095d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80095dc:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d00a      	beq.n	80095fc <aci_gatt_add_service+0x66>
 80095e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80095ea:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	2b02      	cmp	r3, #2
 80095f2:	d101      	bne.n	80095f8 <aci_gatt_add_service+0x62>
 80095f4:	2311      	movs	r3, #17
 80095f6:	e002      	b.n	80095fe <aci_gatt_add_service+0x68>
 80095f8:	2301      	movs	r3, #1
 80095fa:	e000      	b.n	80095fe <aci_gatt_add_service+0x68>
 80095fc:	2303      	movs	r3, #3
 80095fe:	f107 0210 	add.w	r2, r7, #16
 8009602:	4413      	add	r3, r2
 8009604:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009608:	f107 030c 	add.w	r3, r7, #12
 800960c:	2203      	movs	r2, #3
 800960e:	2100      	movs	r1, #0
 8009610:	4618      	mov	r0, r3
 8009612:	f000 fc38 	bl	8009e86 <Osal_MemSet>
  int index_input = 0;
 8009616:	2300      	movs	r3, #0
 8009618:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800961c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009620:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009624:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8009628:	7812      	ldrb	r2, [r2, #0]
 800962a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800962c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009630:	3301      	adds	r3, #1
 8009632:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8009636:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800963a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	2b01      	cmp	r3, #1
 8009642:	d002      	beq.n	800964a <aci_gatt_add_service+0xb4>
 8009644:	2b02      	cmp	r3, #2
 8009646:	d004      	beq.n	8009652 <aci_gatt_add_service+0xbc>
 8009648:	e007      	b.n	800965a <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800964a:	2302      	movs	r3, #2
 800964c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009650:	e005      	b.n	800965e <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8009652:	2310      	movs	r3, #16
 8009654:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009658:	e001      	b.n	800965e <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800965a:	2397      	movs	r3, #151	; 0x97
 800965c:	e06c      	b.n	8009738 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800965e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009662:	1c58      	adds	r0, r3, #1
 8009664:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8009668:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800966c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009670:	6819      	ldr	r1, [r3, #0]
 8009672:	f000 fbf8 	bl	8009e66 <Osal_MemCpy>
    index_input += size;
 8009676:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800967a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800967e:	4413      	add	r3, r2
 8009680:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8009684:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009688:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800968c:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8009690:	7812      	ldrb	r2, [r2, #0]
 8009692:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009694:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009698:	3301      	adds	r3, #1
 800969a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800969e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096a2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80096a6:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80096aa:	7812      	ldrb	r2, [r2, #0]
 80096ac:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80096ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096b2:	3301      	adds	r3, #1
 80096b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80096b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096bc:	2218      	movs	r2, #24
 80096be:	2100      	movs	r1, #0
 80096c0:	4618      	mov	r0, r3
 80096c2:	f000 fbe0 	bl	8009e86 <Osal_MemSet>
  rq.ogf = 0x3f;
 80096c6:	233f      	movs	r3, #63	; 0x3f
 80096c8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80096cc:	f44f 7381 	mov.w	r3, #258	; 0x102
 80096d0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80096d4:	f107 0310 	add.w	r3, r7, #16
 80096d8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80096dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80096e4:	f107 030c 	add.w	r3, r7, #12
 80096e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80096ec:	2303      	movs	r3, #3
 80096ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80096f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096f6:	2100      	movs	r1, #0
 80096f8:	4618      	mov	r0, r3
 80096fa:	f000 fe4d 	bl	800a398 <hci_send_req>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	da01      	bge.n	8009708 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8009704:	23ff      	movs	r3, #255	; 0xff
 8009706:	e017      	b.n	8009738 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8009708:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800970c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d005      	beq.n	8009722 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8009716:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800971a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	e00a      	b.n	8009738 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8009722:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009726:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800972a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800972e:	b29a      	uxth	r2, r3
 8009730:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009734:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800973e:	46bd      	mov	sp, r7
 8009740:	bd90      	pop	{r4, r7, pc}

08009742 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8009742:	b590      	push	{r4, r7, lr}
 8009744:	b0d1      	sub	sp, #324	; 0x144
 8009746:	af00      	add	r7, sp, #0
 8009748:	4604      	mov	r4, r0
 800974a:	4608      	mov	r0, r1
 800974c:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8009750:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8009754:	600a      	str	r2, [r1, #0]
 8009756:	4619      	mov	r1, r3
 8009758:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800975c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009760:	4622      	mov	r2, r4
 8009762:	801a      	strh	r2, [r3, #0]
 8009764:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009768:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800976c:	4602      	mov	r2, r0
 800976e:	701a      	strb	r2, [r3, #0]
 8009770:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009774:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8009778:	460a      	mov	r2, r1
 800977a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800977c:	f107 0318 	add.w	r3, r7, #24
 8009780:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8009784:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009788:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	2b01      	cmp	r3, #1
 8009790:	d00a      	beq.n	80097a8 <aci_gatt_add_char+0x66>
 8009792:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009796:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	2b02      	cmp	r3, #2
 800979e:	d101      	bne.n	80097a4 <aci_gatt_add_char+0x62>
 80097a0:	2313      	movs	r3, #19
 80097a2:	e002      	b.n	80097aa <aci_gatt_add_char+0x68>
 80097a4:	2303      	movs	r3, #3
 80097a6:	e000      	b.n	80097aa <aci_gatt_add_char+0x68>
 80097a8:	2305      	movs	r3, #5
 80097aa:	f107 0218 	add.w	r2, r7, #24
 80097ae:	4413      	add	r3, r2
 80097b0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80097b4:	f107 0314 	add.w	r3, r7, #20
 80097b8:	2203      	movs	r2, #3
 80097ba:	2100      	movs	r1, #0
 80097bc:	4618      	mov	r0, r3
 80097be:	f000 fb62 	bl	8009e86 <Osal_MemSet>
  int index_input = 0;
 80097c2:	2300      	movs	r3, #0
 80097c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 80097c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80097cc:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80097d0:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80097d4:	8812      	ldrh	r2, [r2, #0]
 80097d6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80097d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80097dc:	3302      	adds	r3, #2
 80097de:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80097e2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80097e6:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80097ea:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80097ee:	7812      	ldrb	r2, [r2, #0]
 80097f0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80097f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80097f6:	3301      	adds	r3, #1
 80097f8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80097fc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009800:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	2b01      	cmp	r3, #1
 8009808:	d002      	beq.n	8009810 <aci_gatt_add_char+0xce>
 800980a:	2b02      	cmp	r3, #2
 800980c:	d004      	beq.n	8009818 <aci_gatt_add_char+0xd6>
 800980e:	e007      	b.n	8009820 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8009810:	2302      	movs	r3, #2
 8009812:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8009816:	e005      	b.n	8009824 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8009818:	2310      	movs	r3, #16
 800981a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800981e:	e001      	b.n	8009824 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8009820:	2397      	movs	r3, #151	; 0x97
 8009822:	e091      	b.n	8009948 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8009824:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009828:	1cd8      	adds	r0, r3, #3
 800982a:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800982e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009832:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009836:	6819      	ldr	r1, [r3, #0]
 8009838:	f000 fb15 	bl	8009e66 <Osal_MemCpy>
    index_input += size;
 800983c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8009840:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009844:	4413      	add	r3, r2
 8009846:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800984a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800984e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009852:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8009856:	8812      	ldrh	r2, [r2, #0]
 8009858:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800985a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800985e:	3302      	adds	r3, #2
 8009860:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8009864:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009868:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800986c:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800986e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009872:	3301      	adds	r3, #1
 8009874:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8009878:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800987c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009880:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8009882:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009886:	3301      	adds	r3, #1
 8009888:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800988c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009890:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8009894:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8009896:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800989a:	3301      	adds	r3, #1
 800989c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80098a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80098a4:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80098a8:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80098aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80098ae:	3301      	adds	r3, #1
 80098b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80098b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80098b8:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 80098bc:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80098be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80098c2:	3301      	adds	r3, #1
 80098c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80098c8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80098cc:	2218      	movs	r2, #24
 80098ce:	2100      	movs	r1, #0
 80098d0:	4618      	mov	r0, r3
 80098d2:	f000 fad8 	bl	8009e86 <Osal_MemSet>
  rq.ogf = 0x3f;
 80098d6:	233f      	movs	r3, #63	; 0x3f
 80098d8:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 80098dc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80098e0:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80098e4:	f107 0318 	add.w	r3, r7, #24
 80098e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80098ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80098f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80098f4:	f107 0314 	add.w	r3, r7, #20
 80098f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80098fc:	2303      	movs	r3, #3
 80098fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009902:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009906:	2100      	movs	r1, #0
 8009908:	4618      	mov	r0, r3
 800990a:	f000 fd45 	bl	800a398 <hci_send_req>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	da01      	bge.n	8009918 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8009914:	23ff      	movs	r3, #255	; 0xff
 8009916:	e017      	b.n	8009948 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8009918:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800991c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d005      	beq.n	8009932 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8009926:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800992a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	e00a      	b.n	8009948 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8009932:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009936:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800993a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800993e:	b29a      	uxth	r2, r3
 8009940:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009944:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800994e:	46bd      	mov	sp, r7
 8009950:	bd90      	pop	{r4, r7, pc}

08009952 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8009952:	b5b0      	push	{r4, r5, r7, lr}
 8009954:	b0cc      	sub	sp, #304	; 0x130
 8009956:	af00      	add	r7, sp, #0
 8009958:	4605      	mov	r5, r0
 800995a:	460c      	mov	r4, r1
 800995c:	4610      	mov	r0, r2
 800995e:	4619      	mov	r1, r3
 8009960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009964:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009968:	462a      	mov	r2, r5
 800996a:	801a      	strh	r2, [r3, #0]
 800996c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009970:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009974:	4622      	mov	r2, r4
 8009976:	801a      	strh	r2, [r3, #0]
 8009978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800997c:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8009980:	4602      	mov	r2, r0
 8009982:	701a      	strb	r2, [r3, #0]
 8009984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009988:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800998c:	460a      	mov	r2, r1
 800998e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8009990:	f107 0310 	add.w	r3, r7, #16
 8009994:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800999c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80099a0:	2200      	movs	r2, #0
 80099a2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80099a4:	2300      	movs	r3, #0
 80099a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80099aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80099b2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80099b6:	8812      	ldrh	r2, [r2, #0]
 80099b8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80099ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80099be:	3302      	adds	r3, #2
 80099c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80099c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80099cc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80099d0:	8812      	ldrh	r2, [r2, #0]
 80099d2:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80099d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80099d8:	3302      	adds	r3, #2
 80099da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 80099de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80099e6:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80099ea:	7812      	ldrb	r2, [r2, #0]
 80099ec:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80099ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80099f2:	3301      	adds	r3, #1
 80099f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80099f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a00:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8009a04:	7812      	ldrb	r2, [r2, #0]
 8009a06:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009a08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8009a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a16:	1d98      	adds	r0, r3, #6
 8009a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a1c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	461a      	mov	r2, r3
 8009a24:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8009a28:	f000 fa1d 	bl	8009e66 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8009a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a30:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009a3a:	4413      	add	r3, r2
 8009a3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009a40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009a44:	2218      	movs	r2, #24
 8009a46:	2100      	movs	r1, #0
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f000 fa1c 	bl	8009e86 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009a4e:	233f      	movs	r3, #63	; 0x3f
 8009a50:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8009a54:	f44f 7383 	mov.w	r3, #262	; 0x106
 8009a58:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009a5c:	f107 0310 	add.w	r3, r7, #16
 8009a60:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009a64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009a6c:	f107 030f 	add.w	r3, r7, #15
 8009a70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009a74:	2301      	movs	r3, #1
 8009a76:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009a7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009a7e:	2100      	movs	r1, #0
 8009a80:	4618      	mov	r0, r3
 8009a82:	f000 fc89 	bl	800a398 <hci_send_req>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	da01      	bge.n	8009a90 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8009a8c:	23ff      	movs	r3, #255	; 0xff
 8009a8e:	e004      	b.n	8009a9a <aci_gatt_update_char_value+0x148>
  return status;
 8009a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a94:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009a98:	781b      	ldrb	r3, [r3, #0]
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bdb0      	pop	{r4, r5, r7, pc}

08009aa4 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b0cc      	sub	sp, #304	; 0x130
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009aae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ab2:	601a      	str	r2, [r3, #0]
 8009ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ab8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009abc:	4602      	mov	r2, r0
 8009abe:	701a      	strb	r2, [r3, #0]
 8009ac0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ac4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009ac8:	460a      	mov	r2, r1
 8009aca:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8009acc:	f107 0310 	add.w	r3, r7, #16
 8009ad0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ad8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009adc:	2200      	movs	r2, #0
 8009ade:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8009ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009aee:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009af2:	7812      	ldrb	r2, [r2, #0]
 8009af4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009af6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009afa:	3301      	adds	r3, #1
 8009afc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8009b00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b04:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009b08:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009b0c:	7812      	ldrb	r2, [r2, #0]
 8009b0e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009b10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b14:	3301      	adds	r3, #1
 8009b16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8009b1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b1e:	1c98      	adds	r0, r3, #2
 8009b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b24:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009b28:	781a      	ldrb	r2, [r3, #0]
 8009b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b32:	6819      	ldr	r1, [r3, #0]
 8009b34:	f000 f997 	bl	8009e66 <Osal_MemCpy>
  index_input += Length;
 8009b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b3c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009b46:	4413      	add	r3, r2
 8009b48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009b4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009b50:	2218      	movs	r2, #24
 8009b52:	2100      	movs	r1, #0
 8009b54:	4618      	mov	r0, r3
 8009b56:	f000 f996 	bl	8009e86 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009b5a:	233f      	movs	r3, #63	; 0x3f
 8009b5c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8009b60:	230c      	movs	r3, #12
 8009b62:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009b66:	f107 0310 	add.w	r3, r7, #16
 8009b6a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009b6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b72:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009b76:	f107 030f 	add.w	r3, r7, #15
 8009b7a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009b84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009b88:	2100      	movs	r1, #0
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f000 fc04 	bl	800a398 <hci_send_req>
 8009b90:	4603      	mov	r3, r0
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	da01      	bge.n	8009b9a <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8009b96:	23ff      	movs	r3, #255	; 0xff
 8009b98:	e004      	b.n	8009ba4 <aci_hal_write_config_data+0x100>
  return status;
 8009b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b9e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009ba2:	781b      	ldrb	r3, [r3, #0]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b0cc      	sub	sp, #304	; 0x130
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bba:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009bbe:	701a      	strb	r2, [r3, #0]
 8009bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bc4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009bc8:	460a      	mov	r2, r1
 8009bca:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8009bcc:	f107 0310 	add.w	r3, r7, #16
 8009bd0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bd8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009bdc:	2200      	movs	r2, #0
 8009bde:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009be0:	2300      	movs	r3, #0
 8009be2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8009be6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009bee:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009bf2:	7812      	ldrb	r2, [r2, #0]
 8009bf4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009bf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8009c00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c04:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009c08:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009c0c:	7812      	ldrb	r2, [r2, #0]
 8009c0e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009c10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c14:	3301      	adds	r3, #1
 8009c16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009c1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009c1e:	2218      	movs	r2, #24
 8009c20:	2100      	movs	r1, #0
 8009c22:	4618      	mov	r0, r3
 8009c24:	f000 f92f 	bl	8009e86 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009c28:	233f      	movs	r3, #63	; 0x3f
 8009c2a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8009c2e:	230f      	movs	r3, #15
 8009c30:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009c34:	f107 0310 	add.w	r3, r7, #16
 8009c38:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009c3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c40:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009c44:	f107 030f 	add.w	r3, r7, #15
 8009c48:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009c52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009c56:	2100      	movs	r1, #0
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f000 fb9d 	bl	800a398 <hci_send_req>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	da01      	bge.n	8009c68 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8009c64:	23ff      	movs	r3, #255	; 0xff
 8009c66:	e004      	b.n	8009c72 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8009c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c6c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009c70:	781b      	ldrb	r3, [r3, #0]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b0cc      	sub	sp, #304	; 0x130
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	4602      	mov	r2, r0
 8009c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c88:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009c8c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8009c8e:	f107 0310 	add.w	r3, r7, #16
 8009c92:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c9a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8009ca8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009cb0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009cb4:	8812      	ldrh	r2, [r2, #0]
 8009cb6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009cb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cbc:	3302      	adds	r3, #2
 8009cbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009cc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009cc6:	2218      	movs	r2, #24
 8009cc8:	2100      	movs	r1, #0
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f000 f8db 	bl	8009e86 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009cd0:	233f      	movs	r3, #63	; 0x3f
 8009cd2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8009cd6:	2318      	movs	r3, #24
 8009cd8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009cdc:	f107 0310 	add.w	r3, r7, #16
 8009ce0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009ce4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ce8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009cec:	f107 030f 	add.w	r3, r7, #15
 8009cf0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009cfa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009cfe:	2100      	movs	r1, #0
 8009d00:	4618      	mov	r0, r3
 8009d02:	f000 fb49 	bl	800a398 <hci_send_req>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	da01      	bge.n	8009d10 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8009d0c:	23ff      	movs	r3, #255	; 0xff
 8009d0e:	e004      	b.n	8009d1a <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8009d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d14:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009d18:	781b      	ldrb	r3, [r3, #0]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b088      	sub	sp, #32
 8009d28:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009d2e:	f107 0308 	add.w	r3, r7, #8
 8009d32:	2218      	movs	r2, #24
 8009d34:	2100      	movs	r1, #0
 8009d36:	4618      	mov	r0, r3
 8009d38:	f000 f8a5 	bl	8009e86 <Osal_MemSet>
  rq.ogf = 0x03;
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8009d40:	2303      	movs	r3, #3
 8009d42:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009d44:	1dfb      	adds	r3, r7, #7
 8009d46:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009d4c:	f107 0308 	add.w	r3, r7, #8
 8009d50:	2100      	movs	r1, #0
 8009d52:	4618      	mov	r0, r3
 8009d54:	f000 fb20 	bl	800a398 <hci_send_req>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	da01      	bge.n	8009d62 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009d5e:	23ff      	movs	r3, #255	; 0xff
 8009d60:	e000      	b.n	8009d64 <hci_reset+0x40>
  return status;
 8009d62:	79fb      	ldrb	r3, [r7, #7]
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3720      	adds	r7, #32
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8009d6c:	b590      	push	{r4, r7, lr}
 8009d6e:	b0cd      	sub	sp, #308	; 0x134
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	4604      	mov	r4, r0
 8009d74:	4608      	mov	r0, r1
 8009d76:	4611      	mov	r1, r2
 8009d78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d7c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009d80:	4622      	mov	r2, r4
 8009d82:	701a      	strb	r2, [r3, #0]
 8009d84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d88:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	701a      	strb	r2, [r3, #0]
 8009d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d94:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009d98:	460a      	mov	r2, r1
 8009d9a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8009d9c:	f107 0310 	add.w	r3, r7, #16
 8009da0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009da4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009da8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009dac:	2200      	movs	r2, #0
 8009dae:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009db0:	2300      	movs	r3, #0
 8009db2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8009db6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009dbe:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009dc2:	7812      	ldrb	r2, [r2, #0]
 8009dc4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009dc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009dca:	3301      	adds	r3, #1
 8009dcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8009dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dd4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009dd8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009ddc:	7812      	ldrb	r2, [r2, #0]
 8009dde:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009de0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009de4:	3301      	adds	r3, #1
 8009de6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8009dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009df2:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009df6:	7812      	ldrb	r2, [r2, #0]
 8009df8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009dfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009dfe:	3301      	adds	r3, #1
 8009e00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009e04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009e08:	2218      	movs	r2, #24
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f000 f83a 	bl	8009e86 <Osal_MemSet>
  rq.ogf = 0x08;
 8009e12:	2308      	movs	r3, #8
 8009e14:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8009e18:	2331      	movs	r3, #49	; 0x31
 8009e1a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009e1e:	f107 0310 	add.w	r3, r7, #16
 8009e22:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009e26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009e2a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009e2e:	f107 030f 	add.w	r3, r7, #15
 8009e32:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009e36:	2301      	movs	r3, #1
 8009e38:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009e3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009e40:	2100      	movs	r1, #0
 8009e42:	4618      	mov	r0, r3
 8009e44:	f000 faa8 	bl	800a398 <hci_send_req>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	da01      	bge.n	8009e52 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8009e4e:	23ff      	movs	r3, #255	; 0xff
 8009e50:	e004      	b.n	8009e5c <hci_le_set_default_phy+0xf0>
  return status;
 8009e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e56:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009e5a:	781b      	ldrb	r3, [r3, #0]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd90      	pop	{r4, r7, pc}

08009e66 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b084      	sub	sp, #16
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	60f8      	str	r0, [r7, #12]
 8009e6e:	60b9      	str	r1, [r7, #8]
 8009e70:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	68b9      	ldr	r1, [r7, #8]
 8009e76:	68f8      	ldr	r0, [r7, #12]
 8009e78:	f004 f811 	bl	800de9e <memcpy>
 8009e7c:	4603      	mov	r3, r0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b084      	sub	sp, #16
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	60f8      	str	r0, [r7, #12]
 8009e8e:	60b9      	str	r1, [r7, #8]
 8009e90:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	68b9      	ldr	r1, [r7, #8]
 8009e96:	68f8      	ldr	r0, [r7, #12]
 8009e98:	f003 ff6e 	bl	800dd78 <memset>
 8009e9c:	4603      	mov	r3, r0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3710      	adds	r7, #16
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}

08009ea6 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8009ea6:	b480      	push	{r7}
 8009ea8:	af00      	add	r7, sp, #0
  return;
 8009eaa:	bf00      	nop
}
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	af00      	add	r7, sp, #0
  return;
 8009eb8:	bf00      	nop
}
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr

08009ec2 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8009ec2:	b480      	push	{r7}
 8009ec4:	af00      	add	r7, sp, #0
  return;
 8009ec6:	bf00      	nop
}
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	af00      	add	r7, sp, #0
  return;
 8009ed4:	bf00      	nop
}
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr

08009ede <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8009ede:	b480      	push	{r7}
 8009ee0:	af00      	add	r7, sp, #0
  return;
 8009ee2:	bf00      	nop
}
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8009eec:	b480      	push	{r7}
 8009eee:	af00      	add	r7, sp, #0
  return;
 8009ef0:	bf00      	nop
}
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr

08009efa <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8009efa:	b480      	push	{r7}
 8009efc:	af00      	add	r7, sp, #0
  return;
 8009efe:	bf00      	nop
}
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8009f08:	b480      	push	{r7}
 8009f0a:	af00      	add	r7, sp, #0
  return;
 8009f0c:	bf00      	nop
}
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr

08009f16 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8009f16:	b480      	push	{r7}
 8009f18:	af00      	add	r7, sp, #0
  return;
 8009f1a:	bf00      	nop
}
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8009f24:	b480      	push	{r7}
 8009f26:	af00      	add	r7, sp, #0
  return;
 8009f28:	bf00      	nop
}
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr

08009f32 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8009f32:	b480      	push	{r7}
 8009f34:	af00      	add	r7, sp, #0
  return;
 8009f36:	bf00      	nop
}
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8009f40:	b480      	push	{r7}
 8009f42:	af00      	add	r7, sp, #0
  return;
 8009f44:	bf00      	nop
}
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr

08009f4e <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8009f4e:	b480      	push	{r7}
 8009f50:	af00      	add	r7, sp, #0
  return;
 8009f52:	bf00      	nop
}
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	af00      	add	r7, sp, #0
  return;
 8009f60:	bf00      	nop
}
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr

08009f6a <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8009f6a:	b480      	push	{r7}
 8009f6c:	af00      	add	r7, sp, #0
  return;
 8009f6e:	bf00      	nop
}
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8009f78:	b480      	push	{r7}
 8009f7a:	af00      	add	r7, sp, #0
  return;
 8009f7c:	bf00      	nop
}
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr

08009f86 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8009f86:	b480      	push	{r7}
 8009f88:	af00      	add	r7, sp, #0
  return;
 8009f8a:	bf00      	nop
}
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8009f98:	4b04      	ldr	r3, [pc, #16]	; (8009fac <SVCCTL_Init+0x18>)
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8009f9e:	4b04      	ldr	r3, [pc, #16]	; (8009fb0 <SVCCTL_Init+0x1c>)
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8009fa4:	f000 f806 	bl	8009fb4 <SVCCTL_SvcInit>

  return;
 8009fa8:	bf00      	nop
}
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	20000094 	.word	0x20000094
 8009fb0:	200000b4 	.word	0x200000b4

08009fb4 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	af00      	add	r7, sp, #0
  BAS_Init();
 8009fb8:	f7ff ff75 	bl	8009ea6 <BAS_Init>

  BLS_Init();
 8009fbc:	f7ff ff7a 	bl	8009eb4 <BLS_Init>

  CRS_STM_Init();
 8009fc0:	f7ff ff7f 	bl	8009ec2 <CRS_STM_Init>

  DIS_Init();
 8009fc4:	f7ff ff84 	bl	8009ed0 <DIS_Init>

  EDS_STM_Init();
 8009fc8:	f7ff ff89 	bl	8009ede <EDS_STM_Init>

  HIDS_Init();
 8009fcc:	f7ff ff8e 	bl	8009eec <HIDS_Init>

  HRS_Init();
 8009fd0:	f7ff ff93 	bl	8009efa <HRS_Init>

  HTS_Init();
 8009fd4:	f7ff ff98 	bl	8009f08 <HTS_Init>

  IAS_Init();
 8009fd8:	f7ff ff9d 	bl	8009f16 <IAS_Init>

  LLS_Init();
 8009fdc:	f7ff ffa2 	bl	8009f24 <LLS_Init>

  TPS_Init();
 8009fe0:	f7ff ffa7 	bl	8009f32 <TPS_Init>

  MOTENV_STM_Init();
 8009fe4:	f7ff ffac 	bl	8009f40 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8009fe8:	f7ff ffb1 	bl	8009f4e <P2PS_STM_Init>

  ZDD_STM_Init();
 8009fec:	f7ff ffb6 	bl	8009f5c <ZDD_STM_Init>

  OTAS_STM_Init();
 8009ff0:	f7ff ffbb 	bl	8009f6a <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8009ff4:	f7ff ffc7 	bl	8009f86 <BVOPUS_STM_Init>

  MESH_Init();
 8009ff8:	f7ff ffbe 	bl	8009f78 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8009ffc:	f002 fe3a 	bl	800cc74 <SVCCTL_InitCustomSvc>
  
  return;
 800a000:	bf00      	nop
}
 800a002:	bd80      	pop	{r7, pc}

0800a004 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800a004:	b480      	push	{r7}
 800a006:	b083      	sub	sp, #12
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800a00c:	4b09      	ldr	r3, [pc, #36]	; (800a034 <SVCCTL_RegisterSvcHandler+0x30>)
 800a00e:	7f1b      	ldrb	r3, [r3, #28]
 800a010:	4619      	mov	r1, r3
 800a012:	4a08      	ldr	r2, [pc, #32]	; (800a034 <SVCCTL_RegisterSvcHandler+0x30>)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800a01a:	4b06      	ldr	r3, [pc, #24]	; (800a034 <SVCCTL_RegisterSvcHandler+0x30>)
 800a01c:	7f1b      	ldrb	r3, [r3, #28]
 800a01e:	3301      	adds	r3, #1
 800a020:	b2da      	uxtb	r2, r3
 800a022:	4b04      	ldr	r3, [pc, #16]	; (800a034 <SVCCTL_RegisterSvcHandler+0x30>)
 800a024:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800a026:	bf00      	nop
}
 800a028:	370c      	adds	r7, #12
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr
 800a032:	bf00      	nop
 800a034:	20000094 	.word	0x20000094

0800a038 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b086      	sub	sp, #24
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	3301      	adds	r3, #1
 800a044:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800a046:	2300      	movs	r3, #0
 800a048:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	2bff      	cmp	r3, #255	; 0xff
 800a050:	d125      	bne.n	800a09e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	3302      	adds	r3, #2
 800a056:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	881b      	ldrh	r3, [r3, #0]
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a062:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a066:	d118      	bne.n	800a09a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a068:	2300      	movs	r3, #0
 800a06a:	757b      	strb	r3, [r7, #21]
 800a06c:	e00d      	b.n	800a08a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800a06e:	7d7b      	ldrb	r3, [r7, #21]
 800a070:	4a1a      	ldr	r2, [pc, #104]	; (800a0dc <SVCCTL_UserEvtRx+0xa4>)
 800a072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	4798      	blx	r3
 800a07a:	4603      	mov	r3, r0
 800a07c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800a07e:	7dfb      	ldrb	r3, [r7, #23]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d108      	bne.n	800a096 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a084:	7d7b      	ldrb	r3, [r7, #21]
 800a086:	3301      	adds	r3, #1
 800a088:	757b      	strb	r3, [r7, #21]
 800a08a:	4b14      	ldr	r3, [pc, #80]	; (800a0dc <SVCCTL_UserEvtRx+0xa4>)
 800a08c:	7f1b      	ldrb	r3, [r3, #28]
 800a08e:	7d7a      	ldrb	r2, [r7, #21]
 800a090:	429a      	cmp	r2, r3
 800a092:	d3ec      	bcc.n	800a06e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800a094:	e002      	b.n	800a09c <SVCCTL_UserEvtRx+0x64>
              break;
 800a096:	bf00      	nop
          break;
 800a098:	e000      	b.n	800a09c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800a09a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800a09c:	e000      	b.n	800a0a0 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800a09e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800a0a0:	7dfb      	ldrb	r3, [r7, #23]
 800a0a2:	2b02      	cmp	r3, #2
 800a0a4:	d00f      	beq.n	800a0c6 <SVCCTL_UserEvtRx+0x8e>
 800a0a6:	2b02      	cmp	r3, #2
 800a0a8:	dc10      	bgt.n	800a0cc <SVCCTL_UserEvtRx+0x94>
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d002      	beq.n	800a0b4 <SVCCTL_UserEvtRx+0x7c>
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d006      	beq.n	800a0c0 <SVCCTL_UserEvtRx+0x88>
 800a0b2:	e00b      	b.n	800a0cc <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f001 fcb3 	bl	800ba20 <SVCCTL_App_Notification>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	75bb      	strb	r3, [r7, #22]
      break;
 800a0be:	e008      	b.n	800a0d2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	75bb      	strb	r3, [r7, #22]
      break;
 800a0c4:	e005      	b.n	800a0d2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	75bb      	strb	r3, [r7, #22]
      break;
 800a0ca:	e002      	b.n	800a0d2 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	75bb      	strb	r3, [r7, #22]
      break;
 800a0d0:	bf00      	nop
  }

  return (return_status);
 800a0d2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3718      	adds	r7, #24
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	20000094 	.word	0x20000094

0800a0e0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b088      	sub	sp, #32
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a0e8:	f107 030c 	add.w	r3, r7, #12
 800a0ec:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800a0f4:	69fb      	ldr	r3, [r7, #28]
 800a0f6:	212e      	movs	r1, #46	; 0x2e
 800a0f8:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800a0fc:	f000 fae8 	bl	800a6d0 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	330b      	adds	r3, #11
 800a104:	78db      	ldrb	r3, [r3, #3]
}
 800a106:	4618      	mov	r0, r3
 800a108:	3720      	adds	r7, #32
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b088      	sub	sp, #32
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a116:	f107 030c 	add.w	r3, r7, #12
 800a11a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	210f      	movs	r1, #15
 800a126:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800a12a:	f000 fad1 	bl	800a6d0 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a12e:	69fb      	ldr	r3, [r7, #28]
 800a130:	330b      	adds	r3, #11
 800a132:	78db      	ldrb	r3, [r3, #3]
}
 800a134:	4618      	mov	r0, r3
 800a136:	3720      	adds	r7, #32
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b088      	sub	sp, #32
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a144:	f107 030c 	add.w	r3, r7, #12
 800a148:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	2110      	movs	r1, #16
 800a150:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800a154:	f000 fabc 	bl	800a6d0 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a158:	69fb      	ldr	r3, [r7, #28]
 800a15a:	330b      	adds	r3, #11
 800a15c:	78db      	ldrb	r3, [r3, #3]
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3720      	adds	r7, #32
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
	...

0800a168 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800a168:	b480      	push	{r7}
 800a16a:	b08b      	sub	sp, #44	; 0x2c
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800a170:	2300      	movs	r3, #0
 800a172:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800a174:	2300      	movs	r3, #0
 800a176:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800a178:	2300      	movs	r3, #0
 800a17a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800a17c:	2300      	movs	r3, #0
 800a17e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800a180:	2300      	movs	r3, #0
 800a182:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800a184:	2300      	movs	r3, #0
 800a186:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800a188:	2300      	movs	r3, #0
 800a18a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800a18c:	2300      	movs	r3, #0
 800a18e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800a190:	4b4a      	ldr	r3, [pc, #296]	; (800a2bc <SHCI_GetWirelessFwInfo+0x154>)
 800a192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a194:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a198:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a1a2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a44      	ldr	r2, [pc, #272]	; (800a2c0 <SHCI_GetWirelessFwInfo+0x158>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d10f      	bne.n	800a1d4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	695b      	ldr	r3, [r3, #20]
 800a1b8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	699b      	ldr	r3, [r3, #24]
 800a1be:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	69db      	ldr	r3, [r3, #28]
 800a1c4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	691b      	ldr	r3, [r3, #16]
 800a1d0:	617b      	str	r3, [r7, #20]
 800a1d2:	e01a      	b.n	800a20a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a1dc:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a1e0:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	691b      	ldr	r3, [r3, #16]
 800a1e8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	695b      	ldr	r3, [r3, #20]
 800a1f0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	699b      	ldr	r3, [r3, #24]
 800a1f8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20c:	0e1b      	lsrs	r3, r3, #24
 800a20e:	b2da      	uxtb	r2, r3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a216:	0c1b      	lsrs	r3, r3, #16
 800a218:	b2da      	uxtb	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a220:	0a1b      	lsrs	r3, r3, #8
 800a222:	b2da      	uxtb	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800a228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22a:	091b      	lsrs	r3, r3, #4
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	f003 030f 	and.w	r3, r3, #15
 800a232:	b2da      	uxtb	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800a238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	f003 030f 	and.w	r3, r3, #15
 800a240:	b2da      	uxtb	r2, r3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a246:	6a3b      	ldr	r3, [r7, #32]
 800a248:	0e1b      	lsrs	r3, r3, #24
 800a24a:	b2da      	uxtb	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a250:	6a3b      	ldr	r3, [r7, #32]
 800a252:	0c1b      	lsrs	r3, r3, #16
 800a254:	b2da      	uxtb	r2, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800a25a:	6a3b      	ldr	r3, [r7, #32]
 800a25c:	0a1b      	lsrs	r3, r3, #8
 800a25e:	b2da      	uxtb	r2, r3
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a264:	6a3b      	ldr	r3, [r7, #32]
 800a266:	b2da      	uxtb	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800a26c:	69fb      	ldr	r3, [r7, #28]
 800a26e:	b2da      	uxtb	r2, r3
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	0e1b      	lsrs	r3, r3, #24
 800a278:	b2da      	uxtb	r2, r3
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	0c1b      	lsrs	r3, r3, #16
 800a282:	b2da      	uxtb	r2, r3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	0a1b      	lsrs	r3, r3, #8
 800a28c:	b2da      	uxtb	r2, r3
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	0e1b      	lsrs	r3, r3, #24
 800a296:	b2da      	uxtb	r2, r3
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	0c1b      	lsrs	r3, r3, #16
 800a2a0:	b2da      	uxtb	r2, r3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	b2da      	uxtb	r2, r3
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	372c      	adds	r7, #44	; 0x2c
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr
 800a2bc:	58004000 	.word	0x58004000
 800a2c0:	a94656b9 	.word	0xa94656b9

0800a2c4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	4a08      	ldr	r2, [pc, #32]	; (800a2f4 <hci_init+0x30>)
 800a2d4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800a2d6:	4a08      	ldr	r2, [pc, #32]	; (800a2f8 <hci_init+0x34>)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800a2dc:	4806      	ldr	r0, [pc, #24]	; (800a2f8 <hci_init+0x34>)
 800a2de:	f000 f979 	bl	800a5d4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f000 f8da 	bl	800a4a0 <TlInit>

  return;
 800a2ec:	bf00      	nop
}
 800a2ee:	3708      	adds	r7, #8
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	20000698 	.word	0x20000698
 800a2f8:	20000670 	.word	0x20000670

0800a2fc <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a302:	4822      	ldr	r0, [pc, #136]	; (800a38c <hci_user_evt_proc+0x90>)
 800a304:	f000 fe10 	bl	800af28 <LST_is_empty>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d12b      	bne.n	800a366 <hci_user_evt_proc+0x6a>
 800a30e:	4b20      	ldr	r3, [pc, #128]	; (800a390 <hci_user_evt_proc+0x94>)
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d027      	beq.n	800a366 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a316:	f107 030c 	add.w	r3, r7, #12
 800a31a:	4619      	mov	r1, r3
 800a31c:	481b      	ldr	r0, [pc, #108]	; (800a38c <hci_user_evt_proc+0x90>)
 800a31e:	f000 fe92 	bl	800b046 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800a322:	4b1c      	ldr	r3, [pc, #112]	; (800a394 <hci_user_evt_proc+0x98>)
 800a324:	69db      	ldr	r3, [r3, #28]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00c      	beq.n	800a344 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800a32e:	2301      	movs	r3, #1
 800a330:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a332:	4b18      	ldr	r3, [pc, #96]	; (800a394 <hci_user_evt_proc+0x98>)
 800a334:	69db      	ldr	r3, [r3, #28]
 800a336:	1d3a      	adds	r2, r7, #4
 800a338:	4610      	mov	r0, r2
 800a33a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800a33c:	793a      	ldrb	r2, [r7, #4]
 800a33e:	4b14      	ldr	r3, [pc, #80]	; (800a390 <hci_user_evt_proc+0x94>)
 800a340:	701a      	strb	r2, [r3, #0]
 800a342:	e002      	b.n	800a34a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a344:	4b12      	ldr	r3, [pc, #72]	; (800a390 <hci_user_evt_proc+0x94>)
 800a346:	2201      	movs	r2, #1
 800a348:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800a34a:	4b11      	ldr	r3, [pc, #68]	; (800a390 <hci_user_evt_proc+0x94>)
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d004      	beq.n	800a35c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	4618      	mov	r0, r3
 800a356:	f000 fc0d 	bl	800ab74 <TL_MM_EvtDone>
 800a35a:	e004      	b.n	800a366 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	4619      	mov	r1, r3
 800a360:	480a      	ldr	r0, [pc, #40]	; (800a38c <hci_user_evt_proc+0x90>)
 800a362:	f000 fe03 	bl	800af6c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a366:	4809      	ldr	r0, [pc, #36]	; (800a38c <hci_user_evt_proc+0x90>)
 800a368:	f000 fdde 	bl	800af28 <LST_is_empty>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d107      	bne.n	800a382 <hci_user_evt_proc+0x86>
 800a372:	4b07      	ldr	r3, [pc, #28]	; (800a390 <hci_user_evt_proc+0x94>)
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d003      	beq.n	800a382 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800a37a:	4804      	ldr	r0, [pc, #16]	; (800a38c <hci_user_evt_proc+0x90>)
 800a37c:	f002 f9ce 	bl	800c71c <hci_notify_asynch_evt>
  }


  return;
 800a380:	bf00      	nop
 800a382:	bf00      	nop
}
 800a384:	3710      	adds	r7, #16
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	bf00      	nop
 800a38c:	200000bc 	.word	0x200000bc
 800a390:	200000c8 	.word	0x200000c8
 800a394:	20000670 	.word	0x20000670

0800a398 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b088      	sub	sp, #32
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800a3a4:	2000      	movs	r0, #0
 800a3a6:	f000 f8d1 	bl	800a54c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	885b      	ldrh	r3, [r3, #2]
 800a3b2:	b21b      	sxth	r3, r3
 800a3b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3b8:	b21a      	sxth	r2, r3
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	881b      	ldrh	r3, [r3, #0]
 800a3be:	029b      	lsls	r3, r3, #10
 800a3c0:	b21b      	sxth	r3, r3
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	b21b      	sxth	r3, r3
 800a3c6:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800a3c8:	4b33      	ldr	r3, [pc, #204]	; (800a498 <hci_send_req+0x100>)
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	b2d9      	uxtb	r1, r3
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	689a      	ldr	r2, [r3, #8]
 800a3d8:	8bbb      	ldrh	r3, [r7, #28]
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f000 f890 	bl	800a500 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800a3e0:	e04e      	b.n	800a480 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800a3e2:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a3e6:	f002 f9b0 	bl	800c74a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a3ea:	e043      	b.n	800a474 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800a3ec:	f107 030c 	add.w	r3, r7, #12
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	482a      	ldr	r0, [pc, #168]	; (800a49c <hci_send_req+0x104>)
 800a3f4:	f000 fe27 	bl	800b046 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	7a5b      	ldrb	r3, [r3, #9]
 800a3fc:	2b0f      	cmp	r3, #15
 800a3fe:	d114      	bne.n	800a42a <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	330b      	adds	r3, #11
 800a404:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	885b      	ldrh	r3, [r3, #2]
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	8bba      	ldrh	r2, [r7, #28]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d104      	bne.n	800a41c <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	691b      	ldr	r3, [r3, #16]
 800a416:	693a      	ldr	r2, [r7, #16]
 800a418:	7812      	ldrb	r2, [r2, #0]
 800a41a:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	785b      	ldrb	r3, [r3, #1]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d027      	beq.n	800a474 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a424:	2301      	movs	r3, #1
 800a426:	77fb      	strb	r3, [r7, #31]
 800a428:	e024      	b.n	800a474 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	330b      	adds	r3, #11
 800a42e:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800a430:	69bb      	ldr	r3, [r7, #24]
 800a432:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a436:	b29b      	uxth	r3, r3
 800a438:	8bba      	ldrh	r2, [r7, #28]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d114      	bne.n	800a468 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	7a9b      	ldrb	r3, [r3, #10]
 800a442:	3b03      	subs	r3, #3
 800a444:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	695a      	ldr	r2, [r3, #20]
 800a44a:	7dfb      	ldrb	r3, [r7, #23]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	bfa8      	it	ge
 800a450:	461a      	movge	r2, r3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6918      	ldr	r0, [r3, #16]
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	1cd9      	adds	r1, r3, #3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	695b      	ldr	r3, [r3, #20]
 800a462:	461a      	mov	r2, r3
 800a464:	f003 fd1b 	bl	800de9e <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800a468:	69bb      	ldr	r3, [r7, #24]
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d001      	beq.n	800a474 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a470:	2301      	movs	r3, #1
 800a472:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a474:	4809      	ldr	r0, [pc, #36]	; (800a49c <hci_send_req+0x104>)
 800a476:	f000 fd57 	bl	800af28 <LST_is_empty>
 800a47a:	4603      	mov	r3, r0
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d0b5      	beq.n	800a3ec <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800a480:	7ffb      	ldrb	r3, [r7, #31]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d0ad      	beq.n	800a3e2 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800a486:	2001      	movs	r0, #1
 800a488:	f000 f860 	bl	800a54c <NotifyCmdStatus>

  return 0;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3720      	adds	r7, #32
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	2000069c 	.word	0x2000069c
 800a49c:	20000690 	.word	0x20000690

0800a4a0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b086      	sub	sp, #24
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800a4a8:	480f      	ldr	r0, [pc, #60]	; (800a4e8 <TlInit+0x48>)
 800a4aa:	f000 fd2d 	bl	800af08 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800a4ae:	4a0f      	ldr	r2, [pc, #60]	; (800a4ec <TlInit+0x4c>)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800a4b4:	480e      	ldr	r0, [pc, #56]	; (800a4f0 <TlInit+0x50>)
 800a4b6:	f000 fd27 	bl	800af08 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a4ba:	4b0e      	ldr	r3, [pc, #56]	; (800a4f4 <TlInit+0x54>)
 800a4bc:	2201      	movs	r2, #1
 800a4be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800a4c0:	4b0d      	ldr	r3, [pc, #52]	; (800a4f8 <TlInit+0x58>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d00a      	beq.n	800a4de <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800a4cc:	4b0b      	ldr	r3, [pc, #44]	; (800a4fc <TlInit+0x5c>)
 800a4ce:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800a4d0:	4b09      	ldr	r3, [pc, #36]	; (800a4f8 <TlInit+0x58>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f107 0208 	add.w	r2, r7, #8
 800a4d8:	4610      	mov	r0, r2
 800a4da:	4798      	blx	r3
  }

  return;
 800a4dc:	bf00      	nop
 800a4de:	bf00      	nop
}
 800a4e0:	3718      	adds	r7, #24
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	20000690 	.word	0x20000690
 800a4ec:	200000c4 	.word	0x200000c4
 800a4f0:	200000bc 	.word	0x200000bc
 800a4f4:	200000c8 	.word	0x200000c8
 800a4f8:	20000670 	.word	0x20000670
 800a4fc:	0800a58d 	.word	0x0800a58d

0800a500 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	4603      	mov	r3, r0
 800a508:	603a      	str	r2, [r7, #0]
 800a50a:	80fb      	strh	r3, [r7, #6]
 800a50c:	460b      	mov	r3, r1
 800a50e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800a510:	4b0c      	ldr	r3, [pc, #48]	; (800a544 <SendCmd+0x44>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	88fa      	ldrh	r2, [r7, #6]
 800a516:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800a51a:	4b0a      	ldr	r3, [pc, #40]	; (800a544 <SendCmd+0x44>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	797a      	ldrb	r2, [r7, #5]
 800a520:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800a522:	4b08      	ldr	r3, [pc, #32]	; (800a544 <SendCmd+0x44>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	330c      	adds	r3, #12
 800a528:	797a      	ldrb	r2, [r7, #5]
 800a52a:	6839      	ldr	r1, [r7, #0]
 800a52c:	4618      	mov	r0, r3
 800a52e:	f003 fcb6 	bl	800de9e <memcpy>

  hciContext.io.Send(0,0);
 800a532:	4b05      	ldr	r3, [pc, #20]	; (800a548 <SendCmd+0x48>)
 800a534:	691b      	ldr	r3, [r3, #16]
 800a536:	2100      	movs	r1, #0
 800a538:	2000      	movs	r0, #0
 800a53a:	4798      	blx	r3

  return;
 800a53c:	bf00      	nop
}
 800a53e:	3708      	adds	r7, #8
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	200000c4 	.word	0x200000c4
 800a548:	20000670 	.word	0x20000670

0800a54c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	4603      	mov	r3, r0
 800a554:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800a556:	79fb      	ldrb	r3, [r7, #7]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d108      	bne.n	800a56e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800a55c:	4b0a      	ldr	r3, [pc, #40]	; (800a588 <NotifyCmdStatus+0x3c>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d00d      	beq.n	800a580 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800a564:	4b08      	ldr	r3, [pc, #32]	; (800a588 <NotifyCmdStatus+0x3c>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2000      	movs	r0, #0
 800a56a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800a56c:	e008      	b.n	800a580 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800a56e:	4b06      	ldr	r3, [pc, #24]	; (800a588 <NotifyCmdStatus+0x3c>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d004      	beq.n	800a580 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800a576:	4b04      	ldr	r3, [pc, #16]	; (800a588 <NotifyCmdStatus+0x3c>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2001      	movs	r0, #1
 800a57c:	4798      	blx	r3
  return;
 800a57e:	bf00      	nop
 800a580:	bf00      	nop
}
 800a582:	3708      	adds	r7, #8
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}
 800a588:	20000698 	.word	0x20000698

0800a58c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	7a5b      	ldrb	r3, [r3, #9]
 800a598:	2b0f      	cmp	r3, #15
 800a59a:	d003      	beq.n	800a5a4 <TlEvtReceived+0x18>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	7a5b      	ldrb	r3, [r3, #9]
 800a5a0:	2b0e      	cmp	r3, #14
 800a5a2:	d107      	bne.n	800a5b4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800a5a4:	6879      	ldr	r1, [r7, #4]
 800a5a6:	4809      	ldr	r0, [pc, #36]	; (800a5cc <TlEvtReceived+0x40>)
 800a5a8:	f000 fd06 	bl	800afb8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	f002 f8c1 	bl	800c734 <hci_cmd_resp_release>
 800a5b2:	e006      	b.n	800a5c2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800a5b4:	6879      	ldr	r1, [r7, #4]
 800a5b6:	4806      	ldr	r0, [pc, #24]	; (800a5d0 <TlEvtReceived+0x44>)
 800a5b8:	f000 fcfe 	bl	800afb8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a5bc:	4804      	ldr	r0, [pc, #16]	; (800a5d0 <TlEvtReceived+0x44>)
 800a5be:	f002 f8ad 	bl	800c71c <hci_notify_asynch_evt>
  }

  return;
 800a5c2:	bf00      	nop
}
 800a5c4:	3708      	adds	r7, #8
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop
 800a5cc:	20000690 	.word	0x20000690
 800a5d0:	200000bc 	.word	0x200000bc

0800a5d4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	4a05      	ldr	r2, [pc, #20]	; (800a5f4 <hci_register_io_bus+0x20>)
 800a5e0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	4a04      	ldr	r2, [pc, #16]	; (800a5f8 <hci_register_io_bus+0x24>)
 800a5e6:	611a      	str	r2, [r3, #16]

  return;
 800a5e8:	bf00      	nop
}
 800a5ea:	370c      	adds	r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr
 800a5f4:	0800a8ed 	.word	0x0800a8ed
 800a5f8:	0800a955 	.word	0x0800a955

0800a5fc <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	4a08      	ldr	r2, [pc, #32]	; (800a62c <shci_init+0x30>)
 800a60c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800a60e:	4a08      	ldr	r2, [pc, #32]	; (800a630 <shci_init+0x34>)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800a614:	4806      	ldr	r0, [pc, #24]	; (800a630 <shci_init+0x34>)
 800a616:	f000 f915 	bl	800a844 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4618      	mov	r0, r3
 800a620:	f000 f898 	bl	800a754 <TlInit>

  return;
 800a624:	bf00      	nop
}
 800a626:	3708      	adds	r7, #8
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	200006c0 	.word	0x200006c0
 800a630:	200006a0 	.word	0x200006a0

0800a634 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a63a:	4822      	ldr	r0, [pc, #136]	; (800a6c4 <shci_user_evt_proc+0x90>)
 800a63c:	f000 fc74 	bl	800af28 <LST_is_empty>
 800a640:	4603      	mov	r3, r0
 800a642:	2b00      	cmp	r3, #0
 800a644:	d12b      	bne.n	800a69e <shci_user_evt_proc+0x6a>
 800a646:	4b20      	ldr	r3, [pc, #128]	; (800a6c8 <shci_user_evt_proc+0x94>)
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d027      	beq.n	800a69e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a64e:	f107 030c 	add.w	r3, r7, #12
 800a652:	4619      	mov	r1, r3
 800a654:	481b      	ldr	r0, [pc, #108]	; (800a6c4 <shci_user_evt_proc+0x90>)
 800a656:	f000 fcf6 	bl	800b046 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800a65a:	4b1c      	ldr	r3, [pc, #112]	; (800a6cc <shci_user_evt_proc+0x98>)
 800a65c:	69db      	ldr	r3, [r3, #28]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d00c      	beq.n	800a67c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800a666:	2301      	movs	r3, #1
 800a668:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a66a:	4b18      	ldr	r3, [pc, #96]	; (800a6cc <shci_user_evt_proc+0x98>)
 800a66c:	69db      	ldr	r3, [r3, #28]
 800a66e:	1d3a      	adds	r2, r7, #4
 800a670:	4610      	mov	r0, r2
 800a672:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800a674:	793a      	ldrb	r2, [r7, #4]
 800a676:	4b14      	ldr	r3, [pc, #80]	; (800a6c8 <shci_user_evt_proc+0x94>)
 800a678:	701a      	strb	r2, [r3, #0]
 800a67a:	e002      	b.n	800a682 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a67c:	4b12      	ldr	r3, [pc, #72]	; (800a6c8 <shci_user_evt_proc+0x94>)
 800a67e:	2201      	movs	r2, #1
 800a680:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800a682:	4b11      	ldr	r3, [pc, #68]	; (800a6c8 <shci_user_evt_proc+0x94>)
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d004      	beq.n	800a694 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	4618      	mov	r0, r3
 800a68e:	f000 fa71 	bl	800ab74 <TL_MM_EvtDone>
 800a692:	e004      	b.n	800a69e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	4619      	mov	r1, r3
 800a698:	480a      	ldr	r0, [pc, #40]	; (800a6c4 <shci_user_evt_proc+0x90>)
 800a69a:	f000 fc67 	bl	800af6c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a69e:	4809      	ldr	r0, [pc, #36]	; (800a6c4 <shci_user_evt_proc+0x90>)
 800a6a0:	f000 fc42 	bl	800af28 <LST_is_empty>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d107      	bne.n	800a6ba <shci_user_evt_proc+0x86>
 800a6aa:	4b07      	ldr	r3, [pc, #28]	; (800a6c8 <shci_user_evt_proc+0x94>)
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d003      	beq.n	800a6ba <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800a6b2:	4804      	ldr	r0, [pc, #16]	; (800a6c4 <shci_user_evt_proc+0x90>)
 800a6b4:	f7f6 fff1 	bl	800169a <shci_notify_asynch_evt>
  }


  return;
 800a6b8:	bf00      	nop
 800a6ba:	bf00      	nop
}
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	200000cc 	.word	0x200000cc
 800a6c8:	200000dc 	.word	0x200000dc
 800a6cc:	200006a0 	.word	0x200006a0

0800a6d0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	60ba      	str	r2, [r7, #8]
 800a6d8:	607b      	str	r3, [r7, #4]
 800a6da:	4603      	mov	r3, r0
 800a6dc:	81fb      	strh	r3, [r7, #14]
 800a6de:	460b      	mov	r3, r1
 800a6e0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800a6e2:	2000      	movs	r0, #0
 800a6e4:	f000 f868 	bl	800a7b8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800a6e8:	4b17      	ldr	r3, [pc, #92]	; (800a748 <shci_send+0x78>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	89fa      	ldrh	r2, [r7, #14]
 800a6ee:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800a6f2:	4b15      	ldr	r3, [pc, #84]	; (800a748 <shci_send+0x78>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	7b7a      	ldrb	r2, [r7, #13]
 800a6f8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800a6fa:	4b13      	ldr	r3, [pc, #76]	; (800a748 <shci_send+0x78>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	330c      	adds	r3, #12
 800a700:	7b7a      	ldrb	r2, [r7, #13]
 800a702:	68b9      	ldr	r1, [r7, #8]
 800a704:	4618      	mov	r0, r3
 800a706:	f003 fbca 	bl	800de9e <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800a70a:	4b10      	ldr	r3, [pc, #64]	; (800a74c <shci_send+0x7c>)
 800a70c:	2201      	movs	r2, #1
 800a70e:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800a710:	4b0f      	ldr	r3, [pc, #60]	; (800a750 <shci_send+0x80>)
 800a712:	691b      	ldr	r3, [r3, #16]
 800a714:	2100      	movs	r1, #0
 800a716:	2000      	movs	r0, #0
 800a718:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800a71a:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a71e:	f7f6 ffd4 	bl	80016ca <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f103 0008 	add.w	r0, r3, #8
 800a728:	4b07      	ldr	r3, [pc, #28]	; (800a748 <shci_send+0x78>)
 800a72a:	6819      	ldr	r1, [r3, #0]
 800a72c:	4b06      	ldr	r3, [pc, #24]	; (800a748 <shci_send+0x78>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	789b      	ldrb	r3, [r3, #2]
 800a732:	3303      	adds	r3, #3
 800a734:	461a      	mov	r2, r3
 800a736:	f003 fbb2 	bl	800de9e <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a73a:	2001      	movs	r0, #1
 800a73c:	f000 f83c 	bl	800a7b8 <Cmd_SetStatus>

  return;
 800a740:	bf00      	nop
}
 800a742:	3710      	adds	r7, #16
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}
 800a748:	200000d8 	.word	0x200000d8
 800a74c:	200006c4 	.word	0x200006c4
 800a750:	200006a0 	.word	0x200006a0

0800a754 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b086      	sub	sp, #24
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800a75c:	4a10      	ldr	r2, [pc, #64]	; (800a7a0 <TlInit+0x4c>)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800a762:	4810      	ldr	r0, [pc, #64]	; (800a7a4 <TlInit+0x50>)
 800a764:	f000 fbd0 	bl	800af08 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a768:	2001      	movs	r0, #1
 800a76a:	f000 f825 	bl	800a7b8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a76e:	4b0e      	ldr	r3, [pc, #56]	; (800a7a8 <TlInit+0x54>)
 800a770:	2201      	movs	r2, #1
 800a772:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800a774:	4b0d      	ldr	r3, [pc, #52]	; (800a7ac <TlInit+0x58>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d00c      	beq.n	800a796 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800a780:	4b0b      	ldr	r3, [pc, #44]	; (800a7b0 <TlInit+0x5c>)
 800a782:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800a784:	4b0b      	ldr	r3, [pc, #44]	; (800a7b4 <TlInit+0x60>)
 800a786:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800a788:	4b08      	ldr	r3, [pc, #32]	; (800a7ac <TlInit+0x58>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f107 020c 	add.w	r2, r7, #12
 800a790:	4610      	mov	r0, r2
 800a792:	4798      	blx	r3
  }

  return;
 800a794:	bf00      	nop
 800a796:	bf00      	nop
}
 800a798:	3718      	adds	r7, #24
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	200000d8 	.word	0x200000d8
 800a7a4:	200000cc 	.word	0x200000cc
 800a7a8:	200000dc 	.word	0x200000dc
 800a7ac:	200006a0 	.word	0x200006a0
 800a7b0:	0800a809 	.word	0x0800a809
 800a7b4:	0800a821 	.word	0x0800a821

0800a7b8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	4603      	mov	r3, r0
 800a7c0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800a7c2:	79fb      	ldrb	r3, [r7, #7]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d10b      	bne.n	800a7e0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800a7c8:	4b0d      	ldr	r3, [pc, #52]	; (800a800 <Cmd_SetStatus+0x48>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d003      	beq.n	800a7d8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800a7d0:	4b0b      	ldr	r3, [pc, #44]	; (800a800 <Cmd_SetStatus+0x48>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2000      	movs	r0, #0
 800a7d6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800a7d8:	4b0a      	ldr	r3, [pc, #40]	; (800a804 <Cmd_SetStatus+0x4c>)
 800a7da:	2200      	movs	r2, #0
 800a7dc:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800a7de:	e00b      	b.n	800a7f8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800a7e0:	4b08      	ldr	r3, [pc, #32]	; (800a804 <Cmd_SetStatus+0x4c>)
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800a7e6:	4b06      	ldr	r3, [pc, #24]	; (800a800 <Cmd_SetStatus+0x48>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d004      	beq.n	800a7f8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800a7ee:	4b04      	ldr	r3, [pc, #16]	; (800a800 <Cmd_SetStatus+0x48>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2001      	movs	r0, #1
 800a7f4:	4798      	blx	r3
  return;
 800a7f6:	bf00      	nop
 800a7f8:	bf00      	nop
}
 800a7fa:	3708      	adds	r7, #8
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	200006c0 	.word	0x200006c0
 800a804:	200000d4 	.word	0x200000d4

0800a808 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800a810:	2000      	movs	r0, #0
 800a812:	f7f6 ff4f 	bl	80016b4 <shci_cmd_resp_release>

  return;
 800a816:	bf00      	nop
}
 800a818:	3708      	adds	r7, #8
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
	...

0800a820 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800a828:	6879      	ldr	r1, [r7, #4]
 800a82a:	4805      	ldr	r0, [pc, #20]	; (800a840 <TlUserEvtReceived+0x20>)
 800a82c:	f000 fbc4 	bl	800afb8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a830:	4803      	ldr	r0, [pc, #12]	; (800a840 <TlUserEvtReceived+0x20>)
 800a832:	f7f6 ff32 	bl	800169a <shci_notify_asynch_evt>

  return;
 800a836:	bf00      	nop
}
 800a838:	3708      	adds	r7, #8
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	200000cc 	.word	0x200000cc

0800a844 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800a844:	b480      	push	{r7}
 800a846:	b083      	sub	sp, #12
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a05      	ldr	r2, [pc, #20]	; (800a864 <shci_register_io_bus+0x20>)
 800a850:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	4a04      	ldr	r2, [pc, #16]	; (800a868 <shci_register_io_bus+0x24>)
 800a856:	611a      	str	r2, [r3, #16]

  return;
 800a858:	bf00      	nop
}
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr
 800a864:	0800aa01 	.word	0x0800aa01
 800a868:	0800aa55 	.word	0x0800aa55

0800a86c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800a870:	f002 fd20 	bl	800d2b4 <HW_IPCC_Enable>

  return;
 800a874:	bf00      	nop
}
 800a876:	bd80      	pop	{r7, pc}

0800a878 <TL_Init>:


void TL_Init( void )
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800a87c:	4b10      	ldr	r3, [pc, #64]	; (800a8c0 <TL_Init+0x48>)
 800a87e:	4a11      	ldr	r2, [pc, #68]	; (800a8c4 <TL_Init+0x4c>)
 800a880:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800a882:	4b0f      	ldr	r3, [pc, #60]	; (800a8c0 <TL_Init+0x48>)
 800a884:	4a10      	ldr	r2, [pc, #64]	; (800a8c8 <TL_Init+0x50>)
 800a886:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800a888:	4b0d      	ldr	r3, [pc, #52]	; (800a8c0 <TL_Init+0x48>)
 800a88a:	4a10      	ldr	r2, [pc, #64]	; (800a8cc <TL_Init+0x54>)
 800a88c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800a88e:	4b0c      	ldr	r3, [pc, #48]	; (800a8c0 <TL_Init+0x48>)
 800a890:	4a0f      	ldr	r2, [pc, #60]	; (800a8d0 <TL_Init+0x58>)
 800a892:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800a894:	4b0a      	ldr	r3, [pc, #40]	; (800a8c0 <TL_Init+0x48>)
 800a896:	4a0f      	ldr	r2, [pc, #60]	; (800a8d4 <TL_Init+0x5c>)
 800a898:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800a89a:	4b09      	ldr	r3, [pc, #36]	; (800a8c0 <TL_Init+0x48>)
 800a89c:	4a0e      	ldr	r2, [pc, #56]	; (800a8d8 <TL_Init+0x60>)
 800a89e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800a8a0:	4b07      	ldr	r3, [pc, #28]	; (800a8c0 <TL_Init+0x48>)
 800a8a2:	4a0e      	ldr	r2, [pc, #56]	; (800a8dc <TL_Init+0x64>)
 800a8a4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800a8a6:	4b06      	ldr	r3, [pc, #24]	; (800a8c0 <TL_Init+0x48>)
 800a8a8:	4a0d      	ldr	r2, [pc, #52]	; (800a8e0 <TL_Init+0x68>)
 800a8aa:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800a8ac:	4b04      	ldr	r3, [pc, #16]	; (800a8c0 <TL_Init+0x48>)
 800a8ae:	4a0d      	ldr	r2, [pc, #52]	; (800a8e4 <TL_Init+0x6c>)
 800a8b0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800a8b2:	4b03      	ldr	r3, [pc, #12]	; (800a8c0 <TL_Init+0x48>)
 800a8b4:	4a0c      	ldr	r2, [pc, #48]	; (800a8e8 <TL_Init+0x70>)
 800a8b6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800a8b8:	f002 fd10 	bl	800d2dc <HW_IPCC_Init>

  return;
 800a8bc:	bf00      	nop
}
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	20030000 	.word	0x20030000
 800a8c4:	20030028 	.word	0x20030028
 800a8c8:	20030048 	.word	0x20030048
 800a8cc:	20030058 	.word	0x20030058
 800a8d0:	20030068 	.word	0x20030068
 800a8d4:	20030070 	.word	0x20030070
 800a8d8:	20030078 	.word	0x20030078
 800a8dc:	20030080 	.word	0x20030080
 800a8e0:	2003009c 	.word	0x2003009c
 800a8e4:	200300a0 	.word	0x200300a0
 800a8e8:	200300ac 	.word	0x200300ac

0800a8ec <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800a8f8:	4811      	ldr	r0, [pc, #68]	; (800a940 <TL_BLE_Init+0x54>)
 800a8fa:	f000 fb05 	bl	800af08 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800a8fe:	4b11      	ldr	r3, [pc, #68]	; (800a944 <TL_BLE_Init+0x58>)
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	689a      	ldr	r2, [r3, #8]
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	68da      	ldr	r2, [r3, #12]
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	4a0c      	ldr	r2, [pc, #48]	; (800a948 <TL_BLE_Init+0x5c>)
 800a918:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	4a08      	ldr	r2, [pc, #32]	; (800a940 <TL_BLE_Init+0x54>)
 800a91e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800a920:	f002 fcf2 	bl	800d308 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a08      	ldr	r2, [pc, #32]	; (800a94c <TL_BLE_Init+0x60>)
 800a92a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	4a07      	ldr	r2, [pc, #28]	; (800a950 <TL_BLE_Init+0x64>)
 800a932:	6013      	str	r3, [r2, #0]

  return 0;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3710      	adds	r7, #16
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	200300c8 	.word	0x200300c8
 800a944:	20030000 	.word	0x20030000
 800a948:	20030a58 	.word	0x20030a58
 800a94c:	200006d0 	.word	0x200006d0
 800a950:	200006d4 	.word	0x200006d4

0800a954 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	460b      	mov	r3, r1
 800a95e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800a960:	4b09      	ldr	r3, [pc, #36]	; (800a988 <TL_BLE_SendCmd+0x34>)
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2201      	movs	r2, #1
 800a968:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800a96a:	4b07      	ldr	r3, [pc, #28]	; (800a988 <TL_BLE_SendCmd+0x34>)
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4619      	mov	r1, r3
 800a972:	2001      	movs	r0, #1
 800a974:	f000 f96c 	bl	800ac50 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800a978:	f002 fcd0 	bl	800d31c <HW_IPCC_BLE_SendCmd>

  return 0;
 800a97c:	2300      	movs	r3, #0
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3708      	adds	r7, #8
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop
 800a988:	20030000 	.word	0x20030000

0800a98c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b082      	sub	sp, #8
 800a990:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800a992:	e01c      	b.n	800a9ce <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800a994:	1d3b      	adds	r3, r7, #4
 800a996:	4619      	mov	r1, r3
 800a998:	4812      	ldr	r0, [pc, #72]	; (800a9e4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a99a:	f000 fb54 	bl	800b046 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	7a5b      	ldrb	r3, [r3, #9]
 800a9a2:	2b0f      	cmp	r3, #15
 800a9a4:	d003      	beq.n	800a9ae <HW_IPCC_BLE_RxEvtNot+0x22>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	7a5b      	ldrb	r3, [r3, #9]
 800a9aa:	2b0e      	cmp	r3, #14
 800a9ac:	d105      	bne.n	800a9ba <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	2002      	movs	r0, #2
 800a9b4:	f000 f94c 	bl	800ac50 <OutputDbgTrace>
 800a9b8:	e004      	b.n	800a9c4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	4619      	mov	r1, r3
 800a9be:	2003      	movs	r0, #3
 800a9c0:	f000 f946 	bl	800ac50 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800a9c4:	4b08      	ldr	r3, [pc, #32]	; (800a9e8 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	4610      	mov	r0, r2
 800a9cc:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800a9ce:	4805      	ldr	r0, [pc, #20]	; (800a9e4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a9d0:	f000 faaa 	bl	800af28 <LST_is_empty>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d0dc      	beq.n	800a994 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800a9da:	bf00      	nop
}
 800a9dc:	3708      	adds	r7, #8
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	200300c8 	.word	0x200300c8
 800a9e8:	200006d0 	.word	0x200006d0

0800a9ec <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800a9f0:	4b02      	ldr	r3, [pc, #8]	; (800a9fc <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4798      	blx	r3

  return;
 800a9f6:	bf00      	nop
}
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	200006d4 	.word	0x200006d4

0800aa00 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800aa0c:	480d      	ldr	r0, [pc, #52]	; (800aa44 <TL_SYS_Init+0x44>)
 800aa0e:	f000 fa7b 	bl	800af08 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800aa12:	4b0d      	ldr	r3, [pc, #52]	; (800aa48 <TL_SYS_Init+0x48>)
 800aa14:	68db      	ldr	r3, [r3, #12]
 800aa16:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	689a      	ldr	r2, [r3, #8]
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	4a08      	ldr	r2, [pc, #32]	; (800aa44 <TL_SYS_Init+0x44>)
 800aa24:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800aa26:	f002 fc9b 	bl	800d360 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4a07      	ldr	r2, [pc, #28]	; (800aa4c <TL_SYS_Init+0x4c>)
 800aa30:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	4a06      	ldr	r2, [pc, #24]	; (800aa50 <TL_SYS_Init+0x50>)
 800aa38:	6013      	str	r3, [r2, #0]

  return 0;
 800aa3a:	2300      	movs	r3, #0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3710      	adds	r7, #16
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	200300d0 	.word	0x200300d0
 800aa48:	20030000 	.word	0x20030000
 800aa4c:	200006d8 	.word	0x200006d8
 800aa50:	200006dc 	.word	0x200006dc

0800aa54 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800aa60:	4b09      	ldr	r3, [pc, #36]	; (800aa88 <TL_SYS_SendCmd+0x34>)
 800aa62:	68db      	ldr	r3, [r3, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2210      	movs	r2, #16
 800aa68:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800aa6a:	4b07      	ldr	r3, [pc, #28]	; (800aa88 <TL_SYS_SendCmd+0x34>)
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4619      	mov	r1, r3
 800aa72:	2004      	movs	r0, #4
 800aa74:	f000 f8ec 	bl	800ac50 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800aa78:	f002 fc7c 	bl	800d374 <HW_IPCC_SYS_SendCmd>

  return 0;
 800aa7c:	2300      	movs	r3, #0
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	20030000 	.word	0x20030000

0800aa8c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800aa90:	4b07      	ldr	r3, [pc, #28]	; (800aab0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800aa92:	68db      	ldr	r3, [r3, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4619      	mov	r1, r3
 800aa98:	2005      	movs	r0, #5
 800aa9a:	f000 f8d9 	bl	800ac50 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800aa9e:	4b05      	ldr	r3, [pc, #20]	; (800aab4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4a03      	ldr	r2, [pc, #12]	; (800aab0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800aaa4:	68d2      	ldr	r2, [r2, #12]
 800aaa6:	6812      	ldr	r2, [r2, #0]
 800aaa8:	4610      	mov	r0, r2
 800aaaa:	4798      	blx	r3

  return;
 800aaac:	bf00      	nop
}
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	20030000 	.word	0x20030000
 800aab4:	200006d8 	.word	0x200006d8

0800aab8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800aabe:	e00e      	b.n	800aade <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800aac0:	1d3b      	adds	r3, r7, #4
 800aac2:	4619      	mov	r1, r3
 800aac4:	480b      	ldr	r0, [pc, #44]	; (800aaf4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800aac6:	f000 fabe 	bl	800b046 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	4619      	mov	r1, r3
 800aace:	2006      	movs	r0, #6
 800aad0:	f000 f8be 	bl	800ac50 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800aad4:	4b08      	ldr	r3, [pc, #32]	; (800aaf8 <HW_IPCC_SYS_EvtNot+0x40>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	4610      	mov	r0, r2
 800aadc:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800aade:	4805      	ldr	r0, [pc, #20]	; (800aaf4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800aae0:	f000 fa22 	bl	800af28 <LST_is_empty>
 800aae4:	4603      	mov	r3, r0
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d0ea      	beq.n	800aac0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800aaea:	bf00      	nop
}
 800aaec:	3708      	adds	r7, #8
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	200300d0 	.word	0x200300d0
 800aaf8:	200006dc 	.word	0x200006dc

0800aafc <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800ab04:	4817      	ldr	r0, [pc, #92]	; (800ab64 <TL_MM_Init+0x68>)
 800ab06:	f000 f9ff 	bl	800af08 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800ab0a:	4817      	ldr	r0, [pc, #92]	; (800ab68 <TL_MM_Init+0x6c>)
 800ab0c:	f000 f9fc 	bl	800af08 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800ab10:	4b16      	ldr	r3, [pc, #88]	; (800ab6c <TL_MM_Init+0x70>)
 800ab12:	691b      	ldr	r3, [r3, #16]
 800ab14:	4a16      	ldr	r2, [pc, #88]	; (800ab70 <TL_MM_Init+0x74>)
 800ab16:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800ab18:	4b15      	ldr	r3, [pc, #84]	; (800ab70 <TL_MM_Init+0x74>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	6892      	ldr	r2, [r2, #8]
 800ab20:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800ab22:	4b13      	ldr	r3, [pc, #76]	; (800ab70 <TL_MM_Init+0x74>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	68d2      	ldr	r2, [r2, #12]
 800ab2a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800ab2c:	4b10      	ldr	r3, [pc, #64]	; (800ab70 <TL_MM_Init+0x74>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a0c      	ldr	r2, [pc, #48]	; (800ab64 <TL_MM_Init+0x68>)
 800ab32:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800ab34:	4b0e      	ldr	r3, [pc, #56]	; (800ab70 <TL_MM_Init+0x74>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	687a      	ldr	r2, [r7, #4]
 800ab3a:	6812      	ldr	r2, [r2, #0]
 800ab3c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800ab3e:	4b0c      	ldr	r3, [pc, #48]	; (800ab70 <TL_MM_Init+0x74>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	6852      	ldr	r2, [r2, #4]
 800ab46:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800ab48:	4b09      	ldr	r3, [pc, #36]	; (800ab70 <TL_MM_Init+0x74>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	6912      	ldr	r2, [r2, #16]
 800ab50:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800ab52:	4b07      	ldr	r3, [pc, #28]	; (800ab70 <TL_MM_Init+0x74>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	6952      	ldr	r2, [r2, #20]
 800ab5a:	619a      	str	r2, [r3, #24]

  return;
 800ab5c:	bf00      	nop
}
 800ab5e:	3708      	adds	r7, #8
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}
 800ab64:	200300b8 	.word	0x200300b8
 800ab68:	200006c8 	.word	0x200006c8
 800ab6c:	20030000 	.word	0x20030000
 800ab70:	200006e0 	.word	0x200006e0

0800ab74 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b082      	sub	sp, #8
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800ab7c:	6879      	ldr	r1, [r7, #4]
 800ab7e:	4807      	ldr	r0, [pc, #28]	; (800ab9c <TL_MM_EvtDone+0x28>)
 800ab80:	f000 fa1a 	bl	800afb8 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800ab84:	6879      	ldr	r1, [r7, #4]
 800ab86:	2000      	movs	r0, #0
 800ab88:	f000 f862 	bl	800ac50 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800ab8c:	4804      	ldr	r0, [pc, #16]	; (800aba0 <TL_MM_EvtDone+0x2c>)
 800ab8e:	f002 fc17 	bl	800d3c0 <HW_IPCC_MM_SendFreeBuf>

  return;
 800ab92:	bf00      	nop
}
 800ab94:	3708      	adds	r7, #8
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	200006c8 	.word	0x200006c8
 800aba0:	0800aba5 	.word	0x0800aba5

0800aba4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800abaa:	e00c      	b.n	800abc6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800abac:	1d3b      	adds	r3, r7, #4
 800abae:	4619      	mov	r1, r3
 800abb0:	480a      	ldr	r0, [pc, #40]	; (800abdc <SendFreeBuf+0x38>)
 800abb2:	f000 fa48 	bl	800b046 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800abb6:	4b0a      	ldr	r3, [pc, #40]	; (800abe0 <SendFreeBuf+0x3c>)
 800abb8:	691b      	ldr	r3, [r3, #16]
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	4611      	mov	r1, r2
 800abc0:	4618      	mov	r0, r3
 800abc2:	f000 f9f9 	bl	800afb8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800abc6:	4805      	ldr	r0, [pc, #20]	; (800abdc <SendFreeBuf+0x38>)
 800abc8:	f000 f9ae 	bl	800af28 <LST_is_empty>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d0ec      	beq.n	800abac <SendFreeBuf+0x8>
  }

  return;
 800abd2:	bf00      	nop
}
 800abd4:	3708      	adds	r7, #8
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	200006c8 	.word	0x200006c8
 800abe0:	20030000 	.word	0x20030000

0800abe4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800abe8:	4805      	ldr	r0, [pc, #20]	; (800ac00 <TL_TRACES_Init+0x1c>)
 800abea:	f000 f98d 	bl	800af08 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800abee:	4b05      	ldr	r3, [pc, #20]	; (800ac04 <TL_TRACES_Init+0x20>)
 800abf0:	695b      	ldr	r3, [r3, #20]
 800abf2:	4a03      	ldr	r2, [pc, #12]	; (800ac00 <TL_TRACES_Init+0x1c>)
 800abf4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800abf6:	f002 fc19 	bl	800d42c <HW_IPCC_TRACES_Init>

  return;
 800abfa:	bf00      	nop
}
 800abfc:	bd80      	pop	{r7, pc}
 800abfe:	bf00      	nop
 800ac00:	200300c0 	.word	0x200300c0
 800ac04:	20030000 	.word	0x20030000

0800ac08 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ac0e:	e008      	b.n	800ac22 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800ac10:	1d3b      	adds	r3, r7, #4
 800ac12:	4619      	mov	r1, r3
 800ac14:	4808      	ldr	r0, [pc, #32]	; (800ac38 <HW_IPCC_TRACES_EvtNot+0x30>)
 800ac16:	f000 fa16 	bl	800b046 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f000 f80d 	bl	800ac3c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ac22:	4805      	ldr	r0, [pc, #20]	; (800ac38 <HW_IPCC_TRACES_EvtNot+0x30>)
 800ac24:	f000 f980 	bl	800af28 <LST_is_empty>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d0f0      	beq.n	800ac10 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800ac2e:	bf00      	nop
}
 800ac30:	3708      	adds	r7, #8
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	200300c0 	.word	0x200300c0

0800ac3c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800ac44:	bf00      	nop
 800ac46:	370c      	adds	r7, #12
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr

0800ac50 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b085      	sub	sp, #20
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	4603      	mov	r3, r0
 800ac58:	6039      	str	r1, [r7, #0]
 800ac5a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800ac5c:	79fb      	ldrb	r3, [r7, #7]
 800ac5e:	2b06      	cmp	r3, #6
 800ac60:	d845      	bhi.n	800acee <OutputDbgTrace+0x9e>
 800ac62:	a201      	add	r2, pc, #4	; (adr r2, 800ac68 <OutputDbgTrace+0x18>)
 800ac64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac68:	0800ac85 	.word	0x0800ac85
 800ac6c:	0800aca9 	.word	0x0800aca9
 800ac70:	0800acaf 	.word	0x0800acaf
 800ac74:	0800acc3 	.word	0x0800acc3
 800ac78:	0800accf 	.word	0x0800accf
 800ac7c:	0800acd5 	.word	0x0800acd5
 800ac80:	0800ace3 	.word	0x0800ace3
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	7a5b      	ldrb	r3, [r3, #9]
 800ac8c:	2bff      	cmp	r3, #255	; 0xff
 800ac8e:	d005      	beq.n	800ac9c <OutputDbgTrace+0x4c>
 800ac90:	2bff      	cmp	r3, #255	; 0xff
 800ac92:	dc05      	bgt.n	800aca0 <OutputDbgTrace+0x50>
 800ac94:	2b0e      	cmp	r3, #14
 800ac96:	d005      	beq.n	800aca4 <OutputDbgTrace+0x54>
 800ac98:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800ac9a:	e001      	b.n	800aca0 <OutputDbgTrace+0x50>
          break;
 800ac9c:	bf00      	nop
 800ac9e:	e027      	b.n	800acf0 <OutputDbgTrace+0xa0>
          break;
 800aca0:	bf00      	nop
 800aca2:	e025      	b.n	800acf0 <OutputDbgTrace+0xa0>
          break;
 800aca4:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800aca6:	e023      	b.n	800acf0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800acac:	e020      	b.n	800acf0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	7a5b      	ldrb	r3, [r3, #9]
 800acb6:	2b0e      	cmp	r3, #14
 800acb8:	d001      	beq.n	800acbe <OutputDbgTrace+0x6e>
 800acba:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800acbc:	e000      	b.n	800acc0 <OutputDbgTrace+0x70>
          break;
 800acbe:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800acc0:	e016      	b.n	800acf0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	7a5b      	ldrb	r3, [r3, #9]
 800acca:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800accc:	e010      	b.n	800acf0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800acd2:	e00d      	b.n	800acf0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	7a5b      	ldrb	r3, [r3, #9]
 800acdc:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800acde:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ace0:	e006      	b.n	800acf0 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	7a5b      	ldrb	r3, [r3, #9]
 800acea:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800acec:	e000      	b.n	800acf0 <OutputDbgTrace+0xa0>

    default:
      break;
 800acee:	bf00      	nop
  }

  return;
 800acf0:	bf00      	nop
}
 800acf2:	3714      	adds	r7, #20
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 800ad08:	215c      	movs	r1, #92	; 0x5c
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f003 f83c 	bl	800dd88 <strrchr>
 800ad10:	4603      	mov	r3, r0
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d007      	beq.n	800ad26 <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 800ad16:	215c      	movs	r1, #92	; 0x5c
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f003 f835 	bl	800dd88 <strrchr>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	3301      	adds	r3, #1
 800ad22:	60fb      	str	r3, [r7, #12]
 800ad24:	e00d      	b.n	800ad42 <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 800ad26:	212f      	movs	r1, #47	; 0x2f
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f003 f82d 	bl	800dd88 <strrchr>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d006      	beq.n	800ad42 <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 800ad34:	212f      	movs	r1, #47	; 0x2f
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f003 f826 	bl	800dd88 <strrchr>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	3301      	adds	r3, #1
 800ad40:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ad42:	68fb      	ldr	r3, [r7, #12]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b086      	sub	sp, #24
 800ad50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad52:	f3ef 8310 	mrs	r3, PRIMASK
 800ad56:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad58:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800ad5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ad5c:	b672      	cpsid	i
}
 800ad5e:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800ad60:	1cbb      	adds	r3, r7, #2
 800ad62:	4619      	mov	r1, r3
 800ad64:	4812      	ldr	r0, [pc, #72]	; (800adb0 <DbgTrace_TxCpltCallback+0x64>)
 800ad66:	f000 fbe6 	bl	800b536 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800ad6a:	1cbb      	adds	r3, r7, #2
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	4810      	ldr	r0, [pc, #64]	; (800adb0 <DbgTrace_TxCpltCallback+0x64>)
 800ad70:	f000 fcd2 	bl	800b718 <CircularQueue_Sense>
 800ad74:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d00c      	beq.n	800ad96 <DbgTrace_TxCpltCallback+0x4a>
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	f383 8810 	msr	PRIMASK, r3
}
 800ad86:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800ad88:	887b      	ldrh	r3, [r7, #2]
 800ad8a:	4a0a      	ldr	r2, [pc, #40]	; (800adb4 <DbgTrace_TxCpltCallback+0x68>)
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	6938      	ldr	r0, [r7, #16]
 800ad90:	f7f6 f8e1 	bl	8000f56 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800ad94:	e008      	b.n	800ada8 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800ad96:	4b08      	ldr	r3, [pc, #32]	; (800adb8 <DbgTrace_TxCpltCallback+0x6c>)
 800ad98:	2201      	movs	r2, #1
 800ad9a:	701a      	strb	r2, [r3, #0]
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f383 8810 	msr	PRIMASK, r3
}
 800ada6:	bf00      	nop
}
 800ada8:	bf00      	nop
 800adaa:	3718      	adds	r7, #24
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}
 800adb0:	200006e4 	.word	0x200006e4
 800adb4:	0800ad4d 	.word	0x0800ad4d
 800adb8:	20000011 	.word	0x20000011

0800adbc <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800adc2:	f7f6 f8c2 	bl	8000f4a <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800adc6:	2302      	movs	r3, #2
 800adc8:	9300      	str	r3, [sp, #0]
 800adca:	2300      	movs	r3, #0
 800adcc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800add0:	4903      	ldr	r1, [pc, #12]	; (800ade0 <DbgTraceInit+0x24>)
 800add2:	4804      	ldr	r0, [pc, #16]	; (800ade4 <DbgTraceInit+0x28>)
 800add4:	f000 f956 	bl	800b084 <CircularQueue_Init>
#endif 
#endif
  return;
 800add8:	bf00      	nop
}
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	20000704 	.word	0x20000704
 800ade4:	200006e4 	.word	0x200006e4

0800ade8 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800adf4:	687a      	ldr	r2, [r7, #4]
 800adf6:	68b9      	ldr	r1, [r7, #8]
 800adf8:	68f8      	ldr	r0, [r7, #12]
 800adfa:	f000 f805 	bl	800ae08 <DbgTraceWrite>
 800adfe:	4603      	mov	r3, r0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3710      	adds	r7, #16
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b08a      	sub	sp, #40	; 0x28
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800ae14:	2300      	movs	r3, #0
 800ae16:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae18:	f3ef 8310 	mrs	r3, PRIMASK
 800ae1c:	61bb      	str	r3, [r7, #24]
  return(result);
 800ae1e:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800ae20:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae28:	d102      	bne.n	800ae30 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	627b      	str	r3, [r7, #36]	; 0x24
 800ae2e:	e037      	b.n	800aea0 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d006      	beq.n	800ae44 <DbgTraceWrite+0x3c>
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	d003      	beq.n	800ae44 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800ae3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae40:	627b      	str	r3, [r7, #36]	; 0x24
 800ae42:	e02d      	b.n	800aea0 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d02a      	beq.n	800aea0 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800ae4e:	b672      	cpsid	i
}
 800ae50:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	b29a      	uxth	r2, r3
 800ae56:	2301      	movs	r3, #1
 800ae58:	68b9      	ldr	r1, [r7, #8]
 800ae5a:	4814      	ldr	r0, [pc, #80]	; (800aeac <DbgTraceWrite+0xa4>)
 800ae5c:	f000 f944 	bl	800b0e8 <CircularQueue_Add>
 800ae60:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800ae62:	69fb      	ldr	r3, [r7, #28]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d015      	beq.n	800ae94 <DbgTraceWrite+0x8c>
 800ae68:	4b11      	ldr	r3, [pc, #68]	; (800aeb0 <DbgTraceWrite+0xa8>)
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d010      	beq.n	800ae94 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800ae72:	4b0f      	ldr	r3, [pc, #60]	; (800aeb0 <DbgTraceWrite+0xa8>)
 800ae74:	2200      	movs	r2, #0
 800ae76:	701a      	strb	r2, [r3, #0]
 800ae78:	6a3b      	ldr	r3, [r7, #32]
 800ae7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	f383 8810 	msr	PRIMASK, r3
}
 800ae82:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	4a0a      	ldr	r2, [pc, #40]	; (800aeb4 <DbgTraceWrite+0xac>)
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	69f8      	ldr	r0, [r7, #28]
 800ae8e:	f7f6 f862 	bl	8000f56 <DbgOutputTraces>
 800ae92:	e005      	b.n	800aea0 <DbgTraceWrite+0x98>
 800ae94:	6a3b      	ldr	r3, [r7, #32]
 800ae96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	f383 8810 	msr	PRIMASK, r3
}
 800ae9e:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800aea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3728      	adds	r7, #40	; 0x28
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	200006e4 	.word	0x200006e4
 800aeb0:	20000011 	.word	0x20000011
 800aeb4:	0800ad4d 	.word	0x0800ad4d

0800aeb8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	4603      	mov	r3, r0
 800aec0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800aec2:	4b0f      	ldr	r3, [pc, #60]	; (800af00 <OTP_Read+0x48>)
 800aec4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800aec6:	e002      	b.n	800aece <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	3b08      	subs	r3, #8
 800aecc:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	3307      	adds	r3, #7
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	79fa      	ldrb	r2, [r7, #7]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d003      	beq.n	800aee2 <OTP_Read+0x2a>
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	4a09      	ldr	r2, [pc, #36]	; (800af04 <OTP_Read+0x4c>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d1f2      	bne.n	800aec8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	3307      	adds	r3, #7
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	79fa      	ldrb	r2, [r7, #7]
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d001      	beq.n	800aef2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800aeee:	2300      	movs	r3, #0
 800aef0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800aef2:	68fb      	ldr	r3, [r7, #12]
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3714      	adds	r7, #20
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr
 800af00:	1fff73f8 	.word	0x1fff73f8
 800af04:	1fff7000 	.word	0x1fff7000

0800af08 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800af08:	b480      	push	{r7}
 800af0a:	b083      	sub	sp, #12
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	605a      	str	r2, [r3, #4]
}
 800af1c:	bf00      	nop
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800af28:	b480      	push	{r7}
 800af2a:	b087      	sub	sp, #28
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af30:	f3ef 8310 	mrs	r3, PRIMASK
 800af34:	60fb      	str	r3, [r7, #12]
  return(result);
 800af36:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800af38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800af3a:	b672      	cpsid	i
}
 800af3c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	687a      	ldr	r2, [r7, #4]
 800af44:	429a      	cmp	r2, r3
 800af46:	d102      	bne.n	800af4e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800af48:	2301      	movs	r3, #1
 800af4a:	75fb      	strb	r3, [r7, #23]
 800af4c:	e001      	b.n	800af52 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800af4e:	2300      	movs	r3, #0
 800af50:	75fb      	strb	r3, [r7, #23]
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	f383 8810 	msr	PRIMASK, r3
}
 800af5c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800af5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800af60:	4618      	mov	r0, r3
 800af62:	371c      	adds	r7, #28
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr

0800af6c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b087      	sub	sp, #28
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af76:	f3ef 8310 	mrs	r3, PRIMASK
 800af7a:	60fb      	str	r3, [r7, #12]
  return(result);
 800af7c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800af7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800af80:	b672      	cpsid	i
}
 800af82:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	683a      	ldr	r2, [r7, #0]
 800af96:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	683a      	ldr	r2, [r7, #0]
 800af9e:	605a      	str	r2, [r3, #4]
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	f383 8810 	msr	PRIMASK, r3
}
 800afaa:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800afac:	bf00      	nop
 800afae:	371c      	adds	r7, #28
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800afb8:	b480      	push	{r7}
 800afba:	b087      	sub	sp, #28
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afc2:	f3ef 8310 	mrs	r3, PRIMASK
 800afc6:	60fb      	str	r3, [r7, #12]
  return(result);
 800afc8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800afca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800afcc:	b672      	cpsid	i
}
 800afce:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	685a      	ldr	r2, [r3, #4]
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	683a      	ldr	r2, [r7, #0]
 800afe2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	683a      	ldr	r2, [r7, #0]
 800afea:	601a      	str	r2, [r3, #0]
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	f383 8810 	msr	PRIMASK, r3
}
 800aff6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800aff8:	bf00      	nop
 800affa:	371c      	adds	r7, #28
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800b004:	b480      	push	{r7}
 800b006:	b087      	sub	sp, #28
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b00c:	f3ef 8310 	mrs	r3, PRIMASK
 800b010:	60fb      	str	r3, [r7, #12]
  return(result);
 800b012:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b014:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b016:	b672      	cpsid	i
}
 800b018:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	6812      	ldr	r2, [r2, #0]
 800b022:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	6852      	ldr	r2, [r2, #4]
 800b02c:	605a      	str	r2, [r3, #4]
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	f383 8810 	msr	PRIMASK, r3
}
 800b038:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b03a:	bf00      	nop
 800b03c:	371c      	adds	r7, #28
 800b03e:	46bd      	mov	sp, r7
 800b040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b044:	4770      	bx	lr

0800b046 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800b046:	b580      	push	{r7, lr}
 800b048:	b086      	sub	sp, #24
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
 800b04e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b050:	f3ef 8310 	mrs	r3, PRIMASK
 800b054:	60fb      	str	r3, [r7, #12]
  return(result);
 800b056:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b058:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b05a:	b672      	cpsid	i
}
 800b05c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7ff ffca 	bl	800b004 <LST_remove_node>
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	f383 8810 	msr	PRIMASK, r3
}
 800b07a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b07c:	bf00      	nop
 800b07e:	3718      	adds	r7, #24
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800b084:	b480      	push	{r7}
 800b086:	b085      	sub	sp, #20
 800b088:	af00      	add	r7, sp, #0
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	60b9      	str	r1, [r7, #8]
 800b08e:	607a      	str	r2, [r7, #4]
 800b090:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	68ba      	ldr	r2, [r7, #8]
 800b096:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2200      	movs	r2, #0
 800b09c:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	887a      	ldrh	r2, [r7, #2]
 800b0ba:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	7e3a      	ldrb	r2, [r7, #24]
 800b0c0:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800b0c2:	7e3b      	ldrb	r3, [r7, #24]
 800b0c4:	f003 0302 	and.w	r3, r3, #2
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d006      	beq.n	800b0da <CircularQueue_Init+0x56>
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	891b      	ldrh	r3, [r3, #8]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d002      	beq.n	800b0da <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800b0d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b0d8:	e000      	b.n	800b0dc <CircularQueue_Init+0x58>
  }
  return 0;
 800b0da:	2300      	movs	r3, #0
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3714      	adds	r7, #20
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr

0800b0e8 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b08e      	sub	sp, #56	; 0x38
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	60b9      	str	r1, [r7, #8]
 800b0f2:	603b      	str	r3, [r7, #0]
 800b0f4:	4613      	mov	r3, r2
 800b0f6:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800b100:	2300      	movs	r3, #0
 800b102:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800b104:	2300      	movs	r3, #0
 800b106:	62bb      	str	r3, [r7, #40]	; 0x28
 800b108:	2300      	movs	r3, #0
 800b10a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800b10c:	2300      	movs	r3, #0
 800b10e:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800b110:	2300      	movs	r3, #0
 800b112:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	891b      	ldrh	r3, [r3, #8]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d101      	bne.n	800b120 <CircularQueue_Add+0x38>
 800b11c:	2302      	movs	r3, #2
 800b11e:	e000      	b.n	800b122 <CircularQueue_Add+0x3a>
 800b120:	2300      	movs	r3, #0
 800b122:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	695b      	ldr	r3, [r3, #20]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d02a      	beq.n	800b182 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	891b      	ldrh	r3, [r3, #8]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d123      	bne.n	800b17c <CircularQueue_Add+0x94>
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681a      	ldr	r2, [r3, #0]
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	691b      	ldr	r3, [r3, #16]
 800b13c:	4413      	add	r3, r2
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	b29a      	uxth	r2, r3
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	6819      	ldr	r1, [r3, #0]
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	691b      	ldr	r3, [r3, #16]
 800b14a:	1c58      	adds	r0, r3, #1
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	4298      	cmp	r0, r3
 800b152:	d306      	bcc.n	800b162 <CircularQueue_Add+0x7a>
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	6918      	ldr	r0, [r3, #16]
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	1ac3      	subs	r3, r0, r3
 800b15e:	3301      	adds	r3, #1
 800b160:	e002      	b.n	800b168 <CircularQueue_Add+0x80>
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	691b      	ldr	r3, [r3, #16]
 800b166:	3301      	adds	r3, #1
 800b168:	440b      	add	r3, r1
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	021b      	lsls	r3, r3, #8
 800b170:	b29b      	uxth	r3, r3
 800b172:	4413      	add	r3, r2
 800b174:	b29b      	uxth	r3, r3
 800b176:	3302      	adds	r3, #2
 800b178:	b29b      	uxth	r3, r3
 800b17a:	e001      	b.n	800b180 <CircularQueue_Add+0x98>
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	891b      	ldrh	r3, [r3, #8]
 800b180:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	891b      	ldrh	r3, [r3, #8]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d002      	beq.n	800b190 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	891b      	ldrh	r3, [r3, #8]
 800b18e:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	691a      	ldr	r2, [r3, #16]
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	429a      	cmp	r2, r3
 800b19a:	d307      	bcc.n	800b1ac <CircularQueue_Add+0xc4>
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	685a      	ldr	r2, [r3, #4]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	6919      	ldr	r1, [r3, #16]
 800b1a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b1a6:	440b      	add	r3, r1
 800b1a8:	1ad3      	subs	r3, r2, r3
 800b1aa:	e000      	b.n	800b1ae <CircularQueue_Add+0xc6>
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800b1b0:	88fa      	ldrh	r2, [r7, #6]
 800b1b2:	7ffb      	ldrb	r3, [r7, #31]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	fb02 f303 	mul.w	r3, r2, r3
 800b1be:	69ba      	ldr	r2, [r7, #24]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d80b      	bhi.n	800b1dc <CircularQueue_Add+0xf4>
 800b1c4:	88fa      	ldrh	r2, [r7, #6]
 800b1c6:	7ffb      	ldrb	r3, [r7, #31]
 800b1c8:	4413      	add	r3, r2
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1d2:	fb01 f202 	mul.w	r2, r1, r2
 800b1d6:	1a9b      	subs	r3, r3, r2
 800b1d8:	b2db      	uxtb	r3, r3
 800b1da:	e000      	b.n	800b1de <CircularQueue_Add+0xf6>
 800b1dc:	2300      	movs	r3, #0
 800b1de:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800b1e0:	7dfa      	ldrb	r2, [r7, #23]
 800b1e2:	7ffb      	ldrb	r3, [r7, #31]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	bf8c      	ite	hi
 800b1e8:	2301      	movhi	r3, #1
 800b1ea:	2300      	movls	r3, #0
 800b1ec:	b2db      	uxtb	r3, r3
 800b1ee:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800b1f0:	7fbb      	ldrb	r3, [r7, #30]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d008      	beq.n	800b208 <CircularQueue_Add+0x120>
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	7f1b      	ldrb	r3, [r3, #28]
 800b1fa:	f003 0301 	and.w	r3, r3, #1
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d002      	beq.n	800b208 <CircularQueue_Add+0x120>
 800b202:	7dfb      	ldrb	r3, [r7, #23]
 800b204:	b29b      	uxth	r3, r3
 800b206:	e000      	b.n	800b20a <CircularQueue_Add+0x122>
 800b208:	8bbb      	ldrh	r3, [r7, #28]
 800b20a:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800b20c:	7fbb      	ldrb	r3, [r7, #30]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d008      	beq.n	800b224 <CircularQueue_Add+0x13c>
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	7f1b      	ldrb	r3, [r3, #28]
 800b216:	f003 0302 	and.w	r3, r3, #2
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d002      	beq.n	800b224 <CircularQueue_Add+0x13c>
 800b21e:	7ffb      	ldrb	r3, [r7, #31]
 800b220:	b29b      	uxth	r3, r3
 800b222:	e000      	b.n	800b226 <CircularQueue_Add+0x13e>
 800b224:	8bbb      	ldrh	r3, [r7, #28]
 800b226:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800b228:	88fb      	ldrh	r3, [r7, #6]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	f000 817e 	beq.w	800b52c <CircularQueue_Add+0x444>
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	695a      	ldr	r2, [r3, #20]
 800b234:	88f9      	ldrh	r1, [r7, #6]
 800b236:	7ffb      	ldrb	r3, [r7, #31]
 800b238:	440b      	add	r3, r1
 800b23a:	4619      	mov	r1, r3
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	fb01 f303 	mul.w	r3, r1, r3
 800b242:	441a      	add	r2, r3
 800b244:	8bbb      	ldrh	r3, [r7, #28]
 800b246:	441a      	add	r2, r3
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	f200 816d 	bhi.w	800b52c <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800b252:	2300      	movs	r3, #0
 800b254:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b256:	e14a      	b.n	800b4ee <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	691a      	ldr	r2, [r3, #16]
 800b25c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b25e:	441a      	add	r2, r3
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	429a      	cmp	r2, r3
 800b266:	d307      	bcc.n	800b278 <CircularQueue_Add+0x190>
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	691a      	ldr	r2, [r3, #16]
 800b26c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b26e:	441a      	add	r2, r3
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	1ad3      	subs	r3, r2, r3
 800b276:	e003      	b.n	800b280 <CircularQueue_Add+0x198>
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	691a      	ldr	r2, [r3, #16]
 800b27c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b27e:	4413      	add	r3, r2
 800b280:	68fa      	ldr	r2, [r7, #12]
 800b282:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	691b      	ldr	r3, [r3, #16]
 800b288:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	891b      	ldrh	r3, [r3, #8]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d130      	bne.n	800b2f4 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b298:	1c59      	adds	r1, r3, #1
 800b29a:	6339      	str	r1, [r7, #48]	; 0x30
 800b29c:	4413      	add	r3, r2
 800b29e:	88fa      	ldrh	r2, [r7, #6]
 800b2a0:	b2d2      	uxtb	r2, r2
 800b2a2:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d304      	bcc.n	800b2b8 <CircularQueue_Add+0x1d0>
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2b4:	1ad3      	subs	r3, r2, r3
 800b2b6:	e000      	b.n	800b2ba <CircularQueue_Add+0x1d2>
 800b2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ba:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800b2bc:	88fb      	ldrh	r3, [r7, #6]
 800b2be:	0a1b      	lsrs	r3, r3, #8
 800b2c0:	b298      	uxth	r0, r3
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681a      	ldr	r2, [r3, #0]
 800b2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c8:	1c59      	adds	r1, r3, #1
 800b2ca:	6339      	str	r1, [r7, #48]	; 0x30
 800b2cc:	4413      	add	r3, r2
 800b2ce:	b2c2      	uxtb	r2, r0
 800b2d0:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d304      	bcc.n	800b2e6 <CircularQueue_Add+0x1fe>
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2e2:	1ad3      	subs	r3, r2, r3
 800b2e4:	e000      	b.n	800b2e8 <CircularQueue_Add+0x200>
 800b2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e8:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	695b      	ldr	r3, [r3, #20]
 800b2ee:	1c9a      	adds	r2, r3, #2
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800b2f4:	88fa      	ldrh	r2, [r7, #6]
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	6859      	ldr	r1, [r3, #4]
 800b2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fc:	1acb      	subs	r3, r1, r3
 800b2fe:	4293      	cmp	r3, r2
 800b300:	bf28      	it	cs
 800b302:	4613      	movcs	r3, r2
 800b304:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800b306:	88fb      	ldrh	r3, [r7, #6]
 800b308:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d007      	beq.n	800b31e <CircularQueue_Add+0x236>
 800b30e:	88fb      	ldrh	r3, [r7, #6]
 800b310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b312:	429a      	cmp	r2, r3
 800b314:	d225      	bcs.n	800b362 <CircularQueue_Add+0x27a>
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	7f1b      	ldrb	r3, [r3, #28]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d121      	bne.n	800b362 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b324:	18d0      	adds	r0, r2, r3
 800b326:	88fb      	ldrh	r3, [r7, #6]
 800b328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b32a:	fb02 f303 	mul.w	r3, r2, r3
 800b32e:	68ba      	ldr	r2, [r7, #8]
 800b330:	4413      	add	r3, r2
 800b332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b334:	4619      	mov	r1, r3
 800b336:	f002 fdb2 	bl	800de9e <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	695a      	ldr	r2, [r3, #20]
 800b33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b340:	441a      	add	r2, r3
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800b346:	2300      	movs	r3, #0
 800b348:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800b34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34c:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800b34e:	88fa      	ldrh	r2, [r7, #6]
 800b350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b352:	1ad3      	subs	r3, r2, r3
 800b354:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800b356:	7ffb      	ldrb	r3, [r7, #31]
 800b358:	b29a      	uxth	r2, r3
 800b35a:	88fb      	ldrh	r3, [r7, #6]
 800b35c:	4413      	add	r3, r2
 800b35e:	86fb      	strh	r3, [r7, #54]	; 0x36
 800b360:	e0a4      	b.n	800b4ac <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800b362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b364:	2b00      	cmp	r3, #0
 800b366:	f000 80a1 	beq.w	800b4ac <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	7f1b      	ldrb	r3, [r3, #28]
 800b36e:	f003 0301 	and.w	r3, r3, #1
 800b372:	2b00      	cmp	r3, #0
 800b374:	d03a      	beq.n	800b3ec <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	891b      	ldrh	r3, [r3, #8]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d10d      	bne.n	800b39a <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681a      	ldr	r2, [r3, #0]
 800b382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b384:	3b02      	subs	r3, #2
 800b386:	4413      	add	r3, r2
 800b388:	22ff      	movs	r2, #255	; 0xff
 800b38a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b392:	3b01      	subs	r3, #1
 800b394:	4413      	add	r3, r2
 800b396:	22ff      	movs	r2, #255	; 0xff
 800b398:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	695a      	ldr	r2, [r3, #20]
 800b39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a0:	441a      	add	r2, r3
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800b3aa:	88fb      	ldrh	r3, [r7, #6]
 800b3ac:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	891b      	ldrh	r3, [r3, #8]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d16f      	bne.n	800b49a <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681a      	ldr	r2, [r3, #0]
 800b3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c0:	1c59      	adds	r1, r3, #1
 800b3c2:	6339      	str	r1, [r7, #48]	; 0x30
 800b3c4:	4413      	add	r3, r2
 800b3c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3c8:	b2d2      	uxtb	r2, r2
 800b3ca:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ce:	0a18      	lsrs	r0, r3, #8
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d6:	1c59      	adds	r1, r3, #1
 800b3d8:	6339      	str	r1, [r7, #48]	; 0x30
 800b3da:	4413      	add	r3, r2
 800b3dc:	b2c2      	uxtb	r2, r0
 800b3de:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	695b      	ldr	r3, [r3, #20]
 800b3e4:	1c9a      	adds	r2, r3, #2
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	615a      	str	r2, [r3, #20]
 800b3ea:	e056      	b.n	800b49a <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	7f1b      	ldrb	r3, [r3, #28]
 800b3f0:	f003 0302 	and.w	r3, r3, #2
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d050      	beq.n	800b49a <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	891b      	ldrh	r3, [r3, #8]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d14a      	bne.n	800b496 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681a      	ldr	r2, [r3, #0]
 800b404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b406:	3b02      	subs	r3, #2
 800b408:	4413      	add	r3, r2
 800b40a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b40c:	b2d2      	uxtb	r2, r2
 800b40e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b412:	0a19      	lsrs	r1, r3, #8
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41a:	3b01      	subs	r3, #1
 800b41c:	4413      	add	r3, r2
 800b41e:	b2ca      	uxtb	r2, r1
 800b420:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681a      	ldr	r2, [r3, #0]
 800b426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b428:	18d0      	adds	r0, r2, r3
 800b42a:	88fb      	ldrh	r3, [r7, #6]
 800b42c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b42e:	fb02 f303 	mul.w	r3, r2, r3
 800b432:	68ba      	ldr	r2, [r7, #8]
 800b434:	4413      	add	r3, r2
 800b436:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b438:	4619      	mov	r1, r3
 800b43a:	f002 fd30 	bl	800de9e <memcpy>
             q->byteCount += NbBytesToCopy; 
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	695a      	ldr	r2, [r3, #20]
 800b442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b444:	441a      	add	r2, r3
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800b44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b44c:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800b44e:	88fa      	ldrh	r2, [r7, #6]
 800b450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b452:	1ad3      	subs	r3, r2, r3
 800b454:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	699b      	ldr	r3, [r3, #24]
 800b45a:	1c5a      	adds	r2, r3, #1
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800b460:	2300      	movs	r3, #0
 800b462:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46a:	1c59      	adds	r1, r3, #1
 800b46c:	6339      	str	r1, [r7, #48]	; 0x30
 800b46e:	4413      	add	r3, r2
 800b470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b472:	b2d2      	uxtb	r2, r2
 800b474:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b478:	0a18      	lsrs	r0, r3, #8
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b480:	1c59      	adds	r1, r3, #1
 800b482:	6339      	str	r1, [r7, #48]	; 0x30
 800b484:	4413      	add	r3, r2
 800b486:	b2c2      	uxtb	r2, r0
 800b488:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	695b      	ldr	r3, [r3, #20]
 800b48e:	1c9a      	adds	r2, r3, #2
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	615a      	str	r2, [r3, #20]
 800b494:	e001      	b.n	800b49a <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800b496:	2300      	movs	r3, #0
 800b498:	e049      	b.n	800b52e <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800b49a:	7ffb      	ldrb	r3, [r7, #31]
 800b49c:	b29a      	uxth	r2, r3
 800b49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a0:	b29b      	uxth	r3, r3
 800b4a2:	4413      	add	r3, r2
 800b4a4:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800b4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d015      	beq.n	800b4de <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681a      	ldr	r2, [r3, #0]
 800b4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b8:	18d0      	adds	r0, r2, r3
 800b4ba:	88fb      	ldrh	r3, [r7, #6]
 800b4bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4be:	fb03 f202 	mul.w	r2, r3, r2
 800b4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c4:	4413      	add	r3, r2
 800b4c6:	68ba      	ldr	r2, [r7, #8]
 800b4c8:	4413      	add	r3, r2
 800b4ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	f002 fce6 	bl	800de9e <memcpy>
        q->byteCount += NbBytesToCopy;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	695a      	ldr	r2, [r3, #20]
 800b4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d8:	441a      	add	r2, r3
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	699b      	ldr	r3, [r3, #24]
 800b4e2:	1c5a      	adds	r2, r3, #1
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800b4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	f4ff aeb0 	bcc.w	800b258 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	6919      	ldr	r1, [r3, #16]
 800b500:	7ffb      	ldrb	r3, [r7, #31]
 800b502:	4419      	add	r1, r3
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	4299      	cmp	r1, r3
 800b50a:	d307      	bcc.n	800b51c <CircularQueue_Add+0x434>
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	6919      	ldr	r1, [r3, #16]
 800b510:	7ffb      	ldrb	r3, [r7, #31]
 800b512:	4419      	add	r1, r3
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	1acb      	subs	r3, r1, r3
 800b51a:	e003      	b.n	800b524 <CircularQueue_Add+0x43c>
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	6919      	ldr	r1, [r3, #16]
 800b520:	7ffb      	ldrb	r3, [r7, #31]
 800b522:	440b      	add	r3, r1
 800b524:	4413      	add	r3, r2
 800b526:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800b528:	6a3b      	ldr	r3, [r7, #32]
 800b52a:	e000      	b.n	800b52e <CircularQueue_Add+0x446>
    return NULL;
 800b52c:	2300      	movs	r3, #0
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3738      	adds	r7, #56	; 0x38
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}

0800b536 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800b536:	b480      	push	{r7}
 800b538:	b085      	sub	sp, #20
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	6078      	str	r0, [r7, #4]
 800b53e:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800b540:	2300      	movs	r3, #0
 800b542:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800b544:	2300      	movs	r3, #0
 800b546:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	891b      	ldrh	r3, [r3, #8]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d101      	bne.n	800b554 <CircularQueue_Remove+0x1e>
 800b550:	2302      	movs	r3, #2
 800b552:	e000      	b.n	800b556 <CircularQueue_Remove+0x20>
 800b554:	2300      	movs	r3, #0
 800b556:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800b558:	2300      	movs	r3, #0
 800b55a:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	695b      	ldr	r3, [r3, #20]
 800b560:	2b00      	cmp	r3, #0
 800b562:	f000 80cc 	beq.w	800b6fe <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	891b      	ldrh	r3, [r3, #8]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d121      	bne.n	800b5b2 <CircularQueue_Remove+0x7c>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	68db      	ldr	r3, [r3, #12]
 800b576:	4413      	add	r3, r2
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	b29a      	uxth	r2, r3
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6819      	ldr	r1, [r3, #0]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	1c58      	adds	r0, r3, #1
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	4298      	cmp	r0, r3
 800b58c:	d306      	bcc.n	800b59c <CircularQueue_Remove+0x66>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	68d8      	ldr	r0, [r3, #12]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	1ac3      	subs	r3, r0, r3
 800b598:	3301      	adds	r3, #1
 800b59a:	e002      	b.n	800b5a2 <CircularQueue_Remove+0x6c>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	440b      	add	r3, r1
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	021b      	lsls	r3, r3, #8
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	4413      	add	r3, r2
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	e001      	b.n	800b5b6 <CircularQueue_Remove+0x80>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	891b      	ldrh	r3, [r3, #8]
 800b5b6:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	7f1b      	ldrb	r3, [r3, #28]
 800b5bc:	f003 0301 	and.w	r3, r3, #1
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d057      	beq.n	800b674 <CircularQueue_Remove+0x13e>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	7f1b      	ldrb	r3, [r3, #28]
 800b5c8:	f003 0302 	and.w	r3, r3, #2
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d151      	bne.n	800b674 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b5d0:	897b      	ldrh	r3, [r7, #10]
 800b5d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d103      	bne.n	800b5e2 <CircularQueue_Remove+0xac>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	891b      	ldrh	r3, [r3, #8]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d012      	beq.n	800b608 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	68da      	ldr	r2, [r3, #12]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d942      	bls.n	800b674 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	891b      	ldrh	r3, [r3, #8]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d03e      	beq.n	800b674 <CircularQueue_Remove+0x13e>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	685a      	ldr	r2, [r3, #4]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	68db      	ldr	r3, [r3, #12]
 800b5fe:	1ad3      	subs	r3, r2, r3
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	8912      	ldrh	r2, [r2, #8]
 800b604:	4293      	cmp	r3, r2
 800b606:	d235      	bcs.n	800b674 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	695a      	ldr	r2, [r3, #20]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	68d9      	ldr	r1, [r3, #12]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	685b      	ldr	r3, [r3, #4]
 800b614:	1acb      	subs	r3, r1, r3
 800b616:	441a      	add	r2, r3
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	891b      	ldrh	r3, [r3, #8]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d121      	bne.n	800b66e <CircularQueue_Remove+0x138>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681a      	ldr	r2, [r3, #0]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	4413      	add	r3, r2
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	b29a      	uxth	r2, r3
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6819      	ldr	r1, [r3, #0]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	68db      	ldr	r3, [r3, #12]
 800b640:	1c58      	adds	r0, r3, #1
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	4298      	cmp	r0, r3
 800b648:	d306      	bcc.n	800b658 <CircularQueue_Remove+0x122>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	68d8      	ldr	r0, [r3, #12]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	1ac3      	subs	r3, r0, r3
 800b654:	3301      	adds	r3, #1
 800b656:	e002      	b.n	800b65e <CircularQueue_Remove+0x128>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	68db      	ldr	r3, [r3, #12]
 800b65c:	3301      	adds	r3, #1
 800b65e:	440b      	add	r3, r1
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	b29b      	uxth	r3, r3
 800b664:	021b      	lsls	r3, r3, #8
 800b666:	b29b      	uxth	r3, r3
 800b668:	4413      	add	r3, r2
 800b66a:	b29b      	uxth	r3, r3
 800b66c:	e001      	b.n	800b672 <CircularQueue_Remove+0x13c>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	891b      	ldrh	r3, [r3, #8]
 800b672:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681a      	ldr	r2, [r3, #0]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	68d9      	ldr	r1, [r3, #12]
 800b67c:	7a7b      	ldrb	r3, [r7, #9]
 800b67e:	4419      	add	r1, r3
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	4299      	cmp	r1, r3
 800b686:	d307      	bcc.n	800b698 <CircularQueue_Remove+0x162>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	68d9      	ldr	r1, [r3, #12]
 800b68c:	7a7b      	ldrb	r3, [r7, #9]
 800b68e:	4419      	add	r1, r3
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	1acb      	subs	r3, r1, r3
 800b696:	e003      	b.n	800b6a0 <CircularQueue_Remove+0x16a>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	68d9      	ldr	r1, [r3, #12]
 800b69c:	7a7b      	ldrb	r3, [r7, #9]
 800b69e:	440b      	add	r3, r1
 800b6a0:	4413      	add	r3, r2
 800b6a2:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	695b      	ldr	r3, [r3, #20]
 800b6a8:	8979      	ldrh	r1, [r7, #10]
 800b6aa:	7a7a      	ldrb	r2, [r7, #9]
 800b6ac:	440a      	add	r2, r1
 800b6ae:	1a9a      	subs	r2, r3, r2
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	695b      	ldr	r3, [r3, #20]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d01b      	beq.n	800b6f4 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	68da      	ldr	r2, [r3, #12]
 800b6c0:	897b      	ldrh	r3, [r7, #10]
 800b6c2:	441a      	add	r2, r3
 800b6c4:	7a7b      	ldrb	r3, [r7, #9]
 800b6c6:	441a      	add	r2, r3
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d309      	bcc.n	800b6e4 <CircularQueue_Remove+0x1ae>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	68da      	ldr	r2, [r3, #12]
 800b6d4:	897b      	ldrh	r3, [r7, #10]
 800b6d6:	441a      	add	r2, r3
 800b6d8:	7a7b      	ldrb	r3, [r7, #9]
 800b6da:	441a      	add	r2, r3
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	1ad3      	subs	r3, r2, r3
 800b6e2:	e005      	b.n	800b6f0 <CircularQueue_Remove+0x1ba>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	68da      	ldr	r2, [r3, #12]
 800b6e8:	897b      	ldrh	r3, [r7, #10]
 800b6ea:	441a      	add	r2, r3
 800b6ec:	7a7b      	ldrb	r3, [r7, #9]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	699b      	ldr	r3, [r3, #24]
 800b6f8:	1e5a      	subs	r2, r3, #1
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d002      	beq.n	800b70a <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	897a      	ldrh	r2, [r7, #10]
 800b708:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800b70a:	68fb      	ldr	r3, [r7, #12]
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3714      	adds	r7, #20
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr

0800b718 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800b718:	b480      	push	{r7}
 800b71a:	b087      	sub	sp, #28
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800b722:	2300      	movs	r3, #0
 800b724:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800b726:	2300      	movs	r3, #0
 800b728:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	891b      	ldrh	r3, [r3, #8]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d101      	bne.n	800b736 <CircularQueue_Sense+0x1e>
 800b732:	2302      	movs	r3, #2
 800b734:	e000      	b.n	800b738 <CircularQueue_Sense+0x20>
 800b736:	2300      	movs	r3, #0
 800b738:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800b73a:	2300      	movs	r3, #0
 800b73c:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800b73e:	2300      	movs	r3, #0
 800b740:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	695b      	ldr	r3, [r3, #20]
 800b746:	2b00      	cmp	r3, #0
 800b748:	f000 8090 	beq.w	800b86c <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	68db      	ldr	r3, [r3, #12]
 800b750:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	891b      	ldrh	r3, [r3, #8]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d121      	bne.n	800b79e <CircularQueue_Sense+0x86>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681a      	ldr	r2, [r3, #0]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	68db      	ldr	r3, [r3, #12]
 800b762:	4413      	add	r3, r2
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	b29a      	uxth	r2, r3
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6819      	ldr	r1, [r3, #0]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	68db      	ldr	r3, [r3, #12]
 800b770:	1c58      	adds	r0, r3, #1
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	4298      	cmp	r0, r3
 800b778:	d306      	bcc.n	800b788 <CircularQueue_Sense+0x70>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	68d8      	ldr	r0, [r3, #12]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	1ac3      	subs	r3, r0, r3
 800b784:	3301      	adds	r3, #1
 800b786:	e002      	b.n	800b78e <CircularQueue_Sense+0x76>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	68db      	ldr	r3, [r3, #12]
 800b78c:	3301      	adds	r3, #1
 800b78e:	440b      	add	r3, r1
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	b29b      	uxth	r3, r3
 800b794:	021b      	lsls	r3, r3, #8
 800b796:	b29b      	uxth	r3, r3
 800b798:	4413      	add	r3, r2
 800b79a:	b29b      	uxth	r3, r3
 800b79c:	e001      	b.n	800b7a2 <CircularQueue_Sense+0x8a>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	891b      	ldrh	r3, [r3, #8]
 800b7a2:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	7f1b      	ldrb	r3, [r3, #28]
 800b7a8:	f003 0301 	and.w	r3, r3, #1
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d048      	beq.n	800b842 <CircularQueue_Sense+0x12a>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	7f1b      	ldrb	r3, [r3, #28]
 800b7b4:	f003 0302 	and.w	r3, r3, #2
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d142      	bne.n	800b842 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b7bc:	8a7b      	ldrh	r3, [r7, #18]
 800b7be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d103      	bne.n	800b7ce <CircularQueue_Sense+0xb6>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	891b      	ldrh	r3, [r3, #8]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d012      	beq.n	800b7f4 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	68da      	ldr	r2, [r3, #12]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d933      	bls.n	800b842 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	891b      	ldrh	r3, [r3, #8]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d02f      	beq.n	800b842 <CircularQueue_Sense+0x12a>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	685a      	ldr	r2, [r3, #4]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	68db      	ldr	r3, [r3, #12]
 800b7ea:	1ad3      	subs	r3, r2, r3
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	8912      	ldrh	r2, [r2, #8]
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d226      	bcs.n	800b842 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	891b      	ldrh	r3, [r3, #8]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d11d      	bne.n	800b83c <CircularQueue_Sense+0x124>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681a      	ldr	r2, [r3, #0]
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	4413      	add	r3, r2
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	b29a      	uxth	r2, r3
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6819      	ldr	r1, [r3, #0]
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	1c58      	adds	r0, r3, #1
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	4298      	cmp	r0, r3
 800b81a:	d305      	bcc.n	800b828 <CircularQueue_Sense+0x110>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	68f8      	ldr	r0, [r7, #12]
 800b822:	1ac3      	subs	r3, r0, r3
 800b824:	3301      	adds	r3, #1
 800b826:	e001      	b.n	800b82c <CircularQueue_Sense+0x114>
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	3301      	adds	r3, #1
 800b82c:	440b      	add	r3, r1
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	b29b      	uxth	r3, r3
 800b832:	021b      	lsls	r3, r3, #8
 800b834:	b29b      	uxth	r3, r3
 800b836:	4413      	add	r3, r2
 800b838:	b29b      	uxth	r3, r3
 800b83a:	e001      	b.n	800b840 <CircularQueue_Sense+0x128>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	891b      	ldrh	r3, [r3, #8]
 800b840:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681a      	ldr	r2, [r3, #0]
 800b846:	7af9      	ldrb	r1, [r7, #11]
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	4419      	add	r1, r3
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	4299      	cmp	r1, r3
 800b852:	d306      	bcc.n	800b862 <CircularQueue_Sense+0x14a>
 800b854:	7af9      	ldrb	r1, [r7, #11]
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	4419      	add	r1, r3
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	1acb      	subs	r3, r1, r3
 800b860:	e002      	b.n	800b868 <CircularQueue_Sense+0x150>
 800b862:	7af9      	ldrb	r1, [r7, #11]
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	440b      	add	r3, r1
 800b868:	4413      	add	r3, r2
 800b86a:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d002      	beq.n	800b878 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	8a7a      	ldrh	r2, [r7, #18]
 800b876:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800b878:	697b      	ldr	r3, [r7, #20]
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	371c      	adds	r7, #28
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr
	...

0800b888 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800b888:	b480      	push	{r7}
 800b88a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800b88c:	4b03      	ldr	r3, [pc, #12]	; (800b89c <LL_FLASH_GetUDN+0x14>)
 800b88e:	681b      	ldr	r3, [r3, #0]
}
 800b890:	4618      	mov	r0, r3
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr
 800b89a:	bf00      	nop
 800b89c:	1fff7580 	.word	0x1fff7580

0800b8a0 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800b8a4:	4b03      	ldr	r3, [pc, #12]	; (800b8b4 <LL_FLASH_GetDeviceID+0x14>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	b2db      	uxtb	r3, r3
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr
 800b8b4:	1fff7584 	.word	0x1fff7584

0800b8b8 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800b8bc:	4b03      	ldr	r3, [pc, #12]	; (800b8cc <LL_FLASH_GetSTCompanyID+0x14>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	0a1b      	lsrs	r3, r3, #8
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr
 800b8cc:	1fff7584 	.word	0x1fff7584

0800b8d0 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800b8d0:	b5b0      	push	{r4, r5, r7, lr}
 800b8d2:	b090      	sub	sp, #64	; 0x40
 800b8d4:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b8d6:	2392      	movs	r3, #146	; 0x92
 800b8d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800b8dc:	4b45      	ldr	r3, [pc, #276]	; (800b9f4 <APP_BLE_Init+0x124>)
 800b8de:	1d3c      	adds	r4, r7, #4
 800b8e0:	461d      	mov	r5, r3
 800b8e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b8e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b8e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b8e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b8ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b8ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b8ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b8f2:	c403      	stmia	r4!, {r0, r1}
 800b8f4:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800b8f6:	f000 fb37 	bl	800bf68 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800b8fa:	2101      	movs	r1, #1
 800b8fc:	2002      	movs	r0, #2
 800b8fe:	f001 fdbd 	bl	800d47c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800b902:	4a3d      	ldr	r2, [pc, #244]	; (800b9f8 <APP_BLE_Init+0x128>)
 800b904:	2100      	movs	r1, #0
 800b906:	2002      	movs	r0, #2
 800b908:	f001 fee4 	bl	800d6d4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800b90c:	1d3b      	adds	r3, r7, #4
 800b90e:	4618      	mov	r0, r3
 800b910:	f7fe fbe6 	bl	800a0e0 <SHCI_C2_BLE_Init>
 800b914:	4603      	mov	r3, r0
 800b916:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800b91a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d012      	beq.n	800b948 <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800b922:	4836      	ldr	r0, [pc, #216]	; (800b9fc <APP_BLE_Init+0x12c>)
 800b924:	f7ff f9ea 	bl	800acfc <DbgTraceGetFileName>
 800b928:	4601      	mov	r1, r0
 800b92a:	f240 1347 	movw	r3, #327	; 0x147
 800b92e:	4a34      	ldr	r2, [pc, #208]	; (800ba00 <APP_BLE_Init+0x130>)
 800b930:	4834      	ldr	r0, [pc, #208]	; (800ba04 <APP_BLE_Init+0x134>)
 800b932:	f002 f8d3 	bl	800dadc <iprintf>
 800b936:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b93a:	4619      	mov	r1, r3
 800b93c:	4832      	ldr	r0, [pc, #200]	; (800ba08 <APP_BLE_Init+0x138>)
 800b93e:	f002 f8cd 	bl	800dadc <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800b942:	f7f7 faed 	bl	8002f20 <Error_Handler>
 800b946:	e00c      	b.n	800b962 <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800b948:	482c      	ldr	r0, [pc, #176]	; (800b9fc <APP_BLE_Init+0x12c>)
 800b94a:	f7ff f9d7 	bl	800acfc <DbgTraceGetFileName>
 800b94e:	4601      	mov	r1, r0
 800b950:	f240 134d 	movw	r3, #333	; 0x14d
 800b954:	4a2a      	ldr	r2, [pc, #168]	; (800ba00 <APP_BLE_Init+0x130>)
 800b956:	482b      	ldr	r0, [pc, #172]	; (800ba04 <APP_BLE_Init+0x134>)
 800b958:	f002 f8c0 	bl	800dadc <iprintf>
 800b95c:	482b      	ldr	r0, [pc, #172]	; (800ba0c <APP_BLE_Init+0x13c>)
 800b95e:	f002 f8bd 	bl	800dadc <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800b962:	f000 fb17 	bl	800bf94 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800b966:	f7fe fb15 	bl	8009f94 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b96a:	4b29      	ldr	r3, [pc, #164]	; (800ba10 <APP_BLE_Init+0x140>)
 800b96c:	2200      	movs	r2, #0
 800b96e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800b972:	4b27      	ldr	r3, [pc, #156]	; (800ba10 <APP_BLE_Init+0x140>)
 800b974:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b978:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800b97a:	4a26      	ldr	r2, [pc, #152]	; (800ba14 <APP_BLE_Init+0x144>)
 800b97c:	2100      	movs	r1, #0
 800b97e:	2001      	movs	r0, #1
 800b980:	f001 fea8 	bl	800d6d4 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800b984:	2006      	movs	r0, #6
 800b986:	f7fe f979 	bl	8009c7c <aci_hal_set_radio_activity_mask>
 800b98a:	4603      	mov	r3, r0
 800b98c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800b990:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b994:	2b00      	cmp	r3, #0
 800b996:	d010      	beq.n	800b9ba <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800b998:	4818      	ldr	r0, [pc, #96]	; (800b9fc <APP_BLE_Init+0x12c>)
 800b99a:	f7ff f9af 	bl	800acfc <DbgTraceGetFileName>
 800b99e:	4601      	mov	r1, r0
 800b9a0:	f240 1371 	movw	r3, #369	; 0x171
 800b9a4:	4a16      	ldr	r2, [pc, #88]	; (800ba00 <APP_BLE_Init+0x130>)
 800b9a6:	4817      	ldr	r0, [pc, #92]	; (800ba04 <APP_BLE_Init+0x134>)
 800b9a8:	f002 f898 	bl	800dadc <iprintf>
 800b9ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	4819      	ldr	r0, [pc, #100]	; (800ba18 <APP_BLE_Init+0x148>)
 800b9b4:	f002 f892 	bl	800dadc <iprintf>
 800b9b8:	e00c      	b.n	800b9d4 <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800b9ba:	4810      	ldr	r0, [pc, #64]	; (800b9fc <APP_BLE_Init+0x12c>)
 800b9bc:	f7ff f99e 	bl	800acfc <DbgTraceGetFileName>
 800b9c0:	4601      	mov	r1, r0
 800b9c2:	f240 1375 	movw	r3, #373	; 0x175
 800b9c6:	4a0e      	ldr	r2, [pc, #56]	; (800ba00 <APP_BLE_Init+0x130>)
 800b9c8:	480e      	ldr	r0, [pc, #56]	; (800ba04 <APP_BLE_Init+0x134>)
 800b9ca:	f002 f887 	bl	800dadc <iprintf>
 800b9ce:	4813      	ldr	r0, [pc, #76]	; (800ba1c <APP_BLE_Init+0x14c>)
 800b9d0:	f002 f884 	bl	800dadc <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800b9d4:	f000 ffa4 	bl	800c920 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800b9d8:	4b0d      	ldr	r3, [pc, #52]	; (800ba10 <APP_BLE_Init+0x140>)
 800b9da:	2200      	movs	r2, #0
 800b9dc:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800b9de:	4b0c      	ldr	r3, [pc, #48]	; (800ba10 <APP_BLE_Init+0x140>)
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800b9e4:	2001      	movs	r0, #1
 800b9e6:	f000 fd69 	bl	800c4bc <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800b9ea:	bf00      	nop
}
 800b9ec:	3740      	adds	r7, #64	; 0x40
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bdb0      	pop	{r4, r5, r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	0800eeb4 	.word	0x0800eeb4
 800b9f8:	0800a2fd 	.word	0x0800a2fd
 800b9fc:	0800eda8 	.word	0x0800eda8
 800ba00:	080100ec 	.word	0x080100ec
 800ba04:	0800edc4 	.word	0x0800edc4
 800ba08:	0800edd8 	.word	0x0800edd8
 800ba0c:	0800ee10 	.word	0x0800ee10
 800ba10:	2000170c 	.word	0x2000170c
 800ba14:	0800c641 	.word	0x0800c641
 800ba18:	0800ee38 	.word	0x0800ee38
 800ba1c:	0800ee7c 	.word	0x0800ee7c

0800ba20 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800ba20:	b5b0      	push	{r4, r5, r7, lr}
 800ba22:	b08e      	sub	sp, #56	; 0x38
 800ba24:	af04      	add	r7, sp, #16
 800ba26:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800ba28:	2392      	movs	r3, #146	; 0x92
 800ba2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	3301      	adds	r3, #1
 800ba32:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800ba34:	6a3b      	ldr	r3, [r7, #32]
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	2bff      	cmp	r3, #255	; 0xff
 800ba3a:	f000 811d 	beq.w	800bc78 <SVCCTL_App_Notification+0x258>
 800ba3e:	2bff      	cmp	r3, #255	; 0xff
 800ba40:	f300 8269 	bgt.w	800bf16 <SVCCTL_App_Notification+0x4f6>
 800ba44:	2b05      	cmp	r3, #5
 800ba46:	d002      	beq.n	800ba4e <SVCCTL_App_Notification+0x2e>
 800ba48:	2b3e      	cmp	r3, #62	; 0x3e
 800ba4a:	d042      	beq.n	800bad2 <SVCCTL_App_Notification+0xb2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800ba4c:	e263      	b.n	800bf16 <SVCCTL_App_Notification+0x4f6>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800ba4e:	6a3b      	ldr	r3, [r7, #32]
 800ba50:	3302      	adds	r3, #2
 800ba52:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ba5a:	b29a      	uxth	r2, r3
 800ba5c:	4bb1      	ldr	r3, [pc, #708]	; (800bd24 <SVCCTL_App_Notification+0x304>)
 800ba5e:	8adb      	ldrh	r3, [r3, #22]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d128      	bne.n	800bab6 <SVCCTL_App_Notification+0x96>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800ba64:	4baf      	ldr	r3, [pc, #700]	; (800bd24 <SVCCTL_App_Notification+0x304>)
 800ba66:	2200      	movs	r2, #0
 800ba68:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ba6a:	4bae      	ldr	r3, [pc, #696]	; (800bd24 <SVCCTL_App_Notification+0x304>)
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800ba72:	48ad      	ldr	r0, [pc, #692]	; (800bd28 <SVCCTL_App_Notification+0x308>)
 800ba74:	f7ff f942 	bl	800acfc <DbgTraceGetFileName>
 800ba78:	4601      	mov	r1, r0
 800ba7a:	f240 13b9 	movw	r3, #441	; 0x1b9
 800ba7e:	4aab      	ldr	r2, [pc, #684]	; (800bd2c <SVCCTL_App_Notification+0x30c>)
 800ba80:	48ab      	ldr	r0, [pc, #684]	; (800bd30 <SVCCTL_App_Notification+0x310>)
 800ba82:	f002 f82b 	bl	800dadc <iprintf>
 800ba86:	48ab      	ldr	r0, [pc, #684]	; (800bd34 <SVCCTL_App_Notification+0x314>)
 800ba88:	f002 f896 	bl	800dbb8 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800ba8c:	48a6      	ldr	r0, [pc, #664]	; (800bd28 <SVCCTL_App_Notification+0x308>)
 800ba8e:	f7ff f935 	bl	800acfc <DbgTraceGetFileName>
 800ba92:	4601      	mov	r1, r0
 800ba94:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 800ba98:	4aa4      	ldr	r2, [pc, #656]	; (800bd2c <SVCCTL_App_Notification+0x30c>)
 800ba9a:	48a5      	ldr	r0, [pc, #660]	; (800bd30 <SVCCTL_App_Notification+0x310>)
 800ba9c:	f002 f81e 	bl	800dadc <iprintf>
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800baa6:	b29b      	uxth	r3, r3
 800baa8:	4619      	mov	r1, r3
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	78db      	ldrb	r3, [r3, #3]
 800baae:	461a      	mov	r2, r3
 800bab0:	48a1      	ldr	r0, [pc, #644]	; (800bd38 <SVCCTL_App_Notification+0x318>)
 800bab2:	f002 f813 	bl	800dadc <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800bab6:	2001      	movs	r0, #1
 800bab8:	f000 fd00 	bl	800c4bc <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800babc:	4b9f      	ldr	r3, [pc, #636]	; (800bd3c <SVCCTL_App_Notification+0x31c>)
 800babe:	2201      	movs	r2, #1
 800bac0:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800bac2:	4b98      	ldr	r3, [pc, #608]	; (800bd24 <SVCCTL_App_Notification+0x304>)
 800bac4:	8ada      	ldrh	r2, [r3, #22]
 800bac6:	4b9d      	ldr	r3, [pc, #628]	; (800bd3c <SVCCTL_App_Notification+0x31c>)
 800bac8:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800baca:	489c      	ldr	r0, [pc, #624]	; (800bd3c <SVCCTL_App_Notification+0x31c>)
 800bacc:	f000 ff14 	bl	800c8f8 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800bad0:	e224      	b.n	800bf1c <SVCCTL_App_Notification+0x4fc>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800bad2:	6a3b      	ldr	r3, [r7, #32]
 800bad4:	3302      	adds	r3, #2
 800bad6:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	2b01      	cmp	r3, #1
 800bade:	d042      	beq.n	800bb66 <SVCCTL_App_Notification+0x146>
 800bae0:	2b03      	cmp	r3, #3
 800bae2:	f040 80c7 	bne.w	800bc74 <SVCCTL_App_Notification+0x254>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	3301      	adds	r3, #1
 800baea:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800baec:	488e      	ldr	r0, [pc, #568]	; (800bd28 <SVCCTL_App_Notification+0x308>)
 800baee:	f7ff f905 	bl	800acfc <DbgTraceGetFileName>
 800baf2:	4601      	mov	r1, r0
 800baf4:	f240 13e1 	movw	r3, #481	; 0x1e1
 800baf8:	4a8c      	ldr	r2, [pc, #560]	; (800bd2c <SVCCTL_App_Notification+0x30c>)
 800bafa:	488d      	ldr	r0, [pc, #564]	; (800bd30 <SVCCTL_App_Notification+0x310>)
 800bafc:	f001 ffee 	bl	800dadc <iprintf>
 800bb00:	488f      	ldr	r0, [pc, #572]	; (800bd40 <SVCCTL_App_Notification+0x320>)
 800bb02:	f002 f859 	bl	800dbb8 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800bb06:	4888      	ldr	r0, [pc, #544]	; (800bd28 <SVCCTL_App_Notification+0x308>)
 800bb08:	f7ff f8f8 	bl	800acfc <DbgTraceGetFileName>
 800bb0c:	4601      	mov	r1, r0
 800bb0e:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 800bb12:	4a86      	ldr	r2, [pc, #536]	; (800bd2c <SVCCTL_App_Notification+0x30c>)
 800bb14:	4886      	ldr	r0, [pc, #536]	; (800bd30 <SVCCTL_App_Notification+0x310>)
 800bb16:	f001 ffe1 	bl	800dadc <iprintf>
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7f4 fcd6 	bl	80004d4 <__aeabi_i2d>
 800bb28:	f04f 0200 	mov.w	r2, #0
 800bb2c:	4b85      	ldr	r3, [pc, #532]	; (800bd44 <SVCCTL_App_Notification+0x324>)
 800bb2e:	f7f4 fd3b 	bl	80005a8 <__aeabi_dmul>
 800bb32:	4602      	mov	r2, r0
 800bb34:	460b      	mov	r3, r1
 800bb36:	4610      	mov	r0, r2
 800bb38:	4619      	mov	r1, r3
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800bb40:	b29b      	uxth	r3, r3
 800bb42:	461c      	mov	r4, r3
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	4613      	mov	r3, r2
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	4413      	add	r3, r2
 800bb54:	005b      	lsls	r3, r3, #1
 800bb56:	9301      	str	r3, [sp, #4]
 800bb58:	9400      	str	r4, [sp, #0]
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	487a      	ldr	r0, [pc, #488]	; (800bd48 <SVCCTL_App_Notification+0x328>)
 800bb60:	f001 ffbc 	bl	800dadc <iprintf>
          break;
 800bb64:	e087      	b.n	800bc76 <SVCCTL_App_Notification+0x256>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	3301      	adds	r3, #1
 800bb6a:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800bb6c:	486e      	ldr	r0, [pc, #440]	; (800bd28 <SVCCTL_App_Notification+0x308>)
 800bb6e:	f7ff f8c5 	bl	800acfc <DbgTraceGetFileName>
 800bb72:	4601      	mov	r1, r0
 800bb74:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800bb78:	4a6c      	ldr	r2, [pc, #432]	; (800bd2c <SVCCTL_App_Notification+0x30c>)
 800bb7a:	486d      	ldr	r0, [pc, #436]	; (800bd30 <SVCCTL_App_Notification+0x310>)
 800bb7c:	f001 ffae 	bl	800dadc <iprintf>
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	4619      	mov	r1, r3
 800bb8a:	4870      	ldr	r0, [pc, #448]	; (800bd4c <SVCCTL_App_Notification+0x32c>)
 800bb8c:	f001 ffa6 	bl	800dadc <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800bb90:	4865      	ldr	r0, [pc, #404]	; (800bd28 <SVCCTL_App_Notification+0x308>)
 800bb92:	f7ff f8b3 	bl	800acfc <DbgTraceGetFileName>
 800bb96:	4601      	mov	r1, r0
 800bb98:	f240 13f5 	movw	r3, #501	; 0x1f5
 800bb9c:	4a63      	ldr	r2, [pc, #396]	; (800bd2c <SVCCTL_App_Notification+0x30c>)
 800bb9e:	4864      	ldr	r0, [pc, #400]	; (800bd30 <SVCCTL_App_Notification+0x310>)
 800bba0:	f001 ff9c 	bl	800dadc <iprintf>
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	7a9b      	ldrb	r3, [r3, #10]
 800bba8:	4618      	mov	r0, r3
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	7a5b      	ldrb	r3, [r3, #9]
 800bbae:	461c      	mov	r4, r3
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	7a1b      	ldrb	r3, [r3, #8]
 800bbb4:	461d      	mov	r5, r3
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	79db      	ldrb	r3, [r3, #7]
 800bbba:	461a      	mov	r2, r3
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	799b      	ldrb	r3, [r3, #6]
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	795b      	ldrb	r3, [r3, #5]
 800bbc6:	9302      	str	r3, [sp, #8]
 800bbc8:	9101      	str	r1, [sp, #4]
 800bbca:	9200      	str	r2, [sp, #0]
 800bbcc:	462b      	mov	r3, r5
 800bbce:	4622      	mov	r2, r4
 800bbd0:	4601      	mov	r1, r0
 800bbd2:	485f      	ldr	r0, [pc, #380]	; (800bd50 <SVCCTL_App_Notification+0x330>)
 800bbd4:	f001 ff82 	bl	800dadc <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800bbd8:	4853      	ldr	r0, [pc, #332]	; (800bd28 <SVCCTL_App_Notification+0x308>)
 800bbda:	f7ff f88f 	bl	800acfc <DbgTraceGetFileName>
 800bbde:	4601      	mov	r1, r0
 800bbe0:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 800bbe4:	4a51      	ldr	r2, [pc, #324]	; (800bd2c <SVCCTL_App_Notification+0x30c>)
 800bbe6:	4852      	ldr	r0, [pc, #328]	; (800bd30 <SVCCTL_App_Notification+0x310>)
 800bbe8:	f001 ff78 	bl	800dadc <iprintf>
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7f4 fc6d 	bl	80004d4 <__aeabi_i2d>
 800bbfa:	f04f 0200 	mov.w	r2, #0
 800bbfe:	4b51      	ldr	r3, [pc, #324]	; (800bd44 <SVCCTL_App_Notification+0x324>)
 800bc00:	f7f4 fcd2 	bl	80005a8 <__aeabi_dmul>
 800bc04:	4602      	mov	r2, r0
 800bc06:	460b      	mov	r3, r1
 800bc08:	4610      	mov	r0, r2
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	461c      	mov	r4, r3
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	461a      	mov	r2, r3
 800bc20:	4613      	mov	r3, r2
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	4413      	add	r3, r2
 800bc26:	005b      	lsls	r3, r3, #1
 800bc28:	9301      	str	r3, [sp, #4]
 800bc2a:	9400      	str	r4, [sp, #0]
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	460b      	mov	r3, r1
 800bc30:	4845      	ldr	r0, [pc, #276]	; (800bd48 <SVCCTL_App_Notification+0x328>)
 800bc32:	f001 ff53 	bl	800dadc <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800bc36:	4b3b      	ldr	r3, [pc, #236]	; (800bd24 <SVCCTL_App_Notification+0x304>)
 800bc38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bc3c:	2b04      	cmp	r3, #4
 800bc3e:	d104      	bne.n	800bc4a <SVCCTL_App_Notification+0x22a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800bc40:	4b38      	ldr	r3, [pc, #224]	; (800bd24 <SVCCTL_App_Notification+0x304>)
 800bc42:	2206      	movs	r2, #6
 800bc44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800bc48:	e003      	b.n	800bc52 <SVCCTL_App_Notification+0x232>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800bc4a:	4b36      	ldr	r3, [pc, #216]	; (800bd24 <SVCCTL_App_Notification+0x304>)
 800bc4c:	2205      	movs	r2, #5
 800bc4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	4b32      	ldr	r3, [pc, #200]	; (800bd24 <SVCCTL_App_Notification+0x304>)
 800bc5c:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800bc5e:	4b37      	ldr	r3, [pc, #220]	; (800bd3c <SVCCTL_App_Notification+0x31c>)
 800bc60:	2200      	movs	r2, #0
 800bc62:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800bc64:	4b2f      	ldr	r3, [pc, #188]	; (800bd24 <SVCCTL_App_Notification+0x304>)
 800bc66:	8ada      	ldrh	r2, [r3, #22]
 800bc68:	4b34      	ldr	r3, [pc, #208]	; (800bd3c <SVCCTL_App_Notification+0x31c>)
 800bc6a:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800bc6c:	4833      	ldr	r0, [pc, #204]	; (800bd3c <SVCCTL_App_Notification+0x31c>)
 800bc6e:	f000 fe43 	bl	800c8f8 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800bc72:	e000      	b.n	800bc76 <SVCCTL_App_Notification+0x256>
          break;
 800bc74:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800bc76:	e151      	b.n	800bf1c <SVCCTL_App_Notification+0x4fc>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800bc78:	6a3b      	ldr	r3, [r7, #32]
 800bc7a:	3302      	adds	r3, #2
 800bc7c:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800bc7e:	69fb      	ldr	r3, [r7, #28]
 800bc80:	881b      	ldrh	r3, [r3, #0]
 800bc82:	b29b      	uxth	r3, r3
 800bc84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc88:	f000 8141 	beq.w	800bf0e <SVCCTL_App_Notification+0x4ee>
 800bc8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc90:	f300 8143 	bgt.w	800bf1a <SVCCTL_App_Notification+0x4fa>
 800bc94:	2b04      	cmp	r3, #4
 800bc96:	f000 813c 	beq.w	800bf12 <SVCCTL_App_Notification+0x4f2>
 800bc9a:	2b04      	cmp	r3, #4
 800bc9c:	f2c0 813d 	blt.w	800bf1a <SVCCTL_App_Notification+0x4fa>
 800bca0:	f240 420a 	movw	r2, #1034	; 0x40a
 800bca4:	4293      	cmp	r3, r2
 800bca6:	f300 8138 	bgt.w	800bf1a <SVCCTL_App_Notification+0x4fa>
 800bcaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcae:	f340 8134 	ble.w	800bf1a <SVCCTL_App_Notification+0x4fa>
 800bcb2:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800bcb6:	2b09      	cmp	r3, #9
 800bcb8:	f200 812f 	bhi.w	800bf1a <SVCCTL_App_Notification+0x4fa>
 800bcbc:	a201      	add	r2, pc, #4	; (adr r2, 800bcc4 <SVCCTL_App_Notification+0x2a4>)
 800bcbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcc2:	bf00      	nop
 800bcc4:	0800be89 	.word	0x0800be89
 800bcc8:	0800bd5d 	.word	0x0800bd5d
 800bccc:	0800bf1b 	.word	0x0800bf1b
 800bcd0:	0800bf1b 	.word	0x0800bf1b
 800bcd4:	0800bf1b 	.word	0x0800bf1b
 800bcd8:	0800bf1b 	.word	0x0800bf1b
 800bcdc:	0800bced 	.word	0x0800bced
 800bce0:	0800bf1b 	.word	0x0800bf1b
 800bce4:	0800bdcf 	.word	0x0800bdcf
 800bce8:	0800bd09 	.word	0x0800bd09
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800bcec:	480e      	ldr	r0, [pc, #56]	; (800bd28 <SVCCTL_App_Notification+0x308>)
 800bcee:	f7ff f805 	bl	800acfc <DbgTraceGetFileName>
 800bcf2:	4601      	mov	r1, r0
 800bcf4:	f240 233e 	movw	r3, #574	; 0x23e
 800bcf8:	4a0c      	ldr	r2, [pc, #48]	; (800bd2c <SVCCTL_App_Notification+0x30c>)
 800bcfa:	480d      	ldr	r0, [pc, #52]	; (800bd30 <SVCCTL_App_Notification+0x310>)
 800bcfc:	f001 feee 	bl	800dadc <iprintf>
 800bd00:	4814      	ldr	r0, [pc, #80]	; (800bd54 <SVCCTL_App_Notification+0x334>)
 800bd02:	f001 feeb 	bl	800dadc <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800bd06:	e105      	b.n	800bf14 <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800bd08:	4807      	ldr	r0, [pc, #28]	; (800bd28 <SVCCTL_App_Notification+0x308>)
 800bd0a:	f7fe fff7 	bl	800acfc <DbgTraceGetFileName>
 800bd0e:	4601      	mov	r1, r0
 800bd10:	f240 234e 	movw	r3, #590	; 0x24e
 800bd14:	4a05      	ldr	r2, [pc, #20]	; (800bd2c <SVCCTL_App_Notification+0x30c>)
 800bd16:	4806      	ldr	r0, [pc, #24]	; (800bd30 <SVCCTL_App_Notification+0x310>)
 800bd18:	f001 fee0 	bl	800dadc <iprintf>
 800bd1c:	480e      	ldr	r0, [pc, #56]	; (800bd58 <SVCCTL_App_Notification+0x338>)
 800bd1e:	f001 ff4b 	bl	800dbb8 <puts>
          break;
 800bd22:	e0f7      	b.n	800bf14 <SVCCTL_App_Notification+0x4f4>
 800bd24:	2000170c 	.word	0x2000170c
 800bd28:	0800eda8 	.word	0x0800eda8
 800bd2c:	080100fc 	.word	0x080100fc
 800bd30:	0800edc4 	.word	0x0800edc4
 800bd34:	0800eef0 	.word	0x0800eef0
 800bd38:	0800ef1c 	.word	0x0800ef1c
 800bd3c:	20001790 	.word	0x20001790
 800bd40:	0800ef58 	.word	0x0800ef58
 800bd44:	3ff40000 	.word	0x3ff40000
 800bd48:	0800ef8c 	.word	0x0800ef8c
 800bd4c:	0800eff8 	.word	0x0800eff8
 800bd50:	0800f040 	.word	0x0800f040
 800bd54:	0800f090 	.word	0x0800f090
 800bd58:	0800f0b8 	.word	0x0800f0b8
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800bd5c:	4872      	ldr	r0, [pc, #456]	; (800bf28 <SVCCTL_App_Notification+0x508>)
 800bd5e:	f7fe ffcd 	bl	800acfc <DbgTraceGetFileName>
 800bd62:	4601      	mov	r1, r0
 800bd64:	f240 2355 	movw	r3, #597	; 0x255
 800bd68:	4a70      	ldr	r2, [pc, #448]	; (800bf2c <SVCCTL_App_Notification+0x50c>)
 800bd6a:	4871      	ldr	r0, [pc, #452]	; (800bf30 <SVCCTL_App_Notification+0x510>)
 800bd6c:	f001 feb6 	bl	800dadc <iprintf>
 800bd70:	4870      	ldr	r0, [pc, #448]	; (800bf34 <SVCCTL_App_Notification+0x514>)
 800bd72:	f001 ff21 	bl	800dbb8 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800bd76:	4b70      	ldr	r3, [pc, #448]	; (800bf38 <SVCCTL_App_Notification+0x518>)
 800bd78:	8adb      	ldrh	r3, [r3, #22]
 800bd7a:	4970      	ldr	r1, [pc, #448]	; (800bf3c <SVCCTL_App_Notification+0x51c>)
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7fd f9d4 	bl	800912a <aci_gap_pass_key_resp>
 800bd82:	4603      	mov	r3, r0
 800bd84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800bd88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d010      	beq.n	800bdb2 <SVCCTL_App_Notification+0x392>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800bd90:	4865      	ldr	r0, [pc, #404]	; (800bf28 <SVCCTL_App_Notification+0x508>)
 800bd92:	f7fe ffb3 	bl	800acfc <DbgTraceGetFileName>
 800bd96:	4601      	mov	r1, r0
 800bd98:	f240 235a 	movw	r3, #602	; 0x25a
 800bd9c:	4a63      	ldr	r2, [pc, #396]	; (800bf2c <SVCCTL_App_Notification+0x50c>)
 800bd9e:	4864      	ldr	r0, [pc, #400]	; (800bf30 <SVCCTL_App_Notification+0x510>)
 800bda0:	f001 fe9c 	bl	800dadc <iprintf>
 800bda4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bda8:	4619      	mov	r1, r3
 800bdaa:	4865      	ldr	r0, [pc, #404]	; (800bf40 <SVCCTL_App_Notification+0x520>)
 800bdac:	f001 fe96 	bl	800dadc <iprintf>
          break;
 800bdb0:	e0b0      	b.n	800bf14 <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800bdb2:	485d      	ldr	r0, [pc, #372]	; (800bf28 <SVCCTL_App_Notification+0x508>)
 800bdb4:	f7fe ffa2 	bl	800acfc <DbgTraceGetFileName>
 800bdb8:	4601      	mov	r1, r0
 800bdba:	f240 235e 	movw	r3, #606	; 0x25e
 800bdbe:	4a5b      	ldr	r2, [pc, #364]	; (800bf2c <SVCCTL_App_Notification+0x50c>)
 800bdc0:	485b      	ldr	r0, [pc, #364]	; (800bf30 <SVCCTL_App_Notification+0x510>)
 800bdc2:	f001 fe8b 	bl	800dadc <iprintf>
 800bdc6:	485f      	ldr	r0, [pc, #380]	; (800bf44 <SVCCTL_App_Notification+0x524>)
 800bdc8:	f001 fef6 	bl	800dbb8 <puts>
          break;
 800bdcc:	e0a2      	b.n	800bf14 <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800bdce:	4856      	ldr	r0, [pc, #344]	; (800bf28 <SVCCTL_App_Notification+0x508>)
 800bdd0:	f7fe ff94 	bl	800acfc <DbgTraceGetFileName>
 800bdd4:	4601      	mov	r1, r0
 800bdd6:	f240 2366 	movw	r3, #614	; 0x266
 800bdda:	4a54      	ldr	r2, [pc, #336]	; (800bf2c <SVCCTL_App_Notification+0x50c>)
 800bddc:	4854      	ldr	r0, [pc, #336]	; (800bf30 <SVCCTL_App_Notification+0x510>)
 800bdde:	f001 fe7d 	bl	800dadc <iprintf>
 800bde2:	4859      	ldr	r0, [pc, #356]	; (800bf48 <SVCCTL_App_Notification+0x528>)
 800bde4:	f001 fee8 	bl	800dbb8 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800bde8:	484f      	ldr	r0, [pc, #316]	; (800bf28 <SVCCTL_App_Notification+0x508>)
 800bdea:	f7fe ff87 	bl	800acfc <DbgTraceGetFileName>
 800bdee:	4601      	mov	r1, r0
 800bdf0:	f240 2367 	movw	r3, #615	; 0x267
 800bdf4:	4a4d      	ldr	r2, [pc, #308]	; (800bf2c <SVCCTL_App_Notification+0x50c>)
 800bdf6:	484e      	ldr	r0, [pc, #312]	; (800bf30 <SVCCTL_App_Notification+0x510>)
 800bdf8:	f001 fe70 	bl	800dadc <iprintf>
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	3302      	adds	r3, #2
 800be00:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800be04:	4619      	mov	r1, r3
 800be06:	4851      	ldr	r0, [pc, #324]	; (800bf4c <SVCCTL_App_Notification+0x52c>)
 800be08:	f001 fe68 	bl	800dadc <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800be0c:	4846      	ldr	r0, [pc, #280]	; (800bf28 <SVCCTL_App_Notification+0x508>)
 800be0e:	f7fe ff75 	bl	800acfc <DbgTraceGetFileName>
 800be12:	4601      	mov	r1, r0
 800be14:	f240 2369 	movw	r3, #617	; 0x269
 800be18:	4a44      	ldr	r2, [pc, #272]	; (800bf2c <SVCCTL_App_Notification+0x50c>)
 800be1a:	4845      	ldr	r0, [pc, #276]	; (800bf30 <SVCCTL_App_Notification+0x510>)
 800be1c:	f001 fe5e 	bl	800dadc <iprintf>
 800be20:	69fb      	ldr	r3, [r7, #28]
 800be22:	3302      	adds	r3, #2
 800be24:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800be28:	4619      	mov	r1, r3
 800be2a:	4849      	ldr	r0, [pc, #292]	; (800bf50 <SVCCTL_App_Notification+0x530>)
 800be2c:	f001 fe56 	bl	800dadc <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800be30:	4b41      	ldr	r3, [pc, #260]	; (800bf38 <SVCCTL_App_Notification+0x518>)
 800be32:	8adb      	ldrh	r3, [r3, #22]
 800be34:	2101      	movs	r1, #1
 800be36:	4618      	mov	r0, r3
 800be38:	f7fd fb21 	bl	800947e <aci_gap_numeric_comparison_value_confirm_yesno>
 800be3c:	4603      	mov	r3, r0
 800be3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800be42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be46:	2b00      	cmp	r3, #0
 800be48:	d010      	beq.n	800be6c <SVCCTL_App_Notification+0x44c>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800be4a:	4837      	ldr	r0, [pc, #220]	; (800bf28 <SVCCTL_App_Notification+0x508>)
 800be4c:	f7fe ff56 	bl	800acfc <DbgTraceGetFileName>
 800be50:	4601      	mov	r1, r0
 800be52:	f240 236e 	movw	r3, #622	; 0x26e
 800be56:	4a35      	ldr	r2, [pc, #212]	; (800bf2c <SVCCTL_App_Notification+0x50c>)
 800be58:	4835      	ldr	r0, [pc, #212]	; (800bf30 <SVCCTL_App_Notification+0x510>)
 800be5a:	f001 fe3f 	bl	800dadc <iprintf>
 800be5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be62:	4619      	mov	r1, r3
 800be64:	483b      	ldr	r0, [pc, #236]	; (800bf54 <SVCCTL_App_Notification+0x534>)
 800be66:	f001 fe39 	bl	800dadc <iprintf>
          break;
 800be6a:	e053      	b.n	800bf14 <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800be6c:	482e      	ldr	r0, [pc, #184]	; (800bf28 <SVCCTL_App_Notification+0x508>)
 800be6e:	f7fe ff45 	bl	800acfc <DbgTraceGetFileName>
 800be72:	4601      	mov	r1, r0
 800be74:	f240 2372 	movw	r3, #626	; 0x272
 800be78:	4a2c      	ldr	r2, [pc, #176]	; (800bf2c <SVCCTL_App_Notification+0x50c>)
 800be7a:	482d      	ldr	r0, [pc, #180]	; (800bf30 <SVCCTL_App_Notification+0x510>)
 800be7c:	f001 fe2e 	bl	800dadc <iprintf>
 800be80:	4835      	ldr	r0, [pc, #212]	; (800bf58 <SVCCTL_App_Notification+0x538>)
 800be82:	f001 fe99 	bl	800dbb8 <puts>
          break;
 800be86:	e045      	b.n	800bf14 <SVCCTL_App_Notification+0x4f4>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800be88:	69fb      	ldr	r3, [r7, #28]
 800be8a:	3302      	adds	r3, #2
 800be8c:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800be8e:	4826      	ldr	r0, [pc, #152]	; (800bf28 <SVCCTL_App_Notification+0x508>)
 800be90:	f7fe ff34 	bl	800acfc <DbgTraceGetFileName>
 800be94:	4601      	mov	r1, r0
 800be96:	f44f 731f 	mov.w	r3, #636	; 0x27c
 800be9a:	4a24      	ldr	r2, [pc, #144]	; (800bf2c <SVCCTL_App_Notification+0x50c>)
 800be9c:	4824      	ldr	r0, [pc, #144]	; (800bf30 <SVCCTL_App_Notification+0x510>)
 800be9e:	f001 fe1d 	bl	800dadc <iprintf>
 800bea2:	482e      	ldr	r0, [pc, #184]	; (800bf5c <SVCCTL_App_Notification+0x53c>)
 800bea4:	f001 fe88 	bl	800dbb8 <puts>
          if (p_pairing_complete->Status != 0)
 800bea8:	69bb      	ldr	r3, [r7, #24]
 800beaa:	789b      	ldrb	r3, [r3, #2]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d013      	beq.n	800bed8 <SVCCTL_App_Notification+0x4b8>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800beb0:	481d      	ldr	r0, [pc, #116]	; (800bf28 <SVCCTL_App_Notification+0x508>)
 800beb2:	f7fe ff23 	bl	800acfc <DbgTraceGetFileName>
 800beb6:	4601      	mov	r1, r0
 800beb8:	f240 237f 	movw	r3, #639	; 0x27f
 800bebc:	4a1b      	ldr	r2, [pc, #108]	; (800bf2c <SVCCTL_App_Notification+0x50c>)
 800bebe:	481c      	ldr	r0, [pc, #112]	; (800bf30 <SVCCTL_App_Notification+0x510>)
 800bec0:	f001 fe0c 	bl	800dadc <iprintf>
 800bec4:	69bb      	ldr	r3, [r7, #24]
 800bec6:	789b      	ldrb	r3, [r3, #2]
 800bec8:	4619      	mov	r1, r3
 800beca:	69bb      	ldr	r3, [r7, #24]
 800becc:	78db      	ldrb	r3, [r3, #3]
 800bece:	461a      	mov	r2, r3
 800bed0:	4823      	ldr	r0, [pc, #140]	; (800bf60 <SVCCTL_App_Notification+0x540>)
 800bed2:	f001 fe03 	bl	800dadc <iprintf>
 800bed6:	e00c      	b.n	800bef2 <SVCCTL_App_Notification+0x4d2>
            APP_DBG_MSG("     - Pairing Success\n");
 800bed8:	4813      	ldr	r0, [pc, #76]	; (800bf28 <SVCCTL_App_Notification+0x508>)
 800beda:	f7fe ff0f 	bl	800acfc <DbgTraceGetFileName>
 800bede:	4601      	mov	r1, r0
 800bee0:	f240 2383 	movw	r3, #643	; 0x283
 800bee4:	4a11      	ldr	r2, [pc, #68]	; (800bf2c <SVCCTL_App_Notification+0x50c>)
 800bee6:	4812      	ldr	r0, [pc, #72]	; (800bf30 <SVCCTL_App_Notification+0x510>)
 800bee8:	f001 fdf8 	bl	800dadc <iprintf>
 800beec:	481d      	ldr	r0, [pc, #116]	; (800bf64 <SVCCTL_App_Notification+0x544>)
 800beee:	f001 fe63 	bl	800dbb8 <puts>
          APP_DBG_MSG("\n");
 800bef2:	480d      	ldr	r0, [pc, #52]	; (800bf28 <SVCCTL_App_Notification+0x508>)
 800bef4:	f7fe ff02 	bl	800acfc <DbgTraceGetFileName>
 800bef8:	4601      	mov	r1, r0
 800befa:	f240 2385 	movw	r3, #645	; 0x285
 800befe:	4a0b      	ldr	r2, [pc, #44]	; (800bf2c <SVCCTL_App_Notification+0x50c>)
 800bf00:	480b      	ldr	r0, [pc, #44]	; (800bf30 <SVCCTL_App_Notification+0x510>)
 800bf02:	f001 fdeb 	bl	800dadc <iprintf>
 800bf06:	200a      	movs	r0, #10
 800bf08:	f001 fdfa 	bl	800db00 <putchar>
          break;
 800bf0c:	e002      	b.n	800bf14 <SVCCTL_App_Notification+0x4f4>
          break;
 800bf0e:	bf00      	nop
 800bf10:	e003      	b.n	800bf1a <SVCCTL_App_Notification+0x4fa>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800bf12:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800bf14:	e001      	b.n	800bf1a <SVCCTL_App_Notification+0x4fa>
      break;
 800bf16:	bf00      	nop
 800bf18:	e000      	b.n	800bf1c <SVCCTL_App_Notification+0x4fc>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800bf1a:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800bf1c:	2301      	movs	r3, #1
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3728      	adds	r7, #40	; 0x28
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bdb0      	pop	{r4, r5, r7, pc}
 800bf26:	bf00      	nop
 800bf28:	0800eda8 	.word	0x0800eda8
 800bf2c:	080100fc 	.word	0x080100fc
 800bf30:	0800edc4 	.word	0x0800edc4
 800bf34:	0800f0e8 	.word	0x0800f0e8
 800bf38:	2000170c 	.word	0x2000170c
 800bf3c:	0001b207 	.word	0x0001b207
 800bf40:	0800f110 	.word	0x0800f110
 800bf44:	0800f144 	.word	0x0800f144
 800bf48:	0800f16c 	.word	0x0800f16c
 800bf4c:	0800f1a0 	.word	0x0800f1a0
 800bf50:	0800f1bc 	.word	0x0800f1bc
 800bf54:	0800f1d4 	.word	0x0800f1d4
 800bf58:	0800f224 	.word	0x0800f224
 800bf5c:	0800f26c 	.word	0x0800f26c
 800bf60:	0800f298 	.word	0x0800f298
 800bf64:	0800f2d4 	.word	0x0800f2d4

0800bf68 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b082      	sub	sp, #8
 800bf6c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800bf6e:	4b06      	ldr	r3, [pc, #24]	; (800bf88 <Ble_Tl_Init+0x20>)
 800bf70:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800bf72:	4b06      	ldr	r3, [pc, #24]	; (800bf8c <Ble_Tl_Init+0x24>)
 800bf74:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800bf76:	463b      	mov	r3, r7
 800bf78:	4619      	mov	r1, r3
 800bf7a:	4805      	ldr	r0, [pc, #20]	; (800bf90 <Ble_Tl_Init+0x28>)
 800bf7c:	f7fe f9a2 	bl	800a2c4 <hci_init>

  return;
 800bf80:	bf00      	nop
}
 800bf82:	3708      	adds	r7, #8
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	200300d8 	.word	0x200300d8
 800bf8c:	0800c799 	.word	0x0800c799
 800bf90:	0800c761 	.word	0x0800c761

0800bf94 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800bf94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf96:	b08d      	sub	sp, #52	; 0x34
 800bf98:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bf9e:	2392      	movs	r3, #146	; 0x92
 800bfa0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800bfa2:	48a3      	ldr	r0, [pc, #652]	; (800c230 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800bfa4:	f7fe feaa 	bl	800acfc <DbgTraceGetFileName>
 800bfa8:	4601      	mov	r1, r0
 800bfaa:	f240 23c5 	movw	r3, #709	; 0x2c5
 800bfae:	4aa1      	ldr	r2, [pc, #644]	; (800c234 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800bfb0:	48a1      	ldr	r0, [pc, #644]	; (800c238 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800bfb2:	f001 fd93 	bl	800dadc <iprintf>
 800bfb6:	48a1      	ldr	r0, [pc, #644]	; (800c23c <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800bfb8:	f001 fdfe 	bl	800dbb8 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800bfbc:	f7fd feb2 	bl	8009d24 <hci_reset>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800bfc4:	7dfb      	ldrb	r3, [r7, #23]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d00f      	beq.n	800bfea <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800bfca:	4899      	ldr	r0, [pc, #612]	; (800c230 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800bfcc:	f7fe fe96 	bl	800acfc <DbgTraceGetFileName>
 800bfd0:	4601      	mov	r1, r0
 800bfd2:	f240 23ce 	movw	r3, #718	; 0x2ce
 800bfd6:	4a97      	ldr	r2, [pc, #604]	; (800c234 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800bfd8:	4897      	ldr	r0, [pc, #604]	; (800c238 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800bfda:	f001 fd7f 	bl	800dadc <iprintf>
 800bfde:	7dfb      	ldrb	r3, [r7, #23]
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	4897      	ldr	r0, [pc, #604]	; (800c240 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800bfe4:	f001 fd7a 	bl	800dadc <iprintf>
 800bfe8:	e00c      	b.n	800c004 <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800bfea:	4891      	ldr	r0, [pc, #580]	; (800c230 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800bfec:	f7fe fe86 	bl	800acfc <DbgTraceGetFileName>
 800bff0:	4601      	mov	r1, r0
 800bff2:	f240 23d2 	movw	r3, #722	; 0x2d2
 800bff6:	4a8f      	ldr	r2, [pc, #572]	; (800c234 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800bff8:	488f      	ldr	r0, [pc, #572]	; (800c238 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800bffa:	f001 fd6f 	bl	800dadc <iprintf>
 800bffe:	4891      	ldr	r0, [pc, #580]	; (800c244 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800c000:	f001 fdda 	bl	800dbb8 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800c004:	f000 fad8 	bl	800c5b8 <BleGetBdAddress>
 800c008:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800c00a:	693a      	ldr	r2, [r7, #16]
 800c00c:	2106      	movs	r1, #6
 800c00e:	2000      	movs	r0, #0
 800c010:	f7fd fd48 	bl	8009aa4 <aci_hal_write_config_data>
 800c014:	4603      	mov	r3, r0
 800c016:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c018:	7dfb      	ldrb	r3, [r7, #23]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00f      	beq.n	800c03e <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800c01e:	4884      	ldr	r0, [pc, #528]	; (800c230 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c020:	f7fe fe6c 	bl	800acfc <DbgTraceGetFileName>
 800c024:	4601      	mov	r1, r0
 800c026:	f44f 7337 	mov.w	r3, #732	; 0x2dc
 800c02a:	4a82      	ldr	r2, [pc, #520]	; (800c234 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c02c:	4882      	ldr	r0, [pc, #520]	; (800c238 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c02e:	f001 fd55 	bl	800dadc <iprintf>
 800c032:	7dfb      	ldrb	r3, [r7, #23]
 800c034:	4619      	mov	r1, r3
 800c036:	4884      	ldr	r0, [pc, #528]	; (800c248 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800c038:	f001 fd50 	bl	800dadc <iprintf>
 800c03c:	e035      	b.n	800c0aa <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800c03e:	487c      	ldr	r0, [pc, #496]	; (800c230 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c040:	f7fe fe5c 	bl	800acfc <DbgTraceGetFileName>
 800c044:	4601      	mov	r1, r0
 800c046:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 800c04a:	4a7a      	ldr	r2, [pc, #488]	; (800c234 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c04c:	487a      	ldr	r0, [pc, #488]	; (800c238 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c04e:	f001 fd45 	bl	800dadc <iprintf>
 800c052:	487e      	ldr	r0, [pc, #504]	; (800c24c <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800c054:	f001 fdb0 	bl	800dbb8 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800c058:	4875      	ldr	r0, [pc, #468]	; (800c230 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c05a:	f7fe fe4f 	bl	800acfc <DbgTraceGetFileName>
 800c05e:	4601      	mov	r1, r0
 800c060:	f240 23e1 	movw	r3, #737	; 0x2e1
 800c064:	4a73      	ldr	r2, [pc, #460]	; (800c234 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c066:	4874      	ldr	r0, [pc, #464]	; (800c238 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c068:	f001 fd38 	bl	800dadc <iprintf>
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	3305      	adds	r3, #5
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	4618      	mov	r0, r3
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	3304      	adds	r3, #4
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	461c      	mov	r4, r3
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	3303      	adds	r3, #3
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	461d      	mov	r5, r3
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	3302      	adds	r3, #2
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	461a      	mov	r2, r3
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	3301      	adds	r3, #1
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	4619      	mov	r1, r3
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	9302      	str	r3, [sp, #8]
 800c09a:	9101      	str	r1, [sp, #4]
 800c09c:	9200      	str	r2, [sp, #0]
 800c09e:	462b      	mov	r3, r5
 800c0a0:	4622      	mov	r2, r4
 800c0a2:	4601      	mov	r1, r0
 800c0a4:	486a      	ldr	r0, [pc, #424]	; (800c250 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800c0a6:	f001 fd19 	bl	800dadc <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800c0aa:	4a6a      	ldr	r2, [pc, #424]	; (800c254 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800c0ac:	2110      	movs	r1, #16
 800c0ae:	2018      	movs	r0, #24
 800c0b0:	f7fd fcf8 	bl	8009aa4 <aci_hal_write_config_data>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c0b8:	7dfb      	ldrb	r3, [r7, #23]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d00f      	beq.n	800c0de <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800c0be:	485c      	ldr	r0, [pc, #368]	; (800c230 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c0c0:	f7fe fe1c 	bl	800acfc <DbgTraceGetFileName>
 800c0c4:	4601      	mov	r1, r0
 800c0c6:	f240 332b 	movw	r3, #811	; 0x32b
 800c0ca:	4a5a      	ldr	r2, [pc, #360]	; (800c234 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c0cc:	485a      	ldr	r0, [pc, #360]	; (800c238 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c0ce:	f001 fd05 	bl	800dadc <iprintf>
 800c0d2:	7dfb      	ldrb	r3, [r7, #23]
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	4860      	ldr	r0, [pc, #384]	; (800c258 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800c0d8:	f001 fd00 	bl	800dadc <iprintf>
 800c0dc:	e00c      	b.n	800c0f8 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800c0de:	4854      	ldr	r0, [pc, #336]	; (800c230 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c0e0:	f7fe fe0c 	bl	800acfc <DbgTraceGetFileName>
 800c0e4:	4601      	mov	r1, r0
 800c0e6:	f240 332f 	movw	r3, #815	; 0x32f
 800c0ea:	4a52      	ldr	r2, [pc, #328]	; (800c234 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c0ec:	4852      	ldr	r0, [pc, #328]	; (800c238 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c0ee:	f001 fcf5 	bl	800dadc <iprintf>
 800c0f2:	485a      	ldr	r0, [pc, #360]	; (800c25c <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800c0f4:	f001 fd60 	bl	800dbb8 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800c0f8:	4a59      	ldr	r2, [pc, #356]	; (800c260 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800c0fa:	2110      	movs	r1, #16
 800c0fc:	2008      	movs	r0, #8
 800c0fe:	f7fd fcd1 	bl	8009aa4 <aci_hal_write_config_data>
 800c102:	4603      	mov	r3, r0
 800c104:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c106:	7dfb      	ldrb	r3, [r7, #23]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d00f      	beq.n	800c12c <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800c10c:	4848      	ldr	r0, [pc, #288]	; (800c230 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c10e:	f7fe fdf5 	bl	800acfc <DbgTraceGetFileName>
 800c112:	4601      	mov	r1, r0
 800c114:	f44f 734e 	mov.w	r3, #824	; 0x338
 800c118:	4a46      	ldr	r2, [pc, #280]	; (800c234 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c11a:	4847      	ldr	r0, [pc, #284]	; (800c238 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c11c:	f001 fcde 	bl	800dadc <iprintf>
 800c120:	7dfb      	ldrb	r3, [r7, #23]
 800c122:	4619      	mov	r1, r3
 800c124:	484f      	ldr	r0, [pc, #316]	; (800c264 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800c126:	f001 fcd9 	bl	800dadc <iprintf>
 800c12a:	e00c      	b.n	800c146 <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800c12c:	4840      	ldr	r0, [pc, #256]	; (800c230 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c12e:	f7fe fde5 	bl	800acfc <DbgTraceGetFileName>
 800c132:	4601      	mov	r1, r0
 800c134:	f44f 734f 	mov.w	r3, #828	; 0x33c
 800c138:	4a3e      	ldr	r2, [pc, #248]	; (800c234 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c13a:	483f      	ldr	r0, [pc, #252]	; (800c238 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c13c:	f001 fcce 	bl	800dadc <iprintf>
 800c140:	4849      	ldr	r0, [pc, #292]	; (800c268 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800c142:	f001 fd39 	bl	800dbb8 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800c146:	2118      	movs	r1, #24
 800c148:	2001      	movs	r0, #1
 800c14a:	f7fd fd30 	bl	8009bae <aci_hal_set_tx_power_level>
 800c14e:	4603      	mov	r3, r0
 800c150:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c152:	7dfb      	ldrb	r3, [r7, #23]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d00f      	beq.n	800c178 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800c158:	4835      	ldr	r0, [pc, #212]	; (800c230 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c15a:	f7fe fdcf 	bl	800acfc <DbgTraceGetFileName>
 800c15e:	4601      	mov	r1, r0
 800c160:	f240 3345 	movw	r3, #837	; 0x345
 800c164:	4a33      	ldr	r2, [pc, #204]	; (800c234 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c166:	4834      	ldr	r0, [pc, #208]	; (800c238 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c168:	f001 fcb8 	bl	800dadc <iprintf>
 800c16c:	7dfb      	ldrb	r3, [r7, #23]
 800c16e:	4619      	mov	r1, r3
 800c170:	483e      	ldr	r0, [pc, #248]	; (800c26c <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800c172:	f001 fcb3 	bl	800dadc <iprintf>
 800c176:	e00c      	b.n	800c192 <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800c178:	482d      	ldr	r0, [pc, #180]	; (800c230 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c17a:	f7fe fdbf 	bl	800acfc <DbgTraceGetFileName>
 800c17e:	4601      	mov	r1, r0
 800c180:	f240 3349 	movw	r3, #841	; 0x349
 800c184:	4a2b      	ldr	r2, [pc, #172]	; (800c234 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c186:	482c      	ldr	r0, [pc, #176]	; (800c238 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c188:	f001 fca8 	bl	800dadc <iprintf>
 800c18c:	4838      	ldr	r0, [pc, #224]	; (800c270 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800c18e:	f001 fd13 	bl	800dbb8 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800c192:	f7fd f9db 	bl	800954c <aci_gatt_init>
 800c196:	4603      	mov	r3, r0
 800c198:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c19a:	7dfb      	ldrb	r3, [r7, #23]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d00f      	beq.n	800c1c0 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800c1a0:	4823      	ldr	r0, [pc, #140]	; (800c230 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c1a2:	f7fe fdab 	bl	800acfc <DbgTraceGetFileName>
 800c1a6:	4601      	mov	r1, r0
 800c1a8:	f240 3352 	movw	r3, #850	; 0x352
 800c1ac:	4a21      	ldr	r2, [pc, #132]	; (800c234 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c1ae:	4822      	ldr	r0, [pc, #136]	; (800c238 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c1b0:	f001 fc94 	bl	800dadc <iprintf>
 800c1b4:	7dfb      	ldrb	r3, [r7, #23]
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	482e      	ldr	r0, [pc, #184]	; (800c274 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800c1ba:	f001 fc8f 	bl	800dadc <iprintf>
 800c1be:	e00c      	b.n	800c1da <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800c1c0:	481b      	ldr	r0, [pc, #108]	; (800c230 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c1c2:	f7fe fd9b 	bl	800acfc <DbgTraceGetFileName>
 800c1c6:	4601      	mov	r1, r0
 800c1c8:	f240 3356 	movw	r3, #854	; 0x356
 800c1cc:	4a19      	ldr	r2, [pc, #100]	; (800c234 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c1ce:	481a      	ldr	r0, [pc, #104]	; (800c238 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c1d0:	f001 fc84 	bl	800dadc <iprintf>
 800c1d4:	4828      	ldr	r0, [pc, #160]	; (800c278 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800c1d6:	f001 fcef 	bl	800dbb8 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800c1de:	7bfb      	ldrb	r3, [r7, #15]
 800c1e0:	f043 0301 	orr.w	r3, r3, #1
 800c1e4:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800c1e6:	7bfb      	ldrb	r3, [r7, #15]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d069      	beq.n	800c2c0 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800c1ec:	4b23      	ldr	r3, [pc, #140]	; (800c27c <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800c1ee:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800c1f0:	1dba      	adds	r2, r7, #6
 800c1f2:	7bf8      	ldrb	r0, [r7, #15]
 800c1f4:	1cbb      	adds	r3, r7, #2
 800c1f6:	9301      	str	r3, [sp, #4]
 800c1f8:	1d3b      	adds	r3, r7, #4
 800c1fa:	9300      	str	r3, [sp, #0]
 800c1fc:	4613      	mov	r3, r2
 800c1fe:	2209      	movs	r2, #9
 800c200:	2100      	movs	r1, #0
 800c202:	f7fc fff9 	bl	80091f8 <aci_gap_init>
 800c206:	4603      	mov	r3, r0
 800c208:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800c20a:	7dfb      	ldrb	r3, [r7, #23]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d039      	beq.n	800c284 <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800c210:	4807      	ldr	r0, [pc, #28]	; (800c230 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c212:	f7fe fd73 	bl	800acfc <DbgTraceGetFileName>
 800c216:	4601      	mov	r1, r0
 800c218:	f240 3376 	movw	r3, #886	; 0x376
 800c21c:	4a05      	ldr	r2, [pc, #20]	; (800c234 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c21e:	4806      	ldr	r0, [pc, #24]	; (800c238 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c220:	f001 fc5c 	bl	800dadc <iprintf>
 800c224:	7dfb      	ldrb	r3, [r7, #23]
 800c226:	4619      	mov	r1, r3
 800c228:	4815      	ldr	r0, [pc, #84]	; (800c280 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800c22a:	f001 fc57 	bl	800dadc <iprintf>
 800c22e:	e036      	b.n	800c29e <Ble_Hci_Gap_Gatt_Init+0x30a>
 800c230:	0800eda8 	.word	0x0800eda8
 800c234:	08010114 	.word	0x08010114
 800c238:	0800edc4 	.word	0x0800edc4
 800c23c:	0800f2ec 	.word	0x0800f2ec
 800c240:	0800f318 	.word	0x0800f318
 800c244:	0800f348 	.word	0x0800f348
 800c248:	0800f368 	.word	0x0800f368
 800c24c:	0800f3c4 	.word	0x0800f3c4
 800c250:	0800f410 	.word	0x0800f410
 800c254:	080100cc 	.word	0x080100cc
 800c258:	0800f44c 	.word	0x0800f44c
 800c25c:	0800f4a4 	.word	0x0800f4a4
 800c260:	080100dc 	.word	0x080100dc
 800c264:	0800f4ec 	.word	0x0800f4ec
 800c268:	0800f544 	.word	0x0800f544
 800c26c:	0800f58c 	.word	0x0800f58c
 800c270:	0800f5cc 	.word	0x0800f5cc
 800c274:	0800f5fc 	.word	0x0800f5fc
 800c278:	0800f630 	.word	0x0800f630
 800c27c:	0800f654 	.word	0x0800f654
 800c280:	0800f660 	.word	0x0800f660
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800c284:	487e      	ldr	r0, [pc, #504]	; (800c480 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c286:	f7fe fd39 	bl	800acfc <DbgTraceGetFileName>
 800c28a:	4601      	mov	r1, r0
 800c28c:	f240 337a 	movw	r3, #890	; 0x37a
 800c290:	4a7c      	ldr	r2, [pc, #496]	; (800c484 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c292:	487d      	ldr	r0, [pc, #500]	; (800c488 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c294:	f001 fc22 	bl	800dadc <iprintf>
 800c298:	487c      	ldr	r0, [pc, #496]	; (800c48c <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 800c29a:	f001 fc8d 	bl	800dbb8 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800c29e:	88fc      	ldrh	r4, [r7, #6]
 800c2a0:	88bd      	ldrh	r5, [r7, #4]
 800c2a2:	68b8      	ldr	r0, [r7, #8]
 800c2a4:	f7f3 ff6c 	bl	8000180 <strlen>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	b2da      	uxtb	r2, r3
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	9300      	str	r3, [sp, #0]
 800c2b0:	4613      	mov	r3, r2
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	4629      	mov	r1, r5
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	f7fd fb4b 	bl	8009952 <aci_gatt_update_char_value>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800c2c0:	88f8      	ldrh	r0, [r7, #6]
 800c2c2:	8879      	ldrh	r1, [r7, #2]
 800c2c4:	463b      	mov	r3, r7
 800c2c6:	9300      	str	r3, [sp, #0]
 800c2c8:	2302      	movs	r3, #2
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	f7fd fb41 	bl	8009952 <aci_gatt_update_char_value>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800c2d4:	2202      	movs	r2, #2
 800c2d6:	2102      	movs	r1, #2
 800c2d8:	2000      	movs	r0, #0
 800c2da:	f7fd fd47 	bl	8009d6c <hci_le_set_default_phy>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c2e2:	7dfb      	ldrb	r3, [r7, #23]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d00f      	beq.n	800c308 <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800c2e8:	4865      	ldr	r0, [pc, #404]	; (800c480 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c2ea:	f7fe fd07 	bl	800acfc <DbgTraceGetFileName>
 800c2ee:	4601      	mov	r1, r0
 800c2f0:	f44f 7367 	mov.w	r3, #924	; 0x39c
 800c2f4:	4a63      	ldr	r2, [pc, #396]	; (800c484 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c2f6:	4864      	ldr	r0, [pc, #400]	; (800c488 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c2f8:	f001 fbf0 	bl	800dadc <iprintf>
 800c2fc:	7dfb      	ldrb	r3, [r7, #23]
 800c2fe:	4619      	mov	r1, r3
 800c300:	4863      	ldr	r0, [pc, #396]	; (800c490 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 800c302:	f001 fbeb 	bl	800dadc <iprintf>
 800c306:	e00c      	b.n	800c322 <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800c308:	485d      	ldr	r0, [pc, #372]	; (800c480 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c30a:	f7fe fcf7 	bl	800acfc <DbgTraceGetFileName>
 800c30e:	4601      	mov	r1, r0
 800c310:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 800c314:	4a5b      	ldr	r2, [pc, #364]	; (800c484 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c316:	485c      	ldr	r0, [pc, #368]	; (800c488 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c318:	f001 fbe0 	bl	800dadc <iprintf>
 800c31c:	485d      	ldr	r0, [pc, #372]	; (800c494 <Ble_Hci_Gap_Gatt_Init+0x500>)
 800c31e:	f001 fc4b 	bl	800dbb8 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800c322:	4b5d      	ldr	r3, [pc, #372]	; (800c498 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c324:	2201      	movs	r2, #1
 800c326:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800c328:	4b5b      	ldr	r3, [pc, #364]	; (800c498 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	4618      	mov	r0, r3
 800c32e:	f7fc fde4 	bl	8008efa <aci_gap_set_io_capability>
 800c332:	4603      	mov	r3, r0
 800c334:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c336:	7dfb      	ldrb	r3, [r7, #23]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d00f      	beq.n	800c35c <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800c33c:	4850      	ldr	r0, [pc, #320]	; (800c480 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c33e:	f7fe fcdd 	bl	800acfc <DbgTraceGetFileName>
 800c342:	4601      	mov	r1, r0
 800c344:	f240 33aa 	movw	r3, #938	; 0x3aa
 800c348:	4a4e      	ldr	r2, [pc, #312]	; (800c484 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c34a:	484f      	ldr	r0, [pc, #316]	; (800c488 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c34c:	f001 fbc6 	bl	800dadc <iprintf>
 800c350:	7dfb      	ldrb	r3, [r7, #23]
 800c352:	4619      	mov	r1, r3
 800c354:	4851      	ldr	r0, [pc, #324]	; (800c49c <Ble_Hci_Gap_Gatt_Init+0x508>)
 800c356:	f001 fbc1 	bl	800dadc <iprintf>
 800c35a:	e00c      	b.n	800c376 <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800c35c:	4848      	ldr	r0, [pc, #288]	; (800c480 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c35e:	f7fe fccd 	bl	800acfc <DbgTraceGetFileName>
 800c362:	4601      	mov	r1, r0
 800c364:	f240 33ae 	movw	r3, #942	; 0x3ae
 800c368:	4a46      	ldr	r2, [pc, #280]	; (800c484 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c36a:	4847      	ldr	r0, [pc, #284]	; (800c488 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c36c:	f001 fbb6 	bl	800dadc <iprintf>
 800c370:	484b      	ldr	r0, [pc, #300]	; (800c4a0 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 800c372:	f001 fc21 	bl	800dbb8 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800c376:	4b48      	ldr	r3, [pc, #288]	; (800c498 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c378:	2201      	movs	r2, #1
 800c37a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800c37c:	4b46      	ldr	r3, [pc, #280]	; (800c498 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c37e:	2208      	movs	r2, #8
 800c380:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800c382:	4b45      	ldr	r3, [pc, #276]	; (800c498 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c384:	2210      	movs	r2, #16
 800c386:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800c388:	4b43      	ldr	r3, [pc, #268]	; (800c498 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c38a:	2200      	movs	r2, #0
 800c38c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800c38e:	4b42      	ldr	r3, [pc, #264]	; (800c498 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c390:	4a44      	ldr	r2, [pc, #272]	; (800c4a4 <Ble_Hci_Gap_Gatt_Init+0x510>)
 800c392:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800c394:	4b40      	ldr	r3, [pc, #256]	; (800c498 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c396:	2200      	movs	r2, #0
 800c398:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800c39a:	4b3f      	ldr	r3, [pc, #252]	; (800c498 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c39c:	789c      	ldrb	r4, [r3, #2]
 800c39e:	4b3e      	ldr	r3, [pc, #248]	; (800c498 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c3a0:	785d      	ldrb	r5, [r3, #1]
 800c3a2:	4b3d      	ldr	r3, [pc, #244]	; (800c498 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c3a4:	791b      	ldrb	r3, [r3, #4]
 800c3a6:	4a3c      	ldr	r2, [pc, #240]	; (800c498 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c3a8:	7952      	ldrb	r2, [r2, #5]
 800c3aa:	493b      	ldr	r1, [pc, #236]	; (800c498 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c3ac:	78c9      	ldrb	r1, [r1, #3]
 800c3ae:	483a      	ldr	r0, [pc, #232]	; (800c498 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c3b0:	6880      	ldr	r0, [r0, #8]
 800c3b2:	2600      	movs	r6, #0
 800c3b4:	9604      	str	r6, [sp, #16]
 800c3b6:	9003      	str	r0, [sp, #12]
 800c3b8:	9102      	str	r1, [sp, #8]
 800c3ba:	9201      	str	r2, [sp, #4]
 800c3bc:	9300      	str	r3, [sp, #0]
 800c3be:	2300      	movs	r3, #0
 800c3c0:	2201      	movs	r2, #1
 800c3c2:	4629      	mov	r1, r5
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	f7fc fdec 	bl	8008fa2 <aci_gap_set_authentication_requirement>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800c3ce:	7dfb      	ldrb	r3, [r7, #23]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d00f      	beq.n	800c3f4 <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800c3d4:	482a      	ldr	r0, [pc, #168]	; (800c480 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c3d6:	f7fe fc91 	bl	800acfc <DbgTraceGetFileName>
 800c3da:	4601      	mov	r1, r0
 800c3dc:	f240 33c9 	movw	r3, #969	; 0x3c9
 800c3e0:	4a28      	ldr	r2, [pc, #160]	; (800c484 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c3e2:	4829      	ldr	r0, [pc, #164]	; (800c488 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c3e4:	f001 fb7a 	bl	800dadc <iprintf>
 800c3e8:	7dfb      	ldrb	r3, [r7, #23]
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	482e      	ldr	r0, [pc, #184]	; (800c4a8 <Ble_Hci_Gap_Gatt_Init+0x514>)
 800c3ee:	f001 fb75 	bl	800dadc <iprintf>
 800c3f2:	e00c      	b.n	800c40e <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800c3f4:	4822      	ldr	r0, [pc, #136]	; (800c480 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c3f6:	f7fe fc81 	bl	800acfc <DbgTraceGetFileName>
 800c3fa:	4601      	mov	r1, r0
 800c3fc:	f240 33cd 	movw	r3, #973	; 0x3cd
 800c400:	4a20      	ldr	r2, [pc, #128]	; (800c484 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c402:	4821      	ldr	r0, [pc, #132]	; (800c488 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c404:	f001 fb6a 	bl	800dadc <iprintf>
 800c408:	4828      	ldr	r0, [pc, #160]	; (800c4ac <Ble_Hci_Gap_Gatt_Init+0x518>)
 800c40a:	f001 fbd5 	bl	800dbb8 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800c40e:	4b22      	ldr	r3, [pc, #136]	; (800c498 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c410:	789b      	ldrb	r3, [r3, #2]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d023      	beq.n	800c45e <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 800c416:	f7fd f80e 	bl	8009436 <aci_gap_configure_filter_accept_list>
 800c41a:	4603      	mov	r3, r0
 800c41c:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800c41e:	7dfb      	ldrb	r3, [r7, #23]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d00f      	beq.n	800c444 <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800c424:	4816      	ldr	r0, [pc, #88]	; (800c480 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c426:	f7fe fc69 	bl	800acfc <DbgTraceGetFileName>
 800c42a:	4601      	mov	r1, r0
 800c42c:	f44f 7376 	mov.w	r3, #984	; 0x3d8
 800c430:	4a14      	ldr	r2, [pc, #80]	; (800c484 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c432:	4815      	ldr	r0, [pc, #84]	; (800c488 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c434:	f001 fb52 	bl	800dadc <iprintf>
 800c438:	7dfb      	ldrb	r3, [r7, #23]
 800c43a:	4619      	mov	r1, r3
 800c43c:	481c      	ldr	r0, [pc, #112]	; (800c4b0 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 800c43e:	f001 fb4d 	bl	800dadc <iprintf>
 800c442:	e00c      	b.n	800c45e <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800c444:	480e      	ldr	r0, [pc, #56]	; (800c480 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c446:	f7fe fc59 	bl	800acfc <DbgTraceGetFileName>
 800c44a:	4601      	mov	r1, r0
 800c44c:	f44f 7377 	mov.w	r3, #988	; 0x3dc
 800c450:	4a0c      	ldr	r2, [pc, #48]	; (800c484 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c452:	480d      	ldr	r0, [pc, #52]	; (800c488 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c454:	f001 fb42 	bl	800dadc <iprintf>
 800c458:	4816      	ldr	r0, [pc, #88]	; (800c4b4 <Ble_Hci_Gap_Gatt_Init+0x520>)
 800c45a:	f001 fbad 	bl	800dbb8 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800c45e:	4808      	ldr	r0, [pc, #32]	; (800c480 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c460:	f7fe fc4c 	bl	800acfc <DbgTraceGetFileName>
 800c464:	4601      	mov	r1, r0
 800c466:	f240 33df 	movw	r3, #991	; 0x3df
 800c46a:	4a06      	ldr	r2, [pc, #24]	; (800c484 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c46c:	4806      	ldr	r0, [pc, #24]	; (800c488 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c46e:	f001 fb35 	bl	800dadc <iprintf>
 800c472:	4811      	ldr	r0, [pc, #68]	; (800c4b8 <Ble_Hci_Gap_Gatt_Init+0x524>)
 800c474:	f001 fb32 	bl	800dadc <iprintf>
}
 800c478:	bf00      	nop
 800c47a:	371c      	adds	r7, #28
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c480:	0800eda8 	.word	0x0800eda8
 800c484:	08010114 	.word	0x08010114
 800c488:	0800edc4 	.word	0x0800edc4
 800c48c:	0800f690 	.word	0x0800f690
 800c490:	0800f6b0 	.word	0x0800f6b0
 800c494:	0800f6ec 	.word	0x0800f6ec
 800c498:	2000170c 	.word	0x2000170c
 800c49c:	0800f718 	.word	0x0800f718
 800c4a0:	0800f758 	.word	0x0800f758
 800c4a4:	0001b207 	.word	0x0001b207
 800c4a8:	0800f788 	.word	0x0800f788
 800c4ac:	0800f7d4 	.word	0x0800f7d4
 800c4b0:	0800f810 	.word	0x0800f810
 800c4b4:	0800f850 	.word	0x0800f850
 800c4b8:	0800f880 	.word	0x0800f880

0800c4bc <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b08c      	sub	sp, #48	; 0x30
 800c4c0:	af08      	add	r7, sp, #32
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c4c6:	2392      	movs	r3, #146	; 0x92
 800c4c8:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800c4ca:	4a32      	ldr	r2, [pc, #200]	; (800c594 <Adv_Request+0xd8>)
 800c4cc:	79fb      	ldrb	r3, [r7, #7]
 800c4ce:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	9306      	str	r3, [sp, #24]
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	9305      	str	r3, [sp, #20]
 800c4da:	2300      	movs	r3, #0
 800c4dc:	9304      	str	r3, [sp, #16]
 800c4de:	2300      	movs	r3, #0
 800c4e0:	9303      	str	r3, [sp, #12]
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	9302      	str	r3, [sp, #8]
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	9301      	str	r3, [sp, #4]
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	9300      	str	r3, [sp, #0]
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	22a0      	movs	r2, #160	; 0xa0
 800c4f2:	2180      	movs	r1, #128	; 0x80
 800c4f4:	2000      	movs	r0, #0
 800c4f6:	f7fc fc06 	bl	8008d06 <aci_gap_set_discoverable>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800c4fe:	7bfb      	ldrb	r3, [r7, #15]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d00f      	beq.n	800c524 <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800c504:	4824      	ldr	r0, [pc, #144]	; (800c598 <Adv_Request+0xdc>)
 800c506:	f7fe fbf9 	bl	800acfc <DbgTraceGetFileName>
 800c50a:	4601      	mov	r1, r0
 800c50c:	f240 33f5 	movw	r3, #1013	; 0x3f5
 800c510:	4a22      	ldr	r2, [pc, #136]	; (800c59c <Adv_Request+0xe0>)
 800c512:	4823      	ldr	r0, [pc, #140]	; (800c5a0 <Adv_Request+0xe4>)
 800c514:	f001 fae2 	bl	800dadc <iprintf>
 800c518:	7bfb      	ldrb	r3, [r7, #15]
 800c51a:	4619      	mov	r1, r3
 800c51c:	4821      	ldr	r0, [pc, #132]	; (800c5a4 <Adv_Request+0xe8>)
 800c51e:	f001 fadd 	bl	800dadc <iprintf>
 800c522:	e00c      	b.n	800c53e <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800c524:	481c      	ldr	r0, [pc, #112]	; (800c598 <Adv_Request+0xdc>)
 800c526:	f7fe fbe9 	bl	800acfc <DbgTraceGetFileName>
 800c52a:	4601      	mov	r1, r0
 800c52c:	f240 33f9 	movw	r3, #1017	; 0x3f9
 800c530:	4a1a      	ldr	r2, [pc, #104]	; (800c59c <Adv_Request+0xe0>)
 800c532:	481b      	ldr	r0, [pc, #108]	; (800c5a0 <Adv_Request+0xe4>)
 800c534:	f001 fad2 	bl	800dadc <iprintf>
 800c538:	481b      	ldr	r0, [pc, #108]	; (800c5a8 <Adv_Request+0xec>)
 800c53a:	f001 fb3d 	bl	800dbb8 <puts>
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800c53e:	491b      	ldr	r1, [pc, #108]	; (800c5ac <Adv_Request+0xf0>)
 800c540:	2019      	movs	r0, #25
 800c542:	f7fc ff06 	bl	8009352 <aci_gap_update_adv_data>
 800c546:	4603      	mov	r3, r0
 800c548:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800c54a:	7bfb      	ldrb	r3, [r7, #15]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d00f      	beq.n	800c570 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800c550:	4811      	ldr	r0, [pc, #68]	; (800c598 <Adv_Request+0xdc>)
 800c552:	f7fe fbd3 	bl	800acfc <DbgTraceGetFileName>
 800c556:	4601      	mov	r1, r0
 800c558:	f240 4304 	movw	r3, #1028	; 0x404
 800c55c:	4a0f      	ldr	r2, [pc, #60]	; (800c59c <Adv_Request+0xe0>)
 800c55e:	4810      	ldr	r0, [pc, #64]	; (800c5a0 <Adv_Request+0xe4>)
 800c560:	f001 fabc 	bl	800dadc <iprintf>
 800c564:	7bfb      	ldrb	r3, [r7, #15]
 800c566:	4619      	mov	r1, r3
 800c568:	4811      	ldr	r0, [pc, #68]	; (800c5b0 <Adv_Request+0xf4>)
 800c56a:	f001 fab7 	bl	800dadc <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800c56e:	e00d      	b.n	800c58c <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800c570:	4809      	ldr	r0, [pc, #36]	; (800c598 <Adv_Request+0xdc>)
 800c572:	f7fe fbc3 	bl	800acfc <DbgTraceGetFileName>
 800c576:	4601      	mov	r1, r0
 800c578:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800c57c:	4a07      	ldr	r2, [pc, #28]	; (800c59c <Adv_Request+0xe0>)
 800c57e:	4808      	ldr	r0, [pc, #32]	; (800c5a0 <Adv_Request+0xe4>)
 800c580:	f001 faac 	bl	800dadc <iprintf>
 800c584:	480b      	ldr	r0, [pc, #44]	; (800c5b4 <Adv_Request+0xf8>)
 800c586:	f001 faa9 	bl	800dadc <iprintf>
  return;
 800c58a:	bf00      	nop
}
 800c58c:	3710      	adds	r7, #16
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}
 800c592:	bf00      	nop
 800c594:	2000170c 	.word	0x2000170c
 800c598:	0800eda8 	.word	0x0800eda8
 800c59c:	0801012c 	.word	0x0801012c
 800c5a0:	0800edc4 	.word	0x0800edc4
 800c5a4:	0800f8ac 	.word	0x0800f8ac
 800c5a8:	0800f8e4 	.word	0x0800f8e4
 800c5ac:	20000014 	.word	0x20000014
 800c5b0:	0800f90c 	.word	0x0800f90c
 800c5b4:	0800f940 	.word	0x0800f940

0800c5b8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b086      	sub	sp, #24
 800c5bc:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800c5be:	f7ff f963 	bl	800b888 <LL_FLASH_GetUDN>
 800c5c2:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ca:	d023      	beq.n	800c614 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800c5cc:	f7ff f974 	bl	800b8b8 <LL_FLASH_GetSTCompanyID>
 800c5d0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800c5d2:	f7ff f965 	bl	800b8a0 <LL_FLASH_GetDeviceID>
 800c5d6:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	b2da      	uxtb	r2, r3
 800c5dc:	4b16      	ldr	r3, [pc, #88]	; (800c638 <BleGetBdAddress+0x80>)
 800c5de:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	0a1b      	lsrs	r3, r3, #8
 800c5e4:	b2da      	uxtb	r2, r3
 800c5e6:	4b14      	ldr	r3, [pc, #80]	; (800c638 <BleGetBdAddress+0x80>)
 800c5e8:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	b2da      	uxtb	r2, r3
 800c5ee:	4b12      	ldr	r3, [pc, #72]	; (800c638 <BleGetBdAddress+0x80>)
 800c5f0:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	b2da      	uxtb	r2, r3
 800c5f6:	4b10      	ldr	r3, [pc, #64]	; (800c638 <BleGetBdAddress+0x80>)
 800c5f8:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	0a1b      	lsrs	r3, r3, #8
 800c5fe:	b2da      	uxtb	r2, r3
 800c600:	4b0d      	ldr	r3, [pc, #52]	; (800c638 <BleGetBdAddress+0x80>)
 800c602:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	0c1b      	lsrs	r3, r3, #16
 800c608:	b2da      	uxtb	r2, r3
 800c60a:	4b0b      	ldr	r3, [pc, #44]	; (800c638 <BleGetBdAddress+0x80>)
 800c60c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800c60e:	4b0a      	ldr	r3, [pc, #40]	; (800c638 <BleGetBdAddress+0x80>)
 800c610:	617b      	str	r3, [r7, #20]
 800c612:	e00b      	b.n	800c62c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800c614:	2000      	movs	r0, #0
 800c616:	f7fe fc4f 	bl	800aeb8 <OTP_Read>
 800c61a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d002      	beq.n	800c628 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	617b      	str	r3, [r7, #20]
 800c626:	e001      	b.n	800c62c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800c628:	4b04      	ldr	r3, [pc, #16]	; (800c63c <BleGetBdAddress+0x84>)
 800c62a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800c62c:	697b      	ldr	r3, [r7, #20]
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3718      	adds	r7, #24
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}
 800c636:	bf00      	nop
 800c638:	20001704 	.word	0x20001704
 800c63c:	080100c4 	.word	0x080100c4

0800c640 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800c646:	4b1f      	ldr	r3, [pc, #124]	; (800c6c4 <Adv_Cancel+0x84>)
 800c648:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c64c:	2b05      	cmp	r3, #5
 800c64e:	d035      	beq.n	800c6bc <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c650:	2392      	movs	r3, #146	; 0x92
 800c652:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800c654:	f7fc fb33 	bl	8008cbe <aci_gap_set_non_discoverable>
 800c658:	4603      	mov	r3, r0
 800c65a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c65c:	4b19      	ldr	r3, [pc, #100]	; (800c6c4 <Adv_Cancel+0x84>)
 800c65e:	2200      	movs	r2, #0
 800c660:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800c664:	79fb      	ldrb	r3, [r7, #7]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d00d      	beq.n	800c686 <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800c66a:	4817      	ldr	r0, [pc, #92]	; (800c6c8 <Adv_Cancel+0x88>)
 800c66c:	f7fe fb46 	bl	800acfc <DbgTraceGetFileName>
 800c670:	4601      	mov	r1, r0
 800c672:	f240 4356 	movw	r3, #1110	; 0x456
 800c676:	4a15      	ldr	r2, [pc, #84]	; (800c6cc <Adv_Cancel+0x8c>)
 800c678:	4815      	ldr	r0, [pc, #84]	; (800c6d0 <Adv_Cancel+0x90>)
 800c67a:	f001 fa2f 	bl	800dadc <iprintf>
 800c67e:	4815      	ldr	r0, [pc, #84]	; (800c6d4 <Adv_Cancel+0x94>)
 800c680:	f001 fa2c 	bl	800dadc <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800c684:	e01a      	b.n	800c6bc <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 800c686:	4810      	ldr	r0, [pc, #64]	; (800c6c8 <Adv_Cancel+0x88>)
 800c688:	f7fe fb38 	bl	800acfc <DbgTraceGetFileName>
 800c68c:	4601      	mov	r1, r0
 800c68e:	f240 435a 	movw	r3, #1114	; 0x45a
 800c692:	4a0e      	ldr	r2, [pc, #56]	; (800c6cc <Adv_Cancel+0x8c>)
 800c694:	480e      	ldr	r0, [pc, #56]	; (800c6d0 <Adv_Cancel+0x90>)
 800c696:	f001 fa21 	bl	800dadc <iprintf>
 800c69a:	480f      	ldr	r0, [pc, #60]	; (800c6d8 <Adv_Cancel+0x98>)
 800c69c:	f001 fa1e 	bl	800dadc <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800c6a0:	4809      	ldr	r0, [pc, #36]	; (800c6c8 <Adv_Cancel+0x88>)
 800c6a2:	f7fe fb2b 	bl	800acfc <DbgTraceGetFileName>
 800c6a6:	4601      	mov	r1, r0
 800c6a8:	f240 435b 	movw	r3, #1115	; 0x45b
 800c6ac:	4a07      	ldr	r2, [pc, #28]	; (800c6cc <Adv_Cancel+0x8c>)
 800c6ae:	4808      	ldr	r0, [pc, #32]	; (800c6d0 <Adv_Cancel+0x90>)
 800c6b0:	f001 fa14 	bl	800dadc <iprintf>
 800c6b4:	4809      	ldr	r0, [pc, #36]	; (800c6dc <Adv_Cancel+0x9c>)
 800c6b6:	f001 fa11 	bl	800dadc <iprintf>
  return;
 800c6ba:	bf00      	nop
 800c6bc:	bf00      	nop
}
 800c6be:	3708      	adds	r7, #8
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}
 800c6c4:	2000170c 	.word	0x2000170c
 800c6c8:	0800eda8 	.word	0x0800eda8
 800c6cc:	08010138 	.word	0x08010138
 800c6d0:	0800edc4 	.word	0x0800edc4
 800c6d4:	0800f968 	.word	0x0800f968
 800c6d8:	0800f98c 	.word	0x0800f98c
 800c6dc:	0800f994 	.word	0x0800f994

0800c6e0 <APP_BLE_Key_Button1_Action>:
}
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

/* USER CODE BEGIN FD_SPECIFIC_FUNCTIONS */
void APP_BLE_Key_Button1_Action(void)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	af00      	add	r7, sp, #0
  P2PS_APP_B1_Button_Action();
 800c6e4:	f000 fa06 	bl	800caf4 <P2PS_APP_B1_Button_Action>
}
 800c6e8:	bf00      	nop
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	af00      	add	r7, sp, #0
  P2PS_APP_B2_Button_Action();
 800c6f0:	f000 fa07 	bl	800cb02 <P2PS_APP_B2_Button_Action>
}
 800c6f4:	bf00      	nop
 800c6f6:	bd80      	pop	{r7, pc}

0800c6f8 <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	af00      	add	r7, sp, #0
  P2PS_APP_B3_Button_Action();
 800c6fc:	f000 fa08 	bl	800cb10 <P2PS_APP_B3_Button_Action>
}
 800c700:	bf00      	nop
 800c702:	bd80      	pop	{r7, pc}

0800c704 <APP_BLE_Key_Motor_Stopped_Action>:

void APP_BLE_Key_Motor_Stopped_Action(void)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	af00      	add	r7, sp, #0
  P2PS_APP_Motor_Stopped_Action();
 800c708:	f000 fa0a 	bl	800cb20 <P2PS_APP_Motor_Stopped_Action>
}
 800c70c:	bf00      	nop
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <APP_BLE_Key_Motor_Done_Action>:
{
  P2PS_APP_Motor_Pending_Action();
}

void APP_BLE_Key_Motor_Done_Action(void)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	af00      	add	r7, sp, #0
  P2PS_APP_Motor_Done_Action();
 800c714:	f000 fa12 	bl	800cb3c <P2PS_APP_Motor_Done_Action>
}
 800c718:	bf00      	nop
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b082      	sub	sp, #8
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800c724:	2100      	movs	r1, #0
 800c726:	2002      	movs	r0, #2
 800c728:	f000 fff6 	bl	800d718 <UTIL_SEQ_SetTask>

  return;
 800c72c:	bf00      	nop
}
 800c72e:	3708      	adds	r7, #8
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800c73c:	2001      	movs	r0, #1
 800c73e:	f001 f857 	bl	800d7f0 <UTIL_SEQ_SetEvt>

  return;
 800c742:	bf00      	nop
}
 800c744:	3708      	adds	r7, #8
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}

0800c74a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800c74a:	b580      	push	{r7, lr}
 800c74c:	b082      	sub	sp, #8
 800c74e:	af00      	add	r7, sp, #0
 800c750:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800c752:	2001      	movs	r0, #1
 800c754:	f001 f86c 	bl	800d830 <UTIL_SEQ_WaitEvt>

  return;
 800c758:	bf00      	nop
}
 800c75a:	3708      	adds	r7, #8
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}

0800c760 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b084      	sub	sp, #16
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	3308      	adds	r3, #8
 800c772:	4618      	mov	r0, r3
 800c774:	f7fd fc60 	bl	800a038 <SVCCTL_UserEvtRx>
 800c778:	4603      	mov	r3, r0
 800c77a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800c77c:	7afb      	ldrb	r3, [r7, #11]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d003      	beq.n	800c78a <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	2201      	movs	r2, #1
 800c786:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800c788:	e003      	b.n	800c792 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	2200      	movs	r2, #0
 800c78e:	701a      	strb	r2, [r3, #0]
  return;
 800c790:	bf00      	nop
}
 800c792:	3710      	adds	r7, #16
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}

0800c798 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b084      	sub	sp, #16
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	4603      	mov	r3, r0
 800c7a0:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800c7a2:	79fb      	ldrb	r3, [r7, #7]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d002      	beq.n	800c7ae <BLE_StatusNot+0x16>
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	d006      	beq.n	800c7ba <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800c7ac:	e00b      	b.n	800c7c6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800c7ae:	23ff      	movs	r3, #255	; 0xff
 800c7b0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800c7b2:	68f8      	ldr	r0, [r7, #12]
 800c7b4:	f000 ffdc 	bl	800d770 <UTIL_SEQ_PauseTask>
      break;
 800c7b8:	e005      	b.n	800c7c6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800c7ba:	23ff      	movs	r3, #255	; 0xff
 800c7bc:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800c7be:	68f8      	ldr	r0, [r7, #12]
 800c7c0:	f000 fff6 	bl	800d7b0 <UTIL_SEQ_ResumeTask>
      break;
 800c7c4:	bf00      	nop
  }

  return;
 800c7c6:	bf00      	nop
}
 800c7c8:	3710      	adds	r7, #16
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
	...

0800c7d0 <Custom_STM_App_Notification>:
uint16_t Payload_To_Speed(uint8_t, uint8_t);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b084      	sub	sp, #16
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	2b03      	cmp	r3, #3
 800c7de:	d876      	bhi.n	800c8ce <Custom_STM_App_Notification+0xfe>
 800c7e0:	a201      	add	r2, pc, #4	; (adr r2, 800c7e8 <Custom_STM_App_Notification+0x18>)
 800c7e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7e6:	bf00      	nop
 800c7e8:	0800c8cf 	.word	0x0800c8cf
 800c7ec:	0800c7f9 	.word	0x0800c7f9
 800c7f0:	0800c88f 	.word	0x0800c88f
 800c7f4:	0800c8af 	.word	0x0800c8af
      /* USER CODE END CUSTOM_STM_GOAL_C_READ_EVT */
      break;

    case CUSTOM_STM_GOAL_C_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_GOAL_C_WRITE_NO_RESP_EVT */
        APP_DBG_MSG("\r\n\r** CUSTOM_STM_GOAL_C_WRITE_NO_RESP_EVT \n");
 800c7f8:	4837      	ldr	r0, [pc, #220]	; (800c8d8 <Custom_STM_App_Notification+0x108>)
 800c7fa:	f7fe fa7f 	bl	800acfc <DbgTraceGetFileName>
 800c7fe:	4601      	mov	r1, r0
 800c800:	236d      	movs	r3, #109	; 0x6d
 800c802:	4a36      	ldr	r2, [pc, #216]	; (800c8dc <Custom_STM_App_Notification+0x10c>)
 800c804:	4836      	ldr	r0, [pc, #216]	; (800c8e0 <Custom_STM_App_Notification+0x110>)
 800c806:	f001 f969 	bl	800dadc <iprintf>
 800c80a:	4836      	ldr	r0, [pc, #216]	; (800c8e4 <Custom_STM_App_Notification+0x114>)
 800c80c:	f001 f9d4 	bl	800dbb8 <puts>
        APP_DBG_MSG("\r\n\r** Write Data: 0x%02X %02X \n", pNotification->DataTransfered.pPayload[0], pNotification->DataTransfered.pPayload[1]);
 800c810:	4831      	ldr	r0, [pc, #196]	; (800c8d8 <Custom_STM_App_Notification+0x108>)
 800c812:	f7fe fa73 	bl	800acfc <DbgTraceGetFileName>
 800c816:	4601      	mov	r1, r0
 800c818:	236e      	movs	r3, #110	; 0x6e
 800c81a:	4a30      	ldr	r2, [pc, #192]	; (800c8dc <Custom_STM_App_Notification+0x10c>)
 800c81c:	4830      	ldr	r0, [pc, #192]	; (800c8e0 <Custom_STM_App_Notification+0x110>)
 800c81e:	f001 f95d 	bl	800dadc <iprintf>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	685b      	ldr	r3, [r3, #4]
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	4619      	mov	r1, r3
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	685b      	ldr	r3, [r3, #4]
 800c82e:	3301      	adds	r3, #1
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	461a      	mov	r2, r3
 800c834:	482c      	ldr	r0, [pc, #176]	; (800c8e8 <Custom_STM_App_Notification+0x118>)
 800c836:	f001 f951 	bl	800dadc <iprintf>
        uint16_t goal_speed = Payload_To_Speed(pNotification->DataTransfered.pPayload[0], pNotification->DataTransfered.pPayload[1]);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	685b      	ldr	r3, [r3, #4]
 800c83e:	781a      	ldrb	r2, [r3, #0]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	3301      	adds	r3, #1
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	4619      	mov	r1, r3
 800c84a:	4610      	mov	r0, r2
 800c84c:	f000 f984 	bl	800cb58 <Payload_To_Speed>
 800c850:	4603      	mov	r3, r0
 800c852:	81fb      	strh	r3, [r7, #14]

        if(goal_speed == 0)
 800c854:	89fb      	ldrh	r3, [r7, #14]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d108      	bne.n	800c86c <Custom_STM_App_Notification+0x9c>
        {
        	//if pending action is put here the motor stops too fast before notification is sent, so STOPPED notification is sent twice
        	//APP_DBG_MSG("\r\n\r** Before stop \n");
        	Stop_Motor();
 800c85a:	f7f4 ff87 	bl	800176c <Stop_Motor>
        	//APP_DBG_MSG("\r\n\r** After stop \n");

        	Blue_On();
 800c85e:	f7f5 f987 	bl	8001b70 <Blue_On>
        	Green_Off();
 800c862:	f7f5 f979 	bl	8001b58 <Green_Off>
        	Red_Off();
 800c866:	f7f5 f95f 	bl	8001b28 <Red_Off>
        	HAL_GPIO_WritePin(Blue_Led_GPIO_Port, Blue_Led_Pin, GPIO_PIN_RESET);
        	HAL_GPIO_WritePin(Green_Led_GPIO_Port, Green_Led_Pin, GPIO_PIN_RESET);
        	HAL_GPIO_WritePin(Red_Led_GPIO_Port, Red_Led_Pin, GPIO_PIN_SET);
        }*/
      /* USER CODE END CUSTOM_STM_GOAL_C_WRITE_NO_RESP_EVT */
      break;
 800c86a:	e031      	b.n	800c8d0 <Custom_STM_App_Notification+0x100>
        	Blue_Off();
 800c86c:	f7f5 f98c 	bl	8001b88 <Blue_Off>
        	Green_On();
 800c870:	f7f5 f966 	bl	8001b40 <Green_On>
        	Red_Off();
 800c874:	f7f5 f958 	bl	8001b28 <Red_Off>
        	Set_Speed(goal_speed);
 800c878:	89fb      	ldrh	r3, [r7, #14]
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7f5 f870 	bl	8001960 <Set_Speed>
        	Blue_Off();
 800c880:	f7f5 f982 	bl	8001b88 <Blue_Off>
        	Green_Off();
 800c884:	f7f5 f968 	bl	8001b58 <Green_Off>
        	Red_On();
 800c888:	f7f5 f942 	bl	8001b10 <Red_On>
      break;
 800c88c:	e020      	b.n	800c8d0 <Custom_STM_App_Notification+0x100>

    case CUSTOM_STM_STATE_C_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_STATE_C_NOTIFY_ENABLED_EVT */
        APP_DBG_MSG("\r\n\r** CUSTOM_STM_STATE_C_NOTIFY_ENABLED_EVT \n");
 800c88e:	4812      	ldr	r0, [pc, #72]	; (800c8d8 <Custom_STM_App_Notification+0x108>)
 800c890:	f7fe fa34 	bl	800acfc <DbgTraceGetFileName>
 800c894:	4601      	mov	r1, r0
 800c896:	23a4      	movs	r3, #164	; 0xa4
 800c898:	4a10      	ldr	r2, [pc, #64]	; (800c8dc <Custom_STM_App_Notification+0x10c>)
 800c89a:	4811      	ldr	r0, [pc, #68]	; (800c8e0 <Custom_STM_App_Notification+0x110>)
 800c89c:	f001 f91e 	bl	800dadc <iprintf>
 800c8a0:	4812      	ldr	r0, [pc, #72]	; (800c8ec <Custom_STM_App_Notification+0x11c>)
 800c8a2:	f001 f989 	bl	800dbb8 <puts>

        Custom_App_Context.State_c_Notification_Status = 1;
 800c8a6:	4b12      	ldr	r3, [pc, #72]	; (800c8f0 <Custom_STM_App_Notification+0x120>)
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_STATE_C_NOTIFY_ENABLED_EVT */
      break;
 800c8ac:	e010      	b.n	800c8d0 <Custom_STM_App_Notification+0x100>

    case CUSTOM_STM_STATE_C_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_STATE_C_NOTIFY_DISABLED_EVT */
        APP_DBG_MSG("\r\n\r** CUSTOM_STM_STATE_C_NOTIFY_DISABLED_EVT \n");
 800c8ae:	480a      	ldr	r0, [pc, #40]	; (800c8d8 <Custom_STM_App_Notification+0x108>)
 800c8b0:	f7fe fa24 	bl	800acfc <DbgTraceGetFileName>
 800c8b4:	4601      	mov	r1, r0
 800c8b6:	23ac      	movs	r3, #172	; 0xac
 800c8b8:	4a08      	ldr	r2, [pc, #32]	; (800c8dc <Custom_STM_App_Notification+0x10c>)
 800c8ba:	4809      	ldr	r0, [pc, #36]	; (800c8e0 <Custom_STM_App_Notification+0x110>)
 800c8bc:	f001 f90e 	bl	800dadc <iprintf>
 800c8c0:	480c      	ldr	r0, [pc, #48]	; (800c8f4 <Custom_STM_App_Notification+0x124>)
 800c8c2:	f001 f979 	bl	800dbb8 <puts>

        Custom_App_Context.State_c_Notification_Status = 0;
 800c8c6:	4b0a      	ldr	r3, [pc, #40]	; (800c8f0 <Custom_STM_App_Notification+0x120>)
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_STATE_C_NOTIFY_DISABLED_EVT */
      break;
 800c8cc:	e000      	b.n	800c8d0 <Custom_STM_App_Notification+0x100>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800c8ce:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800c8d0:	bf00      	nop
}
 800c8d2:	3710      	adds	r7, #16
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}
 800c8d8:	0800f9b0 	.word	0x0800f9b0
 800c8dc:	08010144 	.word	0x08010144
 800c8e0:	0800f9d0 	.word	0x0800f9d0
 800c8e4:	0800f9e4 	.word	0x0800f9e4
 800c8e8:	0800fa10 	.word	0x0800fa10
 800c8ec:	0800fa30 	.word	0x0800fa30
 800c8f0:	20001794 	.word	0x20001794
 800c8f4:	0800fa60 	.word	0x0800fa60

0800c8f8 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b083      	sub	sp, #12
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	781b      	ldrb	r3, [r3, #0]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d002      	beq.n	800c90e <Custom_APP_Notification+0x16>
 800c908:	2b01      	cmp	r3, #1
 800c90a:	d002      	beq.n	800c912 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800c90c:	e002      	b.n	800c914 <Custom_APP_Notification+0x1c>
      break;
 800c90e:	bf00      	nop
 800c910:	e000      	b.n	800c914 <Custom_APP_Notification+0x1c>
      break;
 800c912:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800c914:	bf00      	nop
}
 800c916:	370c      	adds	r7, #12
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr

0800c920 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	  /*UTIL_SEQ_RegTask(1<< CFG_TASK_B1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Custom_State_c_Send_Notification);
	  UTIL_SEQ_RegTask(1<< CFG_TASK_B2_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Custom_State_c_Send_Notification);
	  UTIL_SEQ_RegTask(1<< CFG_TASK_B3_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Custom_State_c_Send_Notification);*/

	  UTIL_SEQ_RegTask(1<< CFG_TASK_MOTOR_STOPPED_ID, UTIL_SEQ_RFU, Custom_State_c_Send_Notification);
 800c924:	4a0b      	ldr	r2, [pc, #44]	; (800c954 <Custom_APP_Init+0x34>)
 800c926:	2100      	movs	r1, #0
 800c928:	2020      	movs	r0, #32
 800c92a:	f000 fed3 	bl	800d6d4 <UTIL_SEQ_RegTask>
	  UTIL_SEQ_RegTask(1<< CFG_TASK_MOTOR_PENDING_ID, UTIL_SEQ_RFU, Custom_State_c_Send_Notification);
 800c92e:	4a09      	ldr	r2, [pc, #36]	; (800c954 <Custom_APP_Init+0x34>)
 800c930:	2100      	movs	r1, #0
 800c932:	2040      	movs	r0, #64	; 0x40
 800c934:	f000 fece 	bl	800d6d4 <UTIL_SEQ_RegTask>
	  UTIL_SEQ_RegTask(1<< CFG_TASK_MOTOR_DONE_ID, UTIL_SEQ_RFU, Custom_State_c_Send_Notification);
 800c938:	4a06      	ldr	r2, [pc, #24]	; (800c954 <Custom_APP_Init+0x34>)
 800c93a:	2100      	movs	r1, #0
 800c93c:	2080      	movs	r0, #128	; 0x80
 800c93e:	f000 fec9 	bl	800d6d4 <UTIL_SEQ_RegTask>

	  Custom_App_Context.State_c_Notification_Status = 0;
 800c942:	4b05      	ldr	r3, [pc, #20]	; (800c958 <Custom_APP_Init+0x38>)
 800c944:	2200      	movs	r2, #0
 800c946:	701a      	strb	r2, [r3, #0]
	  Custom_App_Context.State_Status = STOPPED;
 800c948:	4b03      	ldr	r3, [pc, #12]	; (800c958 <Custom_APP_Init+0x38>)
 800c94a:	2200      	movs	r2, #0
 800c94c:	705a      	strb	r2, [r3, #1]
  /* USER CODE END CUSTOM_APP_Init */
  return;
 800c94e:	bf00      	nop
}
 800c950:	bd80      	pop	{r7, pc}
 800c952:	bf00      	nop
 800c954:	0800c95d 	.word	0x0800c95d
 800c958:	20001794 	.word	0x20001794

0800c95c <Custom_State_c_Send_Notification>:
  /* USER CODE END State_c_UC_Last*/
  return;
}

void Custom_State_c_Send_Notification(void) /* Property Notification */
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b082      	sub	sp, #8
 800c960:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800c962:	2300      	movs	r3, #0
 800c964:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN State_c_NS_1*/
  if(Custom_App_Context.State_c_Notification_Status)
 800c966:	4b58      	ldr	r3, [pc, #352]	; (800cac8 <Custom_State_c_Send_Notification+0x16c>)
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	f000 8092 	beq.w	800ca94 <Custom_State_c_Send_Notification+0x138>
  {
	  updateflag = 1;
 800c970:	2301      	movs	r3, #1
 800c972:	71fb      	strb	r3, [r7, #7]

	  if(Custom_App_Context.State_Status == STOPPED)
 800c974:	4b54      	ldr	r3, [pc, #336]	; (800cac8 <Custom_State_c_Send_Notification+0x16c>)
 800c976:	785b      	ldrb	r3, [r3, #1]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d120      	bne.n	800c9be <Custom_State_c_Send_Notification+0x62>
	  {
		  NotifyCharData[0] = 0x00; //Big Endian
 800c97c:	4b53      	ldr	r3, [pc, #332]	; (800cacc <Custom_State_c_Send_Notification+0x170>)
 800c97e:	2200      	movs	r2, #0
 800c980:	701a      	strb	r2, [r3, #0]
		  NotifyCharData[1] = 0x00;
 800c982:	4b52      	ldr	r3, [pc, #328]	; (800cacc <Custom_State_c_Send_Notification+0x170>)
 800c984:	2200      	movs	r2, #0
 800c986:	705a      	strb	r2, [r3, #1]
		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT MOTOR STOPPED \n");
 800c988:	4851      	ldr	r0, [pc, #324]	; (800cad0 <Custom_State_c_Send_Notification+0x174>)
 800c98a:	f7fe f9b7 	bl	800acfc <DbgTraceGetFileName>
 800c98e:	4601      	mov	r1, r0
 800c990:	f240 131f 	movw	r3, #287	; 0x11f
 800c994:	4a4f      	ldr	r2, [pc, #316]	; (800cad4 <Custom_State_c_Send_Notification+0x178>)
 800c996:	4850      	ldr	r0, [pc, #320]	; (800cad8 <Custom_State_c_Send_Notification+0x17c>)
 800c998:	f001 f8a0 	bl	800dadc <iprintf>
 800c99c:	484f      	ldr	r0, [pc, #316]	; (800cadc <Custom_State_c_Send_Notification+0x180>)
 800c99e:	f001 f90b 	bl	800dbb8 <puts>
		  APP_DBG_MSG(" \n\r");
 800c9a2:	484b      	ldr	r0, [pc, #300]	; (800cad0 <Custom_State_c_Send_Notification+0x174>)
 800c9a4:	f7fe f9aa 	bl	800acfc <DbgTraceGetFileName>
 800c9a8:	4601      	mov	r1, r0
 800c9aa:	f44f 7390 	mov.w	r3, #288	; 0x120
 800c9ae:	4a49      	ldr	r2, [pc, #292]	; (800cad4 <Custom_State_c_Send_Notification+0x178>)
 800c9b0:	4849      	ldr	r0, [pc, #292]	; (800cad8 <Custom_State_c_Send_Notification+0x17c>)
 800c9b2:	f001 f893 	bl	800dadc <iprintf>
 800c9b6:	484a      	ldr	r0, [pc, #296]	; (800cae0 <Custom_State_c_Send_Notification+0x184>)
 800c9b8:	f001 f890 	bl	800dadc <iprintf>
 800c9bc:	e077      	b.n	800caae <Custom_State_c_Send_Notification+0x152>
	  }
	  else if (Custom_App_Context.State_Status == PENDING)
 800c9be:	4b42      	ldr	r3, [pc, #264]	; (800cac8 <Custom_State_c_Send_Notification+0x16c>)
 800c9c0:	785b      	ldrb	r3, [r3, #1]
 800c9c2:	2b01      	cmp	r3, #1
 800c9c4:	d120      	bne.n	800ca08 <Custom_State_c_Send_Notification+0xac>
	  {
		  NotifyCharData[0] = 0x00;
 800c9c6:	4b41      	ldr	r3, [pc, #260]	; (800cacc <Custom_State_c_Send_Notification+0x170>)
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	701a      	strb	r2, [r3, #0]
		  NotifyCharData[1] = 0x01;
 800c9cc:	4b3f      	ldr	r3, [pc, #252]	; (800cacc <Custom_State_c_Send_Notification+0x170>)
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	705a      	strb	r2, [r3, #1]
		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT MOTOR PENDING \n");
 800c9d2:	483f      	ldr	r0, [pc, #252]	; (800cad0 <Custom_State_c_Send_Notification+0x174>)
 800c9d4:	f7fe f992 	bl	800acfc <DbgTraceGetFileName>
 800c9d8:	4601      	mov	r1, r0
 800c9da:	f44f 7393 	mov.w	r3, #294	; 0x126
 800c9de:	4a3d      	ldr	r2, [pc, #244]	; (800cad4 <Custom_State_c_Send_Notification+0x178>)
 800c9e0:	483d      	ldr	r0, [pc, #244]	; (800cad8 <Custom_State_c_Send_Notification+0x17c>)
 800c9e2:	f001 f87b 	bl	800dadc <iprintf>
 800c9e6:	483f      	ldr	r0, [pc, #252]	; (800cae4 <Custom_State_c_Send_Notification+0x188>)
 800c9e8:	f001 f8e6 	bl	800dbb8 <puts>
		  APP_DBG_MSG(" \n\r");
 800c9ec:	4838      	ldr	r0, [pc, #224]	; (800cad0 <Custom_State_c_Send_Notification+0x174>)
 800c9ee:	f7fe f985 	bl	800acfc <DbgTraceGetFileName>
 800c9f2:	4601      	mov	r1, r0
 800c9f4:	f240 1327 	movw	r3, #295	; 0x127
 800c9f8:	4a36      	ldr	r2, [pc, #216]	; (800cad4 <Custom_State_c_Send_Notification+0x178>)
 800c9fa:	4837      	ldr	r0, [pc, #220]	; (800cad8 <Custom_State_c_Send_Notification+0x17c>)
 800c9fc:	f001 f86e 	bl	800dadc <iprintf>
 800ca00:	4837      	ldr	r0, [pc, #220]	; (800cae0 <Custom_State_c_Send_Notification+0x184>)
 800ca02:	f001 f86b 	bl	800dadc <iprintf>
 800ca06:	e052      	b.n	800caae <Custom_State_c_Send_Notification+0x152>
	  }
	  else if (Custom_App_Context.State_Status == DONE)
 800ca08:	4b2f      	ldr	r3, [pc, #188]	; (800cac8 <Custom_State_c_Send_Notification+0x16c>)
 800ca0a:	785b      	ldrb	r3, [r3, #1]
 800ca0c:	2b02      	cmp	r3, #2
 800ca0e:	d120      	bne.n	800ca52 <Custom_State_c_Send_Notification+0xf6>
	  {
		  NotifyCharData[0] = 0x00;
 800ca10:	4b2e      	ldr	r3, [pc, #184]	; (800cacc <Custom_State_c_Send_Notification+0x170>)
 800ca12:	2200      	movs	r2, #0
 800ca14:	701a      	strb	r2, [r3, #0]
		  NotifyCharData[1] = 0x02;
 800ca16:	4b2d      	ldr	r3, [pc, #180]	; (800cacc <Custom_State_c_Send_Notification+0x170>)
 800ca18:	2202      	movs	r2, #2
 800ca1a:	705a      	strb	r2, [r3, #1]
		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT MOTOR DONE \n");
 800ca1c:	482c      	ldr	r0, [pc, #176]	; (800cad0 <Custom_State_c_Send_Notification+0x174>)
 800ca1e:	f7fe f96d 	bl	800acfc <DbgTraceGetFileName>
 800ca22:	4601      	mov	r1, r0
 800ca24:	f240 132d 	movw	r3, #301	; 0x12d
 800ca28:	4a2a      	ldr	r2, [pc, #168]	; (800cad4 <Custom_State_c_Send_Notification+0x178>)
 800ca2a:	482b      	ldr	r0, [pc, #172]	; (800cad8 <Custom_State_c_Send_Notification+0x17c>)
 800ca2c:	f001 f856 	bl	800dadc <iprintf>
 800ca30:	482d      	ldr	r0, [pc, #180]	; (800cae8 <Custom_State_c_Send_Notification+0x18c>)
 800ca32:	f001 f8c1 	bl	800dbb8 <puts>
		  APP_DBG_MSG(" \n\r");
 800ca36:	4826      	ldr	r0, [pc, #152]	; (800cad0 <Custom_State_c_Send_Notification+0x174>)
 800ca38:	f7fe f960 	bl	800acfc <DbgTraceGetFileName>
 800ca3c:	4601      	mov	r1, r0
 800ca3e:	f44f 7397 	mov.w	r3, #302	; 0x12e
 800ca42:	4a24      	ldr	r2, [pc, #144]	; (800cad4 <Custom_State_c_Send_Notification+0x178>)
 800ca44:	4824      	ldr	r0, [pc, #144]	; (800cad8 <Custom_State_c_Send_Notification+0x17c>)
 800ca46:	f001 f849 	bl	800dadc <iprintf>
 800ca4a:	4825      	ldr	r0, [pc, #148]	; (800cae0 <Custom_State_c_Send_Notification+0x184>)
 800ca4c:	f001 f846 	bl	800dadc <iprintf>
 800ca50:	e02d      	b.n	800caae <Custom_State_c_Send_Notification+0x152>
	  }
	  else
	  {
		  NotifyCharData[0] = 0x00;
 800ca52:	4b1e      	ldr	r3, [pc, #120]	; (800cacc <Custom_State_c_Send_Notification+0x170>)
 800ca54:	2200      	movs	r2, #0
 800ca56:	701a      	strb	r2, [r3, #0]
		  NotifyCharData[1] = 0x03;
 800ca58:	4b1c      	ldr	r3, [pc, #112]	; (800cacc <Custom_State_c_Send_Notification+0x170>)
 800ca5a:	2203      	movs	r2, #3
 800ca5c:	705a      	strb	r2, [r3, #1]
		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT MOTOR WRONG STATE \n");
 800ca5e:	481c      	ldr	r0, [pc, #112]	; (800cad0 <Custom_State_c_Send_Notification+0x174>)
 800ca60:	f7fe f94c 	bl	800acfc <DbgTraceGetFileName>
 800ca64:	4601      	mov	r1, r0
 800ca66:	f44f 739a 	mov.w	r3, #308	; 0x134
 800ca6a:	4a1a      	ldr	r2, [pc, #104]	; (800cad4 <Custom_State_c_Send_Notification+0x178>)
 800ca6c:	481a      	ldr	r0, [pc, #104]	; (800cad8 <Custom_State_c_Send_Notification+0x17c>)
 800ca6e:	f001 f835 	bl	800dadc <iprintf>
 800ca72:	481e      	ldr	r0, [pc, #120]	; (800caec <Custom_State_c_Send_Notification+0x190>)
 800ca74:	f001 f8a0 	bl	800dbb8 <puts>
		  APP_DBG_MSG(" \n\r");
 800ca78:	4815      	ldr	r0, [pc, #84]	; (800cad0 <Custom_State_c_Send_Notification+0x174>)
 800ca7a:	f7fe f93f 	bl	800acfc <DbgTraceGetFileName>
 800ca7e:	4601      	mov	r1, r0
 800ca80:	f240 1335 	movw	r3, #309	; 0x135
 800ca84:	4a13      	ldr	r2, [pc, #76]	; (800cad4 <Custom_State_c_Send_Notification+0x178>)
 800ca86:	4814      	ldr	r0, [pc, #80]	; (800cad8 <Custom_State_c_Send_Notification+0x17c>)
 800ca88:	f001 f828 	bl	800dadc <iprintf>
 800ca8c:	4814      	ldr	r0, [pc, #80]	; (800cae0 <Custom_State_c_Send_Notification+0x184>)
 800ca8e:	f001 f825 	bl	800dadc <iprintf>
 800ca92:	e00c      	b.n	800caae <Custom_State_c_Send_Notification+0x152>
	  }
  }
  else
  {
	  APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 800ca94:	480e      	ldr	r0, [pc, #56]	; (800cad0 <Custom_State_c_Send_Notification+0x174>)
 800ca96:	f7fe f931 	bl	800acfc <DbgTraceGetFileName>
 800ca9a:	4601      	mov	r1, r0
 800ca9c:	f44f 739d 	mov.w	r3, #314	; 0x13a
 800caa0:	4a0c      	ldr	r2, [pc, #48]	; (800cad4 <Custom_State_c_Send_Notification+0x178>)
 800caa2:	480d      	ldr	r0, [pc, #52]	; (800cad8 <Custom_State_c_Send_Notification+0x17c>)
 800caa4:	f001 f81a 	bl	800dadc <iprintf>
 800caa8:	4811      	ldr	r0, [pc, #68]	; (800caf0 <Custom_State_c_Send_Notification+0x194>)
 800caaa:	f001 f885 	bl	800dbb8 <puts>
  }
  /* USER CODE END State_c_NS_1*/

  if (updateflag != 0)
 800caae:	79fb      	ldrb	r3, [r7, #7]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d004      	beq.n	800cabe <Custom_State_c_Send_Notification+0x162>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_STATE_C, (uint8_t *)NotifyCharData);
 800cab4:	4905      	ldr	r1, [pc, #20]	; (800cacc <Custom_State_c_Send_Notification+0x170>)
 800cab6:	2001      	movs	r0, #1
 800cab8:	f000 fa00 	bl	800cebc <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN State_c_NS_Last*/

  /* USER CODE END State_c_NS_Last*/

  return;
 800cabc:	bf00      	nop
 800cabe:	bf00      	nop
}
 800cac0:	3708      	adds	r7, #8
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	20001794 	.word	0x20001794
 800cacc:	20001798 	.word	0x20001798
 800cad0:	0800f9b0 	.word	0x0800f9b0
 800cad4:	08010160 	.word	0x08010160
 800cad8:	0800f9d0 	.word	0x0800f9d0
 800cadc:	0800fa90 	.word	0x0800fa90
 800cae0:	0800fad0 	.word	0x0800fad0
 800cae4:	0800fad4 	.word	0x0800fad4
 800cae8:	0800fb14 	.word	0x0800fb14
 800caec:	0800fb50 	.word	0x0800fb50
 800caf0:	0800fb94 	.word	0x0800fb94

0800caf4 <P2PS_APP_B1_Button_Action>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_APP_B1_Button_Action(void)
{
 800caf4:	b480      	push	{r7}
 800caf6:	af00      	add	r7, sp, #0
	//Custom_App_Context.State_Status = STOPPED;
  //UTIL_SEQ_SetTask(1<<CFG_TASK_B1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);

  return;
 800caf8:	bf00      	nop
}
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr

0800cb02 <P2PS_APP_B2_Button_Action>:

void P2PS_APP_B2_Button_Action(void)
{
 800cb02:	b480      	push	{r7}
 800cb04:	af00      	add	r7, sp, #0
	//Custom_App_Context.State_Status = PENDING;
  //UTIL_SEQ_SetTask(1<<CFG_TASK_B2_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);

  return;
 800cb06:	bf00      	nop
}
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr

0800cb10 <P2PS_APP_B3_Button_Action>:

void P2PS_APP_B3_Button_Action(void)
{
 800cb10:	b480      	push	{r7}
 800cb12:	af00      	add	r7, sp, #0
	//Custom_App_Context.State_Status = DONE;
  //UTIL_SEQ_SetTask(1<<CFG_TASK_B3_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);

  return;
 800cb14:	bf00      	nop
}
 800cb16:	46bd      	mov	sp, r7
 800cb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1c:	4770      	bx	lr
	...

0800cb20 <P2PS_APP_Motor_Stopped_Action>:

void P2PS_APP_Motor_Stopped_Action(void)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	af00      	add	r7, sp, #0
	Custom_App_Context.State_Status = STOPPED;
 800cb24:	4b04      	ldr	r3, [pc, #16]	; (800cb38 <P2PS_APP_Motor_Stopped_Action+0x18>)
 800cb26:	2200      	movs	r2, #0
 800cb28:	705a      	strb	r2, [r3, #1]
    UTIL_SEQ_SetTask(1<<CFG_TASK_MOTOR_STOPPED_ID, CFG_SCH_PRIO_0);
 800cb2a:	2100      	movs	r1, #0
 800cb2c:	2020      	movs	r0, #32
 800cb2e:	f000 fdf3 	bl	800d718 <UTIL_SEQ_SetTask>

    return;
 800cb32:	bf00      	nop
}
 800cb34:	bd80      	pop	{r7, pc}
 800cb36:	bf00      	nop
 800cb38:	20001794 	.word	0x20001794

0800cb3c <P2PS_APP_Motor_Done_Action>:

    return;
}

void P2PS_APP_Motor_Done_Action(void)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	af00      	add	r7, sp, #0
	Custom_App_Context.State_Status = DONE;
 800cb40:	4b04      	ldr	r3, [pc, #16]	; (800cb54 <P2PS_APP_Motor_Done_Action+0x18>)
 800cb42:	2202      	movs	r2, #2
 800cb44:	705a      	strb	r2, [r3, #1]
    UTIL_SEQ_SetTask(1<<CFG_TASK_MOTOR_DONE_ID, CFG_SCH_PRIO_0);
 800cb46:	2100      	movs	r1, #0
 800cb48:	2080      	movs	r0, #128	; 0x80
 800cb4a:	f000 fde5 	bl	800d718 <UTIL_SEQ_SetTask>

    return;
 800cb4e:	bf00      	nop
}
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	20001794 	.word	0x20001794

0800cb58 <Payload_To_Speed>:

uint16_t Payload_To_Speed(uint8_t p0, uint8_t p1)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b085      	sub	sp, #20
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	4603      	mov	r3, r0
 800cb60:	460a      	mov	r2, r1
 800cb62:	71fb      	strb	r3, [r7, #7]
 800cb64:	4613      	mov	r3, r2
 800cb66:	71bb      	strb	r3, [r7, #6]
    uint16_t result = (p0 << 8) + p1;
 800cb68:	79fb      	ldrb	r3, [r7, #7]
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	021b      	lsls	r3, r3, #8
 800cb6e:	b29a      	uxth	r2, r3
 800cb70:	79bb      	ldrb	r3, [r7, #6]
 800cb72:	b29b      	uxth	r3, r3
 800cb74:	4413      	add	r3, r2
 800cb76:	81fb      	strh	r3, [r7, #14]
    return result;
 800cb78:	89fb      	ldrh	r3, [r7, #14]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3714      	adds	r7, #20
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb84:	4770      	bx	lr
	...

0800cb88 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b08a      	sub	sp, #40	; 0x28
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800cb90:	2300      	movs	r3, #0
 800cb92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	3301      	adds	r3, #1
 800cb9a:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800cb9c:	6a3b      	ldr	r3, [r7, #32]
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	2bff      	cmp	r3, #255	; 0xff
 800cba2:	d15e      	bne.n	800cc62 <Custom_STM_Event_Handler+0xda>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800cba4:	6a3b      	ldr	r3, [r7, #32]
 800cba6:	3302      	adds	r3, #2
 800cba8:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 800cbaa:	69fb      	ldr	r3, [r7, #28]
 800cbac:	881b      	ldrh	r3, [r3, #0]
 800cbae:	b29b      	uxth	r3, r3
 800cbb0:	f640 4214 	movw	r2, #3092	; 0xc14
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d04e      	beq.n	800cc56 <Custom_STM_Event_Handler+0xce>
 800cbb8:	f640 4214 	movw	r2, #3092	; 0xc14
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	dc4c      	bgt.n	800cc5a <Custom_STM_Event_Handler+0xd2>
 800cbc0:	f640 4201 	movw	r2, #3073	; 0xc01
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	d003      	beq.n	800cbd0 <Custom_STM_Event_Handler+0x48>
 800cbc8:	f640 4213 	movw	r2, #3091	; 0xc13
 800cbcc:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800cbce:	e047      	b.n	800cc60 <Custom_STM_Event_Handler+0xd8>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800cbd0:	69fb      	ldr	r3, [r7, #28]
 800cbd2:	3302      	adds	r3, #2
 800cbd4:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomState_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800cbd6:	69bb      	ldr	r3, [r7, #24]
 800cbd8:	885b      	ldrh	r3, [r3, #2]
 800cbda:	b29b      	uxth	r3, r3
 800cbdc:	461a      	mov	r2, r3
 800cbde:	4b24      	ldr	r3, [pc, #144]	; (800cc70 <Custom_STM_Event_Handler+0xe8>)
 800cbe0:	889b      	ldrh	r3, [r3, #4]
 800cbe2:	3302      	adds	r3, #2
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d119      	bne.n	800cc1c <Custom_STM_Event_Handler+0x94>
            return_value = SVCCTL_EvtAckFlowEnable;
 800cbe8:	2301      	movs	r3, #1
 800cbea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 800cbee:	69bb      	ldr	r3, [r7, #24]
 800cbf0:	7a1b      	ldrb	r3, [r3, #8]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d002      	beq.n	800cbfc <Custom_STM_Event_Handler+0x74>
 800cbf6:	2b01      	cmp	r3, #1
 800cbf8:	d008      	beq.n	800cc0c <Custom_STM_Event_Handler+0x84>
              break;
 800cbfa:	e02b      	b.n	800cc54 <Custom_STM_Event_Handler+0xcc>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_STATE_C_NOTIFY_DISABLED_EVT;
 800cbfc:	2303      	movs	r3, #3
 800cbfe:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800cc00:	f107 0308 	add.w	r3, r7, #8
 800cc04:	4618      	mov	r0, r3
 800cc06:	f7ff fde3 	bl	800c7d0 <Custom_STM_App_Notification>
                break;
 800cc0a:	e023      	b.n	800cc54 <Custom_STM_Event_Handler+0xcc>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_STATE_C_NOTIFY_ENABLED_EVT;
 800cc0c:	2302      	movs	r3, #2
 800cc0e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800cc10:	f107 0308 	add.w	r3, r7, #8
 800cc14:	4618      	mov	r0, r3
 800cc16:	f7ff fddb 	bl	800c7d0 <Custom_STM_App_Notification>
                break;
 800cc1a:	e01b      	b.n	800cc54 <Custom_STM_Event_Handler+0xcc>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomGoal_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800cc1c:	69bb      	ldr	r3, [r7, #24]
 800cc1e:	885b      	ldrh	r3, [r3, #2]
 800cc20:	b29b      	uxth	r3, r3
 800cc22:	461a      	mov	r2, r3
 800cc24:	4b12      	ldr	r3, [pc, #72]	; (800cc70 <Custom_STM_Event_Handler+0xe8>)
 800cc26:	885b      	ldrh	r3, [r3, #2]
 800cc28:	3301      	adds	r3, #1
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d117      	bne.n	800cc5e <Custom_STM_Event_Handler+0xd6>
            return_value = SVCCTL_EvtAckFlowEnable;
 800cc2e:	2301      	movs	r3, #1
 800cc30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Notification.Custom_Evt_Opcode = CUSTOM_STM_GOAL_C_WRITE_NO_RESP_EVT;
 800cc34:	2301      	movs	r3, #1
 800cc36:	723b      	strb	r3, [r7, #8]
            Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800cc38:	69bb      	ldr	r3, [r7, #24]
 800cc3a:	88db      	ldrh	r3, [r3, #6]
 800cc3c:	b29b      	uxth	r3, r3
 800cc3e:	b2db      	uxtb	r3, r3
 800cc40:	743b      	strb	r3, [r7, #16]
            Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800cc42:	69bb      	ldr	r3, [r7, #24]
 800cc44:	3308      	adds	r3, #8
 800cc46:	60fb      	str	r3, [r7, #12]
            Custom_STM_App_Notification(&Notification);
 800cc48:	f107 0308 	add.w	r3, r7, #8
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f7ff fdbf 	bl	800c7d0 <Custom_STM_App_Notification>
          break;
 800cc52:	e004      	b.n	800cc5e <Custom_STM_Event_Handler+0xd6>
 800cc54:	e003      	b.n	800cc5e <Custom_STM_Event_Handler+0xd6>
          break;
 800cc56:	bf00      	nop
 800cc58:	e004      	b.n	800cc64 <Custom_STM_Event_Handler+0xdc>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800cc5a:	bf00      	nop
 800cc5c:	e002      	b.n	800cc64 <Custom_STM_Event_Handler+0xdc>
          break;
 800cc5e:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800cc60:	e000      	b.n	800cc64 <Custom_STM_Event_Handler+0xdc>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800cc62:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800cc64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3728      	adds	r7, #40	; 0x28
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}
 800cc70:	20001890 	.word	0x20001890

0800cc74 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b08c      	sub	sp, #48	; 0x30
 800cc78:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800cc7a:	2392      	movs	r3, #146	; 0x92
 800cc7c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800cc7e:	4880      	ldr	r0, [pc, #512]	; (800ce80 <SVCCTL_InitCustomSvc+0x20c>)
 800cc80:	f7fd f9c0 	bl	800a004 <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 800cc84:	2306      	movs	r3, #6
 800cc86:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_SERVER_ARM_UUID(uuid.Char_UUID_128);
 800cc88:	238f      	movs	r3, #143	; 0x8f
 800cc8a:	713b      	strb	r3, [r7, #4]
 800cc8c:	23e5      	movs	r3, #229	; 0xe5
 800cc8e:	717b      	strb	r3, [r7, #5]
 800cc90:	23b3      	movs	r3, #179	; 0xb3
 800cc92:	71bb      	strb	r3, [r7, #6]
 800cc94:	23d5      	movs	r3, #213	; 0xd5
 800cc96:	71fb      	strb	r3, [r7, #7]
 800cc98:	232e      	movs	r3, #46	; 0x2e
 800cc9a:	723b      	strb	r3, [r7, #8]
 800cc9c:	237f      	movs	r3, #127	; 0x7f
 800cc9e:	727b      	strb	r3, [r7, #9]
 800cca0:	234a      	movs	r3, #74	; 0x4a
 800cca2:	72bb      	strb	r3, [r7, #10]
 800cca4:	2398      	movs	r3, #152	; 0x98
 800cca6:	72fb      	strb	r3, [r7, #11]
 800cca8:	232a      	movs	r3, #42	; 0x2a
 800ccaa:	733b      	strb	r3, [r7, #12]
 800ccac:	2348      	movs	r3, #72	; 0x48
 800ccae:	737b      	strb	r3, [r7, #13]
 800ccb0:	237a      	movs	r3, #122	; 0x7a
 800ccb2:	73bb      	strb	r3, [r7, #14]
 800ccb4:	23cc      	movs	r3, #204	; 0xcc
 800ccb6:	73fb      	strb	r3, [r7, #15]
 800ccb8:	2340      	movs	r3, #64	; 0x40
 800ccba:	743b      	strb	r3, [r7, #16]
 800ccbc:	23fe      	movs	r3, #254	; 0xfe
 800ccbe:	747b      	strb	r3, [r7, #17]
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	74bb      	strb	r3, [r7, #18]
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800ccc8:	7dbb      	ldrb	r3, [r7, #22]
 800ccca:	1d39      	adds	r1, r7, #4
 800cccc:	4a6d      	ldr	r2, [pc, #436]	; (800ce84 <SVCCTL_InitCustomSvc+0x210>)
 800ccce:	9200      	str	r2, [sp, #0]
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	2002      	movs	r0, #2
 800ccd4:	f7fc fc5f 	bl	8009596 <aci_gatt_add_service>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomArmHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800ccdc:	7dfb      	ldrb	r3, [r7, #23]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d00f      	beq.n	800cd02 <SVCCTL_InitCustomSvc+0x8e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: Arm, error code: 0x%x \n\r", ret);
 800cce2:	4869      	ldr	r0, [pc, #420]	; (800ce88 <SVCCTL_InitCustomSvc+0x214>)
 800cce4:	f7fe f80a 	bl	800acfc <DbgTraceGetFileName>
 800cce8:	4601      	mov	r1, r0
 800ccea:	f44f 739b 	mov.w	r3, #310	; 0x136
 800ccee:	4a67      	ldr	r2, [pc, #412]	; (800ce8c <SVCCTL_InitCustomSvc+0x218>)
 800ccf0:	4867      	ldr	r0, [pc, #412]	; (800ce90 <SVCCTL_InitCustomSvc+0x21c>)
 800ccf2:	f000 fef3 	bl	800dadc <iprintf>
 800ccf6:	7dfb      	ldrb	r3, [r7, #23]
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	4866      	ldr	r0, [pc, #408]	; (800ce94 <SVCCTL_InitCustomSvc+0x220>)
 800ccfc:	f000 feee 	bl	800dadc <iprintf>
 800cd00:	e00c      	b.n	800cd1c <SVCCTL_InitCustomSvc+0xa8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: Arm \n\r");
 800cd02:	4861      	ldr	r0, [pc, #388]	; (800ce88 <SVCCTL_InitCustomSvc+0x214>)
 800cd04:	f7fd fffa 	bl	800acfc <DbgTraceGetFileName>
 800cd08:	4601      	mov	r1, r0
 800cd0a:	f44f 739d 	mov.w	r3, #314	; 0x13a
 800cd0e:	4a5f      	ldr	r2, [pc, #380]	; (800ce8c <SVCCTL_InitCustomSvc+0x218>)
 800cd10:	485f      	ldr	r0, [pc, #380]	; (800ce90 <SVCCTL_InitCustomSvc+0x21c>)
 800cd12:	f000 fee3 	bl	800dadc <iprintf>
 800cd16:	4860      	ldr	r0, [pc, #384]	; (800ce98 <SVCCTL_InitCustomSvc+0x224>)
 800cd18:	f000 fee0 	bl	800dadc <iprintf>
  }

  /**
   *  Goal_Char
   */
  COPY_GOAL_CHAR_UUID(uuid.Char_UUID_128);
 800cd1c:	2319      	movs	r3, #25
 800cd1e:	713b      	strb	r3, [r7, #4]
 800cd20:	23ed      	movs	r3, #237	; 0xed
 800cd22:	717b      	strb	r3, [r7, #5]
 800cd24:	2382      	movs	r3, #130	; 0x82
 800cd26:	71bb      	strb	r3, [r7, #6]
 800cd28:	23ae      	movs	r3, #174	; 0xae
 800cd2a:	71fb      	strb	r3, [r7, #7]
 800cd2c:	23ed      	movs	r3, #237	; 0xed
 800cd2e:	723b      	strb	r3, [r7, #8]
 800cd30:	2321      	movs	r3, #33	; 0x21
 800cd32:	727b      	strb	r3, [r7, #9]
 800cd34:	234c      	movs	r3, #76	; 0x4c
 800cd36:	72bb      	strb	r3, [r7, #10]
 800cd38:	239d      	movs	r3, #157	; 0x9d
 800cd3a:	72fb      	strb	r3, [r7, #11]
 800cd3c:	2341      	movs	r3, #65	; 0x41
 800cd3e:	733b      	strb	r3, [r7, #12]
 800cd40:	2345      	movs	r3, #69	; 0x45
 800cd42:	737b      	strb	r3, [r7, #13]
 800cd44:	2322      	movs	r3, #34	; 0x22
 800cd46:	73bb      	strb	r3, [r7, #14]
 800cd48:	238e      	movs	r3, #142	; 0x8e
 800cd4a:	73fb      	strb	r3, [r7, #15]
 800cd4c:	2341      	movs	r3, #65	; 0x41
 800cd4e:	743b      	strb	r3, [r7, #16]
 800cd50:	23fe      	movs	r3, #254	; 0xfe
 800cd52:	747b      	strb	r3, [r7, #17]
 800cd54:	2300      	movs	r3, #0
 800cd56:	74bb      	strb	r3, [r7, #18]
 800cd58:	2300      	movs	r3, #0
 800cd5a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomArmHdle,
 800cd5c:	4b49      	ldr	r3, [pc, #292]	; (800ce84 <SVCCTL_InitCustomSvc+0x210>)
 800cd5e:	8818      	ldrh	r0, [r3, #0]
 800cd60:	4b4e      	ldr	r3, [pc, #312]	; (800ce9c <SVCCTL_InitCustomSvc+0x228>)
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	b29b      	uxth	r3, r3
 800cd66:	1d3a      	adds	r2, r7, #4
 800cd68:	494d      	ldr	r1, [pc, #308]	; (800cea0 <SVCCTL_InitCustomSvc+0x22c>)
 800cd6a:	9105      	str	r1, [sp, #20]
 800cd6c:	2101      	movs	r1, #1
 800cd6e:	9104      	str	r1, [sp, #16]
 800cd70:	2110      	movs	r1, #16
 800cd72:	9103      	str	r1, [sp, #12]
 800cd74:	2101      	movs	r1, #1
 800cd76:	9102      	str	r1, [sp, #8]
 800cd78:	2100      	movs	r1, #0
 800cd7a:	9101      	str	r1, [sp, #4]
 800cd7c:	2106      	movs	r1, #6
 800cd7e:	9100      	str	r1, [sp, #0]
 800cd80:	2102      	movs	r1, #2
 800cd82:	f7fc fcde 	bl	8009742 <aci_gatt_add_char>
 800cd86:	4603      	mov	r3, r0
 800cd88:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomGoal_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800cd8a:	7dfb      	ldrb	r3, [r7, #23]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d00f      	beq.n	800cdb0 <SVCCTL_InitCustomSvc+0x13c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : GOAL_C, error code: 0x%x \n\r", ret);
 800cd90:	483d      	ldr	r0, [pc, #244]	; (800ce88 <SVCCTL_InitCustomSvc+0x214>)
 800cd92:	f7fd ffb3 	bl	800acfc <DbgTraceGetFileName>
 800cd96:	4601      	mov	r1, r0
 800cd98:	f44f 73a6 	mov.w	r3, #332	; 0x14c
 800cd9c:	4a3b      	ldr	r2, [pc, #236]	; (800ce8c <SVCCTL_InitCustomSvc+0x218>)
 800cd9e:	483c      	ldr	r0, [pc, #240]	; (800ce90 <SVCCTL_InitCustomSvc+0x21c>)
 800cda0:	f000 fe9c 	bl	800dadc <iprintf>
 800cda4:	7dfb      	ldrb	r3, [r7, #23]
 800cda6:	4619      	mov	r1, r3
 800cda8:	483e      	ldr	r0, [pc, #248]	; (800cea4 <SVCCTL_InitCustomSvc+0x230>)
 800cdaa:	f000 fe97 	bl	800dadc <iprintf>
 800cdae:	e00c      	b.n	800cdca <SVCCTL_InitCustomSvc+0x156>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : GOAL_C \n\r");
 800cdb0:	4835      	ldr	r0, [pc, #212]	; (800ce88 <SVCCTL_InitCustomSvc+0x214>)
 800cdb2:	f7fd ffa3 	bl	800acfc <DbgTraceGetFileName>
 800cdb6:	4601      	mov	r1, r0
 800cdb8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800cdbc:	4a33      	ldr	r2, [pc, #204]	; (800ce8c <SVCCTL_InitCustomSvc+0x218>)
 800cdbe:	4834      	ldr	r0, [pc, #208]	; (800ce90 <SVCCTL_InitCustomSvc+0x21c>)
 800cdc0:	f000 fe8c 	bl	800dadc <iprintf>
 800cdc4:	4838      	ldr	r0, [pc, #224]	; (800cea8 <SVCCTL_InitCustomSvc+0x234>)
 800cdc6:	f000 fe89 	bl	800dadc <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  State_Char
   */
  COPY_STATE_CHAR_UUID(uuid.Char_UUID_128);
 800cdca:	2319      	movs	r3, #25
 800cdcc:	713b      	strb	r3, [r7, #4]
 800cdce:	23ed      	movs	r3, #237	; 0xed
 800cdd0:	717b      	strb	r3, [r7, #5]
 800cdd2:	2382      	movs	r3, #130	; 0x82
 800cdd4:	71bb      	strb	r3, [r7, #6]
 800cdd6:	23ae      	movs	r3, #174	; 0xae
 800cdd8:	71fb      	strb	r3, [r7, #7]
 800cdda:	23ed      	movs	r3, #237	; 0xed
 800cddc:	723b      	strb	r3, [r7, #8]
 800cdde:	2321      	movs	r3, #33	; 0x21
 800cde0:	727b      	strb	r3, [r7, #9]
 800cde2:	234c      	movs	r3, #76	; 0x4c
 800cde4:	72bb      	strb	r3, [r7, #10]
 800cde6:	239d      	movs	r3, #157	; 0x9d
 800cde8:	72fb      	strb	r3, [r7, #11]
 800cdea:	2341      	movs	r3, #65	; 0x41
 800cdec:	733b      	strb	r3, [r7, #12]
 800cdee:	2345      	movs	r3, #69	; 0x45
 800cdf0:	737b      	strb	r3, [r7, #13]
 800cdf2:	2322      	movs	r3, #34	; 0x22
 800cdf4:	73bb      	strb	r3, [r7, #14]
 800cdf6:	238e      	movs	r3, #142	; 0x8e
 800cdf8:	73fb      	strb	r3, [r7, #15]
 800cdfa:	2342      	movs	r3, #66	; 0x42
 800cdfc:	743b      	strb	r3, [r7, #16]
 800cdfe:	23fe      	movs	r3, #254	; 0xfe
 800ce00:	747b      	strb	r3, [r7, #17]
 800ce02:	2300      	movs	r3, #0
 800ce04:	74bb      	strb	r3, [r7, #18]
 800ce06:	2300      	movs	r3, #0
 800ce08:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomArmHdle,
 800ce0a:	4b1e      	ldr	r3, [pc, #120]	; (800ce84 <SVCCTL_InitCustomSvc+0x210>)
 800ce0c:	8818      	ldrh	r0, [r3, #0]
 800ce0e:	4b27      	ldr	r3, [pc, #156]	; (800ceac <SVCCTL_InitCustomSvc+0x238>)
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	b29b      	uxth	r3, r3
 800ce14:	1d3a      	adds	r2, r7, #4
 800ce16:	4926      	ldr	r1, [pc, #152]	; (800ceb0 <SVCCTL_InitCustomSvc+0x23c>)
 800ce18:	9105      	str	r1, [sp, #20]
 800ce1a:	2101      	movs	r1, #1
 800ce1c:	9104      	str	r1, [sp, #16]
 800ce1e:	2110      	movs	r1, #16
 800ce20:	9103      	str	r1, [sp, #12]
 800ce22:	2101      	movs	r1, #1
 800ce24:	9102      	str	r1, [sp, #8]
 800ce26:	2100      	movs	r1, #0
 800ce28:	9101      	str	r1, [sp, #4]
 800ce2a:	2110      	movs	r1, #16
 800ce2c:	9100      	str	r1, [sp, #0]
 800ce2e:	2102      	movs	r1, #2
 800ce30:	f7fc fc87 	bl	8009742 <aci_gatt_add_char>
 800ce34:	4603      	mov	r3, r0
 800ce36:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomState_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800ce38:	7dfb      	ldrb	r3, [r7, #23]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d00f      	beq.n	800ce5e <SVCCTL_InitCustomSvc+0x1ea>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : STATE_C, error code: 0x%x \n\r", ret);
 800ce3e:	4812      	ldr	r0, [pc, #72]	; (800ce88 <SVCCTL_InitCustomSvc+0x214>)
 800ce40:	f7fd ff5c 	bl	800acfc <DbgTraceGetFileName>
 800ce44:	4601      	mov	r1, r0
 800ce46:	f44f 73b3 	mov.w	r3, #358	; 0x166
 800ce4a:	4a10      	ldr	r2, [pc, #64]	; (800ce8c <SVCCTL_InitCustomSvc+0x218>)
 800ce4c:	4810      	ldr	r0, [pc, #64]	; (800ce90 <SVCCTL_InitCustomSvc+0x21c>)
 800ce4e:	f000 fe45 	bl	800dadc <iprintf>
 800ce52:	7dfb      	ldrb	r3, [r7, #23]
 800ce54:	4619      	mov	r1, r3
 800ce56:	4817      	ldr	r0, [pc, #92]	; (800ceb4 <SVCCTL_InitCustomSvc+0x240>)
 800ce58:	f000 fe40 	bl	800dadc <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800ce5c:	e00d      	b.n	800ce7a <SVCCTL_InitCustomSvc+0x206>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : STATE_C \n\r");
 800ce5e:	480a      	ldr	r0, [pc, #40]	; (800ce88 <SVCCTL_InitCustomSvc+0x214>)
 800ce60:	f7fd ff4c 	bl	800acfc <DbgTraceGetFileName>
 800ce64:	4601      	mov	r1, r0
 800ce66:	f44f 73b5 	mov.w	r3, #362	; 0x16a
 800ce6a:	4a08      	ldr	r2, [pc, #32]	; (800ce8c <SVCCTL_InitCustomSvc+0x218>)
 800ce6c:	4808      	ldr	r0, [pc, #32]	; (800ce90 <SVCCTL_InitCustomSvc+0x21c>)
 800ce6e:	f000 fe35 	bl	800dadc <iprintf>
 800ce72:	4811      	ldr	r0, [pc, #68]	; (800ceb8 <SVCCTL_InitCustomSvc+0x244>)
 800ce74:	f000 fe32 	bl	800dadc <iprintf>
  return;
 800ce78:	bf00      	nop
}
 800ce7a:	3718      	adds	r7, #24
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}
 800ce80:	0800cb89 	.word	0x0800cb89
 800ce84:	20001890 	.word	0x20001890
 800ce88:	0800fbdc 	.word	0x0800fbdc
 800ce8c:	08010184 	.word	0x08010184
 800ce90:	0800fbfc 	.word	0x0800fbfc
 800ce94:	0800fc10 	.word	0x0800fc10
 800ce98:	0800fc54 	.word	0x0800fc54
 800ce9c:	2000002d 	.word	0x2000002d
 800cea0:	20001892 	.word	0x20001892
 800cea4:	0800fc84 	.word	0x0800fc84
 800cea8:	0800fccc 	.word	0x0800fccc
 800ceac:	2000002e 	.word	0x2000002e
 800ceb0:	20001894 	.word	0x20001894
 800ceb4:	0800fd00 	.word	0x0800fd00
 800ceb8:	0800fd48 	.word	0x0800fd48

0800cebc <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b086      	sub	sp, #24
 800cec0:	af02      	add	r7, sp, #8
 800cec2:	4603      	mov	r3, r0
 800cec4:	6039      	str	r1, [r7, #0]
 800cec6:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800cec8:	2392      	movs	r3, #146	; 0x92
 800ceca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800cecc:	79fb      	ldrb	r3, [r7, #7]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d002      	beq.n	800ced8 <Custom_STM_App_Update_Char+0x1c>
 800ced2:	2b01      	cmp	r3, #1
 800ced4:	d02f      	beq.n	800cf36 <Custom_STM_App_Update_Char+0x7a>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 800ced6:	e05d      	b.n	800cf94 <Custom_STM_App_Update_Char+0xd8>
      ret = aci_gatt_update_char_value(CustomContext.CustomArmHdle,
 800ced8:	4b31      	ldr	r3, [pc, #196]	; (800cfa0 <Custom_STM_App_Update_Char+0xe4>)
 800ceda:	8818      	ldrh	r0, [r3, #0]
 800cedc:	4b30      	ldr	r3, [pc, #192]	; (800cfa0 <Custom_STM_App_Update_Char+0xe4>)
 800cede:	8859      	ldrh	r1, [r3, #2]
 800cee0:	4b30      	ldr	r3, [pc, #192]	; (800cfa4 <Custom_STM_App_Update_Char+0xe8>)
 800cee2:	781a      	ldrb	r2, [r3, #0]
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	9300      	str	r3, [sp, #0]
 800cee8:	4613      	mov	r3, r2
 800ceea:	2200      	movs	r2, #0
 800ceec:	f7fc fd31 	bl	8009952 <aci_gatt_update_char_value>
 800cef0:	4603      	mov	r3, r0
 800cef2:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 800cef4:	7bfb      	ldrb	r3, [r7, #15]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d00f      	beq.n	800cf1a <Custom_STM_App_Update_Char+0x5e>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value GOAL_C command, result : 0x%x \n\r", ret);
 800cefa:	482b      	ldr	r0, [pc, #172]	; (800cfa8 <Custom_STM_App_Update_Char+0xec>)
 800cefc:	f7fd fefe 	bl	800acfc <DbgTraceGetFileName>
 800cf00:	4601      	mov	r1, r0
 800cf02:	f240 1391 	movw	r3, #401	; 0x191
 800cf06:	4a29      	ldr	r2, [pc, #164]	; (800cfac <Custom_STM_App_Update_Char+0xf0>)
 800cf08:	4829      	ldr	r0, [pc, #164]	; (800cfb0 <Custom_STM_App_Update_Char+0xf4>)
 800cf0a:	f000 fde7 	bl	800dadc <iprintf>
 800cf0e:	7bfb      	ldrb	r3, [r7, #15]
 800cf10:	4619      	mov	r1, r3
 800cf12:	4828      	ldr	r0, [pc, #160]	; (800cfb4 <Custom_STM_App_Update_Char+0xf8>)
 800cf14:	f000 fde2 	bl	800dadc <iprintf>
      break;
 800cf18:	e03c      	b.n	800cf94 <Custom_STM_App_Update_Char+0xd8>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value GOAL_C command\n\r");
 800cf1a:	4823      	ldr	r0, [pc, #140]	; (800cfa8 <Custom_STM_App_Update_Char+0xec>)
 800cf1c:	f7fd feee 	bl	800acfc <DbgTraceGetFileName>
 800cf20:	4601      	mov	r1, r0
 800cf22:	f240 1395 	movw	r3, #405	; 0x195
 800cf26:	4a21      	ldr	r2, [pc, #132]	; (800cfac <Custom_STM_App_Update_Char+0xf0>)
 800cf28:	4821      	ldr	r0, [pc, #132]	; (800cfb0 <Custom_STM_App_Update_Char+0xf4>)
 800cf2a:	f000 fdd7 	bl	800dadc <iprintf>
 800cf2e:	4822      	ldr	r0, [pc, #136]	; (800cfb8 <Custom_STM_App_Update_Char+0xfc>)
 800cf30:	f000 fdd4 	bl	800dadc <iprintf>
      break;
 800cf34:	e02e      	b.n	800cf94 <Custom_STM_App_Update_Char+0xd8>
      ret = aci_gatt_update_char_value(CustomContext.CustomArmHdle,
 800cf36:	4b1a      	ldr	r3, [pc, #104]	; (800cfa0 <Custom_STM_App_Update_Char+0xe4>)
 800cf38:	8818      	ldrh	r0, [r3, #0]
 800cf3a:	4b19      	ldr	r3, [pc, #100]	; (800cfa0 <Custom_STM_App_Update_Char+0xe4>)
 800cf3c:	8899      	ldrh	r1, [r3, #4]
 800cf3e:	4b1f      	ldr	r3, [pc, #124]	; (800cfbc <Custom_STM_App_Update_Char+0x100>)
 800cf40:	781a      	ldrb	r2, [r3, #0]
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	9300      	str	r3, [sp, #0]
 800cf46:	4613      	mov	r3, r2
 800cf48:	2200      	movs	r2, #0
 800cf4a:	f7fc fd02 	bl	8009952 <aci_gatt_update_char_value>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 800cf52:	7bfb      	ldrb	r3, [r7, #15]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d00f      	beq.n	800cf78 <Custom_STM_App_Update_Char+0xbc>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value STATE_C command, result : 0x%x \n\r", ret);
 800cf58:	4813      	ldr	r0, [pc, #76]	; (800cfa8 <Custom_STM_App_Update_Char+0xec>)
 800cf5a:	f7fd fecf 	bl	800acfc <DbgTraceGetFileName>
 800cf5e:	4601      	mov	r1, r0
 800cf60:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 800cf64:	4a11      	ldr	r2, [pc, #68]	; (800cfac <Custom_STM_App_Update_Char+0xf0>)
 800cf66:	4812      	ldr	r0, [pc, #72]	; (800cfb0 <Custom_STM_App_Update_Char+0xf4>)
 800cf68:	f000 fdb8 	bl	800dadc <iprintf>
 800cf6c:	7bfb      	ldrb	r3, [r7, #15]
 800cf6e:	4619      	mov	r1, r3
 800cf70:	4813      	ldr	r0, [pc, #76]	; (800cfc0 <Custom_STM_App_Update_Char+0x104>)
 800cf72:	f000 fdb3 	bl	800dadc <iprintf>
      break;
 800cf76:	e00c      	b.n	800cf92 <Custom_STM_App_Update_Char+0xd6>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value STATE_C command\n\r");
 800cf78:	480b      	ldr	r0, [pc, #44]	; (800cfa8 <Custom_STM_App_Update_Char+0xec>)
 800cf7a:	f7fd febf 	bl	800acfc <DbgTraceGetFileName>
 800cf7e:	4601      	mov	r1, r0
 800cf80:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 800cf84:	4a09      	ldr	r2, [pc, #36]	; (800cfac <Custom_STM_App_Update_Char+0xf0>)
 800cf86:	480a      	ldr	r0, [pc, #40]	; (800cfb0 <Custom_STM_App_Update_Char+0xf4>)
 800cf88:	f000 fda8 	bl	800dadc <iprintf>
 800cf8c:	480d      	ldr	r0, [pc, #52]	; (800cfc4 <Custom_STM_App_Update_Char+0x108>)
 800cf8e:	f000 fda5 	bl	800dadc <iprintf>
      break;
 800cf92:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800cf94:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3710      	adds	r7, #16
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
 800cf9e:	bf00      	nop
 800cfa0:	20001890 	.word	0x20001890
 800cfa4:	2000002d 	.word	0x2000002d
 800cfa8:	0800fbdc 	.word	0x0800fbdc
 800cfac:	0801019c 	.word	0x0801019c
 800cfb0:	0800fbfc 	.word	0x0800fbfc
 800cfb4:	0800fd7c 	.word	0x0800fd7c
 800cfb8:	0800fdc4 	.word	0x0800fdc4
 800cfbc:	2000002e 	.word	0x2000002e
 800cfc0:	0800fdfc 	.word	0x0800fdfc
 800cfc4:	0800fe44 	.word	0x0800fe44

0800cfc8 <LL_PWR_EnableBootC2>:
{
 800cfc8:	b480      	push	{r7}
 800cfca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800cfcc:	4b05      	ldr	r3, [pc, #20]	; (800cfe4 <LL_PWR_EnableBootC2+0x1c>)
 800cfce:	68db      	ldr	r3, [r3, #12]
 800cfd0:	4a04      	ldr	r2, [pc, #16]	; (800cfe4 <LL_PWR_EnableBootC2+0x1c>)
 800cfd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cfd6:	60d3      	str	r3, [r2, #12]
}
 800cfd8:	bf00      	nop
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe0:	4770      	bx	lr
 800cfe2:	bf00      	nop
 800cfe4:	58000400 	.word	0x58000400

0800cfe8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800cfe8:	b480      	push	{r7}
 800cfea:	b083      	sub	sp, #12
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800cff0:	4b06      	ldr	r3, [pc, #24]	; (800d00c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800cff2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800cff6:	4905      	ldr	r1, [pc, #20]	; (800d00c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	4313      	orrs	r3, r2
 800cffc:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800d000:	bf00      	nop
 800d002:	370c      	adds	r7, #12
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr
 800d00c:	58000800 	.word	0x58000800

0800d010 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800d010:	b480      	push	{r7}
 800d012:	b083      	sub	sp, #12
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800d018:	4b05      	ldr	r3, [pc, #20]	; (800d030 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d01a:	6a1a      	ldr	r2, [r3, #32]
 800d01c:	4904      	ldr	r1, [pc, #16]	; (800d030 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	4313      	orrs	r3, r2
 800d022:	620b      	str	r3, [r1, #32]
}
 800d024:	bf00      	nop
 800d026:	370c      	adds	r7, #12
 800d028:	46bd      	mov	sp, r7
 800d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02e:	4770      	bx	lr
 800d030:	58000800 	.word	0x58000800

0800d034 <LL_AHB3_GRP1_EnableClock>:
{
 800d034:	b480      	push	{r7}
 800d036:	b085      	sub	sp, #20
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800d03c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d040:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d042:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	4313      	orrs	r3, r2
 800d04a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800d04c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d050:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	4013      	ands	r3, r2
 800d056:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d058:	68fb      	ldr	r3, [r7, #12]
}
 800d05a:	bf00      	nop
 800d05c:	3714      	adds	r7, #20
 800d05e:	46bd      	mov	sp, r7
 800d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d064:	4770      	bx	lr

0800d066 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800d066:	b480      	push	{r7}
 800d068:	b085      	sub	sp, #20
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800d06e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d072:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800d076:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	4313      	orrs	r3, r2
 800d07e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800d082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d086:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	4013      	ands	r3, r2
 800d08e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d090:	68fb      	ldr	r3, [r7, #12]
}
 800d092:	bf00      	nop
 800d094:	3714      	adds	r7, #20
 800d096:	46bd      	mov	sp, r7
 800d098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09c:	4770      	bx	lr

0800d09e <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800d09e:	b480      	push	{r7}
 800d0a0:	b083      	sub	sp, #12
 800d0a2:	af00      	add	r7, sp, #0
 800d0a4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	601a      	str	r2, [r3, #0]
}
 800d0b2:	bf00      	nop
 800d0b4:	370c      	adds	r7, #12
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0bc:	4770      	bx	lr

0800d0be <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800d0be:	b480      	push	{r7}
 800d0c0:	b083      	sub	sp, #12
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	f043 0201 	orr.w	r2, r3, #1
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	601a      	str	r2, [r3, #0]
}
 800d0d2:	bf00      	nop
 800d0d4:	370c      	adds	r7, #12
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0dc:	4770      	bx	lr

0800d0de <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d0de:	b480      	push	{r7}
 800d0e0:	b083      	sub	sp, #12
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	6078      	str	r0, [r7, #4]
 800d0e6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	685a      	ldr	r2, [r3, #4]
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	041b      	lsls	r3, r3, #16
 800d0f0:	43db      	mvns	r3, r3
 800d0f2:	401a      	ands	r2, r3
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	605a      	str	r2, [r3, #4]
}
 800d0f8:	bf00      	nop
 800d0fa:	370c      	adds	r7, #12
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr

0800d104 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d104:	b480      	push	{r7}
 800d106:	b083      	sub	sp, #12
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
 800d10c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	685a      	ldr	r2, [r3, #4]
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	041b      	lsls	r3, r3, #16
 800d116:	431a      	orrs	r2, r3
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	605a      	str	r2, [r3, #4]
}
 800d11c:	bf00      	nop
 800d11e:	370c      	adds	r7, #12
 800d120:	46bd      	mov	sp, r7
 800d122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d126:	4770      	bx	lr

0800d128 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d128:	b480      	push	{r7}
 800d12a:	b083      	sub	sp, #12
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
 800d130:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	685a      	ldr	r2, [r3, #4]
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	43db      	mvns	r3, r3
 800d13a:	401a      	ands	r2, r3
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	605a      	str	r2, [r3, #4]
}
 800d140:	bf00      	nop
 800d142:	370c      	adds	r7, #12
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr

0800d14c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b083      	sub	sp, #12
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	683a      	ldr	r2, [r7, #0]
 800d15a:	609a      	str	r2, [r3, #8]
}
 800d15c:	bf00      	nop
 800d15e:	370c      	adds	r7, #12
 800d160:	46bd      	mov	sp, r7
 800d162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d166:	4770      	bx	lr

0800d168 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d168:	b480      	push	{r7}
 800d16a:	b083      	sub	sp, #12
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	041a      	lsls	r2, r3, #16
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	609a      	str	r2, [r3, #8]
}
 800d17a:	bf00      	nop
 800d17c:	370c      	adds	r7, #12
 800d17e:	46bd      	mov	sp, r7
 800d180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d184:	4770      	bx	lr

0800d186 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d186:	b480      	push	{r7}
 800d188:	b083      	sub	sp, #12
 800d18a:	af00      	add	r7, sp, #0
 800d18c:	6078      	str	r0, [r7, #4]
 800d18e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	68da      	ldr	r2, [r3, #12]
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	4013      	ands	r3, r2
 800d198:	683a      	ldr	r2, [r7, #0]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d101      	bne.n	800d1a2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800d19e:	2301      	movs	r3, #1
 800d1a0:	e000      	b.n	800d1a4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800d1a2:	2300      	movs	r3, #0
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	370c      	adds	r7, #12
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ae:	4770      	bx	lr

0800d1b0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b083      	sub	sp, #12
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	69da      	ldr	r2, [r3, #28]
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	4013      	ands	r3, r2
 800d1c2:	683a      	ldr	r2, [r7, #0]
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d101      	bne.n	800d1cc <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	e000      	b.n	800d1ce <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800d1cc:	2300      	movs	r3, #0
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	370c      	adds	r7, #12
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d8:	4770      	bx	lr
	...

0800d1dc <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800d1e0:	2102      	movs	r1, #2
 800d1e2:	4818      	ldr	r0, [pc, #96]	; (800d244 <HW_IPCC_Rx_Handler+0x68>)
 800d1e4:	f7ff ffe4 	bl	800d1b0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d008      	beq.n	800d200 <HW_IPCC_Rx_Handler+0x24>
 800d1ee:	4b15      	ldr	r3, [pc, #84]	; (800d244 <HW_IPCC_Rx_Handler+0x68>)
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	f003 0302 	and.w	r3, r3, #2
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d102      	bne.n	800d200 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800d1fa:	f000 f8d5 	bl	800d3a8 <HW_IPCC_SYS_EvtHandler>
 800d1fe:	e01e      	b.n	800d23e <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800d200:	2101      	movs	r1, #1
 800d202:	4810      	ldr	r0, [pc, #64]	; (800d244 <HW_IPCC_Rx_Handler+0x68>)
 800d204:	f7ff ffd4 	bl	800d1b0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d208:	4603      	mov	r3, r0
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d008      	beq.n	800d220 <HW_IPCC_Rx_Handler+0x44>
 800d20e:	4b0d      	ldr	r3, [pc, #52]	; (800d244 <HW_IPCC_Rx_Handler+0x68>)
 800d210:	685b      	ldr	r3, [r3, #4]
 800d212:	f003 0301 	and.w	r3, r3, #1
 800d216:	2b00      	cmp	r3, #0
 800d218:	d102      	bne.n	800d220 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800d21a:	f000 f889 	bl	800d330 <HW_IPCC_BLE_EvtHandler>
 800d21e:	e00e      	b.n	800d23e <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800d220:	2108      	movs	r1, #8
 800d222:	4808      	ldr	r0, [pc, #32]	; (800d244 <HW_IPCC_Rx_Handler+0x68>)
 800d224:	f7ff ffc4 	bl	800d1b0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d228:	4603      	mov	r3, r0
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d008      	beq.n	800d240 <HW_IPCC_Rx_Handler+0x64>
 800d22e:	4b05      	ldr	r3, [pc, #20]	; (800d244 <HW_IPCC_Rx_Handler+0x68>)
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	f003 0308 	and.w	r3, r3, #8
 800d236:	2b00      	cmp	r3, #0
 800d238:	d102      	bne.n	800d240 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800d23a:	f000 f901 	bl	800d440 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800d23e:	bf00      	nop
 800d240:	bf00      	nop
}
 800d242:	bd80      	pop	{r7, pc}
 800d244:	58000c00 	.word	0x58000c00

0800d248 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d24c:	2102      	movs	r1, #2
 800d24e:	4818      	ldr	r0, [pc, #96]	; (800d2b0 <HW_IPCC_Tx_Handler+0x68>)
 800d250:	f7ff ff99 	bl	800d186 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d254:	4603      	mov	r3, r0
 800d256:	2b00      	cmp	r3, #0
 800d258:	d108      	bne.n	800d26c <HW_IPCC_Tx_Handler+0x24>
 800d25a:	4b15      	ldr	r3, [pc, #84]	; (800d2b0 <HW_IPCC_Tx_Handler+0x68>)
 800d25c:	685b      	ldr	r3, [r3, #4]
 800d25e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d262:	2b00      	cmp	r3, #0
 800d264:	d102      	bne.n	800d26c <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d266:	f000 f893 	bl	800d390 <HW_IPCC_SYS_CmdEvtHandler>
 800d26a:	e01e      	b.n	800d2aa <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800d26c:	2108      	movs	r1, #8
 800d26e:	4810      	ldr	r0, [pc, #64]	; (800d2b0 <HW_IPCC_Tx_Handler+0x68>)
 800d270:	f7ff ff89 	bl	800d186 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d274:	4603      	mov	r3, r0
 800d276:	2b00      	cmp	r3, #0
 800d278:	d108      	bne.n	800d28c <HW_IPCC_Tx_Handler+0x44>
 800d27a:	4b0d      	ldr	r3, [pc, #52]	; (800d2b0 <HW_IPCC_Tx_Handler+0x68>)
 800d27c:	685b      	ldr	r3, [r3, #4]
 800d27e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d282:	2b00      	cmp	r3, #0
 800d284:	d102      	bne.n	800d28c <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800d286:	f000 f8bd 	bl	800d404 <HW_IPCC_MM_FreeBufHandler>
 800d28a:	e00e      	b.n	800d2aa <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800d28c:	2120      	movs	r1, #32
 800d28e:	4808      	ldr	r0, [pc, #32]	; (800d2b0 <HW_IPCC_Tx_Handler+0x68>)
 800d290:	f7ff ff79 	bl	800d186 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d294:	4603      	mov	r3, r0
 800d296:	2b00      	cmp	r3, #0
 800d298:	d108      	bne.n	800d2ac <HW_IPCC_Tx_Handler+0x64>
 800d29a:	4b05      	ldr	r3, [pc, #20]	; (800d2b0 <HW_IPCC_Tx_Handler+0x68>)
 800d29c:	685b      	ldr	r3, [r3, #4]
 800d29e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d102      	bne.n	800d2ac <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800d2a6:	f000 f84f 	bl	800d348 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800d2aa:	bf00      	nop
 800d2ac:	bf00      	nop
}
 800d2ae:	bd80      	pop	{r7, pc}
 800d2b0:	58000c00 	.word	0x58000c00

0800d2b4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800d2b8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d2bc:	f7ff fed3 	bl	800d066 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800d2c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d2c4:	f7ff fea4 	bl	800d010 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800d2c8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d2cc:	f7ff fe8c 	bl	800cfe8 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800d2d0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800d2d2:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800d2d4:	f7ff fe78 	bl	800cfc8 <LL_PWR_EnableBootC2>

  return;
 800d2d8:	bf00      	nop
}
 800d2da:	bd80      	pop	{r7, pc}

0800d2dc <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800d2e0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d2e4:	f7ff fea6 	bl	800d034 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800d2e8:	4806      	ldr	r0, [pc, #24]	; (800d304 <HW_IPCC_Init+0x28>)
 800d2ea:	f7ff fee8 	bl	800d0be <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800d2ee:	4805      	ldr	r0, [pc, #20]	; (800d304 <HW_IPCC_Init+0x28>)
 800d2f0:	f7ff fed5 	bl	800d09e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800d2f4:	202c      	movs	r0, #44	; 0x2c
 800d2f6:	f7f6 fbc4 	bl	8003a82 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800d2fa:	202d      	movs	r0, #45	; 0x2d
 800d2fc:	f7f6 fbc1 	bl	8003a82 <HAL_NVIC_EnableIRQ>

  return;
 800d300:	bf00      	nop
}
 800d302:	bd80      	pop	{r7, pc}
 800d304:	58000c00 	.word	0x58000c00

0800d308 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d30c:	2101      	movs	r1, #1
 800d30e:	4802      	ldr	r0, [pc, #8]	; (800d318 <HW_IPCC_BLE_Init+0x10>)
 800d310:	f7ff ff0a 	bl	800d128 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d314:	bf00      	nop
}
 800d316:	bd80      	pop	{r7, pc}
 800d318:	58000c00 	.word	0x58000c00

0800d31c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800d320:	2101      	movs	r1, #1
 800d322:	4802      	ldr	r0, [pc, #8]	; (800d32c <HW_IPCC_BLE_SendCmd+0x10>)
 800d324:	f7ff ff20 	bl	800d168 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d328:	bf00      	nop
}
 800d32a:	bd80      	pop	{r7, pc}
 800d32c:	58000c00 	.word	0x58000c00

0800d330 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800d330:	b580      	push	{r7, lr}
 800d332:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800d334:	f7fd fb2a 	bl	800a98c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d338:	2101      	movs	r1, #1
 800d33a:	4802      	ldr	r0, [pc, #8]	; (800d344 <HW_IPCC_BLE_EvtHandler+0x14>)
 800d33c:	f7ff ff06 	bl	800d14c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d340:	bf00      	nop
}
 800d342:	bd80      	pop	{r7, pc}
 800d344:	58000c00 	.word	0x58000c00

0800d348 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800d34c:	2120      	movs	r1, #32
 800d34e:	4803      	ldr	r0, [pc, #12]	; (800d35c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800d350:	f7ff fed8 	bl	800d104 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800d354:	f7fd fb4a 	bl	800a9ec <HW_IPCC_BLE_AclDataAckNot>

  return;
 800d358:	bf00      	nop
}
 800d35a:	bd80      	pop	{r7, pc}
 800d35c:	58000c00 	.word	0x58000c00

0800d360 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800d360:	b580      	push	{r7, lr}
 800d362:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d364:	2102      	movs	r1, #2
 800d366:	4802      	ldr	r0, [pc, #8]	; (800d370 <HW_IPCC_SYS_Init+0x10>)
 800d368:	f7ff fede 	bl	800d128 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d36c:	bf00      	nop
}
 800d36e:	bd80      	pop	{r7, pc}
 800d370:	58000c00 	.word	0x58000c00

0800d374 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800d374:	b580      	push	{r7, lr}
 800d376:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d378:	2102      	movs	r1, #2
 800d37a:	4804      	ldr	r0, [pc, #16]	; (800d38c <HW_IPCC_SYS_SendCmd+0x18>)
 800d37c:	f7ff fef4 	bl	800d168 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d380:	2102      	movs	r1, #2
 800d382:	4802      	ldr	r0, [pc, #8]	; (800d38c <HW_IPCC_SYS_SendCmd+0x18>)
 800d384:	f7ff feab 	bl	800d0de <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800d388:	bf00      	nop
}
 800d38a:	bd80      	pop	{r7, pc}
 800d38c:	58000c00 	.word	0x58000c00

0800d390 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800d390:	b580      	push	{r7, lr}
 800d392:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d394:	2102      	movs	r1, #2
 800d396:	4803      	ldr	r0, [pc, #12]	; (800d3a4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800d398:	f7ff feb4 	bl	800d104 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800d39c:	f7fd fb76 	bl	800aa8c <HW_IPCC_SYS_CmdEvtNot>

  return;
 800d3a0:	bf00      	nop
}
 800d3a2:	bd80      	pop	{r7, pc}
 800d3a4:	58000c00 	.word	0x58000c00

0800d3a8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800d3ac:	f7fd fb84 	bl	800aab8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d3b0:	2102      	movs	r1, #2
 800d3b2:	4802      	ldr	r0, [pc, #8]	; (800d3bc <HW_IPCC_SYS_EvtHandler+0x14>)
 800d3b4:	f7ff feca 	bl	800d14c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d3b8:	bf00      	nop
}
 800d3ba:	bd80      	pop	{r7, pc}
 800d3bc:	58000c00 	.word	0x58000c00

0800d3c0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b082      	sub	sp, #8
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800d3c8:	2108      	movs	r1, #8
 800d3ca:	480c      	ldr	r0, [pc, #48]	; (800d3fc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d3cc:	f7ff fedb 	bl	800d186 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d007      	beq.n	800d3e6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800d3d6:	4a0a      	ldr	r2, [pc, #40]	; (800d400 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d3dc:	2108      	movs	r1, #8
 800d3de:	4807      	ldr	r0, [pc, #28]	; (800d3fc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d3e0:	f7ff fe7d 	bl	800d0de <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800d3e4:	e006      	b.n	800d3f4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d3ea:	2108      	movs	r1, #8
 800d3ec:	4803      	ldr	r0, [pc, #12]	; (800d3fc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d3ee:	f7ff febb 	bl	800d168 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800d3f2:	bf00      	nop
}
 800d3f4:	3708      	adds	r7, #8
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
 800d3fa:	bf00      	nop
 800d3fc:	58000c00 	.word	0x58000c00
 800d400:	20001898 	.word	0x20001898

0800d404 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800d404:	b580      	push	{r7, lr}
 800d406:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d408:	2108      	movs	r1, #8
 800d40a:	4806      	ldr	r0, [pc, #24]	; (800d424 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d40c:	f7ff fe7a 	bl	800d104 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800d410:	4b05      	ldr	r3, [pc, #20]	; (800d428 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d416:	2108      	movs	r1, #8
 800d418:	4802      	ldr	r0, [pc, #8]	; (800d424 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d41a:	f7ff fea5 	bl	800d168 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d41e:	bf00      	nop
}
 800d420:	bd80      	pop	{r7, pc}
 800d422:	bf00      	nop
 800d424:	58000c00 	.word	0x58000c00
 800d428:	20001898 	.word	0x20001898

0800d42c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d430:	2108      	movs	r1, #8
 800d432:	4802      	ldr	r0, [pc, #8]	; (800d43c <HW_IPCC_TRACES_Init+0x10>)
 800d434:	f7ff fe78 	bl	800d128 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d438:	bf00      	nop
}
 800d43a:	bd80      	pop	{r7, pc}
 800d43c:	58000c00 	.word	0x58000c00

0800d440 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800d440:	b580      	push	{r7, lr}
 800d442:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800d444:	f7fd fbe0 	bl	800ac08 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d448:	2108      	movs	r1, #8
 800d44a:	4802      	ldr	r0, [pc, #8]	; (800d454 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800d44c:	f7ff fe7e 	bl	800d14c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d450:	bf00      	nop
}
 800d452:	bd80      	pop	{r7, pc}
 800d454:	58000c00 	.word	0x58000c00

0800d458 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800d458:	b480      	push	{r7}
 800d45a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800d45c:	4b05      	ldr	r3, [pc, #20]	; (800d474 <UTIL_LPM_Init+0x1c>)
 800d45e:	2200      	movs	r2, #0
 800d460:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800d462:	4b05      	ldr	r3, [pc, #20]	; (800d478 <UTIL_LPM_Init+0x20>)
 800d464:	2200      	movs	r2, #0
 800d466:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800d468:	bf00      	nop
 800d46a:	46bd      	mov	sp, r7
 800d46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d470:	4770      	bx	lr
 800d472:	bf00      	nop
 800d474:	2000189c 	.word	0x2000189c
 800d478:	200018a0 	.word	0x200018a0

0800d47c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800d47c:	b480      	push	{r7}
 800d47e:	b087      	sub	sp, #28
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	460b      	mov	r3, r1
 800d486:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d488:	f3ef 8310 	mrs	r3, PRIMASK
 800d48c:	613b      	str	r3, [r7, #16]
  return(result);
 800d48e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800d490:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d492:	b672      	cpsid	i
}
 800d494:	bf00      	nop
  
  switch(state)
 800d496:	78fb      	ldrb	r3, [r7, #3]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d008      	beq.n	800d4ae <UTIL_LPM_SetOffMode+0x32>
 800d49c:	2b01      	cmp	r3, #1
 800d49e:	d10e      	bne.n	800d4be <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800d4a0:	4b0d      	ldr	r3, [pc, #52]	; (800d4d8 <UTIL_LPM_SetOffMode+0x5c>)
 800d4a2:	681a      	ldr	r2, [r3, #0]
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	4313      	orrs	r3, r2
 800d4a8:	4a0b      	ldr	r2, [pc, #44]	; (800d4d8 <UTIL_LPM_SetOffMode+0x5c>)
 800d4aa:	6013      	str	r3, [r2, #0]
      break;
 800d4ac:	e008      	b.n	800d4c0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	43da      	mvns	r2, r3
 800d4b2:	4b09      	ldr	r3, [pc, #36]	; (800d4d8 <UTIL_LPM_SetOffMode+0x5c>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4013      	ands	r3, r2
 800d4b8:	4a07      	ldr	r2, [pc, #28]	; (800d4d8 <UTIL_LPM_SetOffMode+0x5c>)
 800d4ba:	6013      	str	r3, [r2, #0]
      break;
 800d4bc:	e000      	b.n	800d4c0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800d4be:	bf00      	nop
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f383 8810 	msr	PRIMASK, r3
}
 800d4ca:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800d4cc:	bf00      	nop
 800d4ce:	371c      	adds	r7, #28
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr
 800d4d8:	200018a0 	.word	0x200018a0

0800d4dc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b090      	sub	sp, #64	; 0x40
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800d4e4:	4b73      	ldr	r3, [pc, #460]	; (800d6b4 <UTIL_SEQ_Run+0x1d8>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800d4ea:	4b72      	ldr	r3, [pc, #456]	; (800d6b4 <UTIL_SEQ_Run+0x1d8>)
 800d4ec:	681a      	ldr	r2, [r3, #0]
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	4013      	ands	r3, r2
 800d4f2:	4a70      	ldr	r2, [pc, #448]	; (800d6b4 <UTIL_SEQ_Run+0x1d8>)
 800d4f4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800d4f6:	4b70      	ldr	r3, [pc, #448]	; (800d6b8 <UTIL_SEQ_Run+0x1dc>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800d4fc:	4b6f      	ldr	r3, [pc, #444]	; (800d6bc <UTIL_SEQ_Run+0x1e0>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800d502:	4b6f      	ldr	r3, [pc, #444]	; (800d6c0 <UTIL_SEQ_Run+0x1e4>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800d508:	4b6e      	ldr	r3, [pc, #440]	; (800d6c4 <UTIL_SEQ_Run+0x1e8>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800d50e:	e08d      	b.n	800d62c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800d510:	2300      	movs	r3, #0
 800d512:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800d514:	e002      	b.n	800d51c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800d516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d518:	3301      	adds	r3, #1
 800d51a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800d51c:	4a6a      	ldr	r2, [pc, #424]	; (800d6c8 <UTIL_SEQ_Run+0x1ec>)
 800d51e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d520:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d526:	401a      	ands	r2, r3
 800d528:	4b62      	ldr	r3, [pc, #392]	; (800d6b4 <UTIL_SEQ_Run+0x1d8>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	4013      	ands	r3, r2
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d0f1      	beq.n	800d516 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800d532:	4a65      	ldr	r2, [pc, #404]	; (800d6c8 <UTIL_SEQ_Run+0x1ec>)
 800d534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d536:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d53c:	401a      	ands	r2, r3
 800d53e:	4b5d      	ldr	r3, [pc, #372]	; (800d6b4 <UTIL_SEQ_Run+0x1d8>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	4013      	ands	r3, r2
 800d544:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800d546:	4a60      	ldr	r2, [pc, #384]	; (800d6c8 <UTIL_SEQ_Run+0x1ec>)
 800d548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d54a:	00db      	lsls	r3, r3, #3
 800d54c:	4413      	add	r3, r2
 800d54e:	685a      	ldr	r2, [r3, #4]
 800d550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d552:	4013      	ands	r3, r2
 800d554:	2b00      	cmp	r3, #0
 800d556:	d106      	bne.n	800d566 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800d558:	4a5b      	ldr	r2, [pc, #364]	; (800d6c8 <UTIL_SEQ_Run+0x1ec>)
 800d55a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d55c:	00db      	lsls	r3, r3, #3
 800d55e:	4413      	add	r3, r2
 800d560:	f04f 32ff 	mov.w	r2, #4294967295
 800d564:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800d566:	4a58      	ldr	r2, [pc, #352]	; (800d6c8 <UTIL_SEQ_Run+0x1ec>)
 800d568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d56a:	00db      	lsls	r3, r3, #3
 800d56c:	4413      	add	r3, r2
 800d56e:	685a      	ldr	r2, [r3, #4]
 800d570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d572:	4013      	ands	r3, r2
 800d574:	4618      	mov	r0, r3
 800d576:	f000 f9b3 	bl	800d8e0 <SEQ_BitPosition>
 800d57a:	4603      	mov	r3, r0
 800d57c:	461a      	mov	r2, r3
 800d57e:	4b53      	ldr	r3, [pc, #332]	; (800d6cc <UTIL_SEQ_Run+0x1f0>)
 800d580:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800d582:	4a51      	ldr	r2, [pc, #324]	; (800d6c8 <UTIL_SEQ_Run+0x1ec>)
 800d584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d586:	00db      	lsls	r3, r3, #3
 800d588:	4413      	add	r3, r2
 800d58a:	685a      	ldr	r2, [r3, #4]
 800d58c:	4b4f      	ldr	r3, [pc, #316]	; (800d6cc <UTIL_SEQ_Run+0x1f0>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	2101      	movs	r1, #1
 800d592:	fa01 f303 	lsl.w	r3, r1, r3
 800d596:	43db      	mvns	r3, r3
 800d598:	401a      	ands	r2, r3
 800d59a:	494b      	ldr	r1, [pc, #300]	; (800d6c8 <UTIL_SEQ_Run+0x1ec>)
 800d59c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d59e:	00db      	lsls	r3, r3, #3
 800d5a0:	440b      	add	r3, r1
 800d5a2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5a4:	f3ef 8310 	mrs	r3, PRIMASK
 800d5a8:	61bb      	str	r3, [r7, #24]
  return(result);
 800d5aa:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d5ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800d5ae:	b672      	cpsid	i
}
 800d5b0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800d5b2:	4b46      	ldr	r3, [pc, #280]	; (800d6cc <UTIL_SEQ_Run+0x1f0>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	fa02 f303 	lsl.w	r3, r2, r3
 800d5bc:	43da      	mvns	r2, r3
 800d5be:	4b3e      	ldr	r3, [pc, #248]	; (800d6b8 <UTIL_SEQ_Run+0x1dc>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	4013      	ands	r3, r2
 800d5c4:	4a3c      	ldr	r2, [pc, #240]	; (800d6b8 <UTIL_SEQ_Run+0x1dc>)
 800d5c6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800d5c8:	2302      	movs	r3, #2
 800d5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d5cc:	e013      	b.n	800d5f6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800d5ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5d0:	3b01      	subs	r3, #1
 800d5d2:	4a3d      	ldr	r2, [pc, #244]	; (800d6c8 <UTIL_SEQ_Run+0x1ec>)
 800d5d4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800d5d8:	4b3c      	ldr	r3, [pc, #240]	; (800d6cc <UTIL_SEQ_Run+0x1f0>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	2201      	movs	r2, #1
 800d5de:	fa02 f303 	lsl.w	r3, r2, r3
 800d5e2:	43da      	mvns	r2, r3
 800d5e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5e6:	3b01      	subs	r3, #1
 800d5e8:	400a      	ands	r2, r1
 800d5ea:	4937      	ldr	r1, [pc, #220]	; (800d6c8 <UTIL_SEQ_Run+0x1ec>)
 800d5ec:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800d5f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5f2:	3b01      	subs	r3, #1
 800d5f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d5f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d1e8      	bne.n	800d5ce <UTIL_SEQ_Run+0xf2>
 800d5fc:	6a3b      	ldr	r3, [r7, #32]
 800d5fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	f383 8810 	msr	PRIMASK, r3
}
 800d606:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800d608:	4b30      	ldr	r3, [pc, #192]	; (800d6cc <UTIL_SEQ_Run+0x1f0>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	4a30      	ldr	r2, [pc, #192]	; (800d6d0 <UTIL_SEQ_Run+0x1f4>)
 800d60e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d612:	4798      	blx	r3

    local_taskset = TaskSet;
 800d614:	4b28      	ldr	r3, [pc, #160]	; (800d6b8 <UTIL_SEQ_Run+0x1dc>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800d61a:	4b28      	ldr	r3, [pc, #160]	; (800d6bc <UTIL_SEQ_Run+0x1e0>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800d620:	4b27      	ldr	r3, [pc, #156]	; (800d6c0 <UTIL_SEQ_Run+0x1e4>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800d626:	4b27      	ldr	r3, [pc, #156]	; (800d6c4 <UTIL_SEQ_Run+0x1e8>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800d62c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d630:	401a      	ands	r2, r3
 800d632:	4b20      	ldr	r3, [pc, #128]	; (800d6b4 <UTIL_SEQ_Run+0x1d8>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	4013      	ands	r3, r2
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d005      	beq.n	800d648 <UTIL_SEQ_Run+0x16c>
 800d63c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d640:	4013      	ands	r3, r2
 800d642:	2b00      	cmp	r3, #0
 800d644:	f43f af64 	beq.w	800d510 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800d648:	4b20      	ldr	r3, [pc, #128]	; (800d6cc <UTIL_SEQ_Run+0x1f0>)
 800d64a:	f04f 32ff 	mov.w	r2, #4294967295
 800d64e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800d650:	f000 f938 	bl	800d8c4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d654:	f3ef 8310 	mrs	r3, PRIMASK
 800d658:	613b      	str	r3, [r7, #16]
  return(result);
 800d65a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800d65c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d65e:	b672      	cpsid	i
}
 800d660:	bf00      	nop
  local_taskset = TaskSet;
 800d662:	4b15      	ldr	r3, [pc, #84]	; (800d6b8 <UTIL_SEQ_Run+0x1dc>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800d668:	4b14      	ldr	r3, [pc, #80]	; (800d6bc <UTIL_SEQ_Run+0x1e0>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800d66e:	4b14      	ldr	r3, [pc, #80]	; (800d6c0 <UTIL_SEQ_Run+0x1e4>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800d674:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d678:	401a      	ands	r2, r3
 800d67a:	4b0e      	ldr	r3, [pc, #56]	; (800d6b4 <UTIL_SEQ_Run+0x1d8>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	4013      	ands	r3, r2
 800d680:	2b00      	cmp	r3, #0
 800d682:	d107      	bne.n	800d694 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800d684:	4b0f      	ldr	r3, [pc, #60]	; (800d6c4 <UTIL_SEQ_Run+0x1e8>)
 800d686:	681a      	ldr	r2, [r3, #0]
 800d688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d68a:	4013      	ands	r3, r2
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d101      	bne.n	800d694 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800d690:	f7f3 ffef 	bl	8001672 <UTIL_SEQ_Idle>
 800d694:	69fb      	ldr	r3, [r7, #28]
 800d696:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	f383 8810 	msr	PRIMASK, r3
}
 800d69e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800d6a0:	f000 f917 	bl	800d8d2 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800d6a4:	4a03      	ldr	r2, [pc, #12]	; (800d6b4 <UTIL_SEQ_Run+0x1d8>)
 800d6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a8:	6013      	str	r3, [r2, #0]

  return;
 800d6aa:	bf00      	nop
}
 800d6ac:	3740      	adds	r7, #64	; 0x40
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}
 800d6b2:	bf00      	nop
 800d6b4:	20000034 	.word	0x20000034
 800d6b8:	200018a4 	.word	0x200018a4
 800d6bc:	200018a8 	.word	0x200018a8
 800d6c0:	20000030 	.word	0x20000030
 800d6c4:	200018ac 	.word	0x200018ac
 800d6c8:	20001934 	.word	0x20001934
 800d6cc:	200018b0 	.word	0x200018b0
 800d6d0:	200018b4 	.word	0x200018b4

0800d6d4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b088      	sub	sp, #32
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	60f8      	str	r0, [r7, #12]
 800d6dc:	60b9      	str	r1, [r7, #8]
 800d6de:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6e0:	f3ef 8310 	mrs	r3, PRIMASK
 800d6e4:	617b      	str	r3, [r7, #20]
  return(result);
 800d6e6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800d6e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d6ea:	b672      	cpsid	i
}
 800d6ec:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800d6ee:	68f8      	ldr	r0, [r7, #12]
 800d6f0:	f000 f8f6 	bl	800d8e0 <SEQ_BitPosition>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	4619      	mov	r1, r3
 800d6f8:	4a06      	ldr	r2, [pc, #24]	; (800d714 <UTIL_SEQ_RegTask+0x40>)
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d700:	69fb      	ldr	r3, [r7, #28]
 800d702:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d704:	69bb      	ldr	r3, [r7, #24]
 800d706:	f383 8810 	msr	PRIMASK, r3
}
 800d70a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800d70c:	bf00      	nop
}
 800d70e:	3720      	adds	r7, #32
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}
 800d714:	200018b4 	.word	0x200018b4

0800d718 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800d718:	b480      	push	{r7}
 800d71a:	b087      	sub	sp, #28
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
 800d720:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d722:	f3ef 8310 	mrs	r3, PRIMASK
 800d726:	60fb      	str	r3, [r7, #12]
  return(result);
 800d728:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d72a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d72c:	b672      	cpsid	i
}
 800d72e:	bf00      	nop

  TaskSet |= TaskId_bm;
 800d730:	4b0d      	ldr	r3, [pc, #52]	; (800d768 <UTIL_SEQ_SetTask+0x50>)
 800d732:	681a      	ldr	r2, [r3, #0]
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	4313      	orrs	r3, r2
 800d738:	4a0b      	ldr	r2, [pc, #44]	; (800d768 <UTIL_SEQ_SetTask+0x50>)
 800d73a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800d73c:	4a0b      	ldr	r2, [pc, #44]	; (800d76c <UTIL_SEQ_SetTask+0x54>)
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	431a      	orrs	r2, r3
 800d748:	4908      	ldr	r1, [pc, #32]	; (800d76c <UTIL_SEQ_SetTask+0x54>)
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	f383 8810 	msr	PRIMASK, r3
}
 800d75a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d75c:	bf00      	nop
}
 800d75e:	371c      	adds	r7, #28
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr
 800d768:	200018a4 	.word	0x200018a4
 800d76c:	20001934 	.word	0x20001934

0800d770 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800d770:	b480      	push	{r7}
 800d772:	b087      	sub	sp, #28
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d778:	f3ef 8310 	mrs	r3, PRIMASK
 800d77c:	60fb      	str	r3, [r7, #12]
  return(result);
 800d77e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d780:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d782:	b672      	cpsid	i
}
 800d784:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	43da      	mvns	r2, r3
 800d78a:	4b08      	ldr	r3, [pc, #32]	; (800d7ac <UTIL_SEQ_PauseTask+0x3c>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	4013      	ands	r3, r2
 800d790:	4a06      	ldr	r2, [pc, #24]	; (800d7ac <UTIL_SEQ_PauseTask+0x3c>)
 800d792:	6013      	str	r3, [r2, #0]
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d798:	693b      	ldr	r3, [r7, #16]
 800d79a:	f383 8810 	msr	PRIMASK, r3
}
 800d79e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d7a0:	bf00      	nop
}
 800d7a2:	371c      	adds	r7, #28
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr
 800d7ac:	20000030 	.word	0x20000030

0800d7b0 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b087      	sub	sp, #28
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7b8:	f3ef 8310 	mrs	r3, PRIMASK
 800d7bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800d7be:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d7c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d7c2:	b672      	cpsid	i
}
 800d7c4:	bf00      	nop

  TaskMask |= TaskId_bm;
 800d7c6:	4b09      	ldr	r3, [pc, #36]	; (800d7ec <UTIL_SEQ_ResumeTask+0x3c>)
 800d7c8:	681a      	ldr	r2, [r3, #0]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	4313      	orrs	r3, r2
 800d7ce:	4a07      	ldr	r2, [pc, #28]	; (800d7ec <UTIL_SEQ_ResumeTask+0x3c>)
 800d7d0:	6013      	str	r3, [r2, #0]
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	f383 8810 	msr	PRIMASK, r3
}
 800d7dc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d7de:	bf00      	nop
}
 800d7e0:	371c      	adds	r7, #28
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e8:	4770      	bx	lr
 800d7ea:	bf00      	nop
 800d7ec:	20000030 	.word	0x20000030

0800d7f0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b087      	sub	sp, #28
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7f8:	f3ef 8310 	mrs	r3, PRIMASK
 800d7fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800d7fe:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d800:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d802:	b672      	cpsid	i
}
 800d804:	bf00      	nop

  EvtSet |= EvtId_bm;
 800d806:	4b09      	ldr	r3, [pc, #36]	; (800d82c <UTIL_SEQ_SetEvt+0x3c>)
 800d808:	681a      	ldr	r2, [r3, #0]
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	4313      	orrs	r3, r2
 800d80e:	4a07      	ldr	r2, [pc, #28]	; (800d82c <UTIL_SEQ_SetEvt+0x3c>)
 800d810:	6013      	str	r3, [r2, #0]
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	f383 8810 	msr	PRIMASK, r3
}
 800d81c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d81e:	bf00      	nop
}
 800d820:	371c      	adds	r7, #28
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr
 800d82a:	bf00      	nop
 800d82c:	200018a8 	.word	0x200018a8

0800d830 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b088      	sub	sp, #32
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800d838:	4b1f      	ldr	r3, [pc, #124]	; (800d8b8 <UTIL_SEQ_WaitEvt+0x88>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800d83e:	4b1e      	ldr	r3, [pc, #120]	; (800d8b8 <UTIL_SEQ_WaitEvt+0x88>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d846:	d102      	bne.n	800d84e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800d848:	2300      	movs	r3, #0
 800d84a:	61fb      	str	r3, [r7, #28]
 800d84c:	e005      	b.n	800d85a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800d84e:	4b1a      	ldr	r3, [pc, #104]	; (800d8b8 <UTIL_SEQ_WaitEvt+0x88>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	2201      	movs	r2, #1
 800d854:	fa02 f303 	lsl.w	r3, r2, r3
 800d858:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800d85a:	4b18      	ldr	r3, [pc, #96]	; (800d8bc <UTIL_SEQ_WaitEvt+0x8c>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800d860:	4a16      	ldr	r2, [pc, #88]	; (800d8bc <UTIL_SEQ_WaitEvt+0x8c>)
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800d866:	e003      	b.n	800d870 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800d868:	6879      	ldr	r1, [r7, #4]
 800d86a:	69f8      	ldr	r0, [r7, #28]
 800d86c:	f7f3 ff08 	bl	8001680 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800d870:	4b13      	ldr	r3, [pc, #76]	; (800d8c0 <UTIL_SEQ_WaitEvt+0x90>)
 800d872:	681a      	ldr	r2, [r3, #0]
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	4013      	ands	r3, r2
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d0f5      	beq.n	800d868 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800d87c:	4a0e      	ldr	r2, [pc, #56]	; (800d8b8 <UTIL_SEQ_WaitEvt+0x88>)
 800d87e:	69bb      	ldr	r3, [r7, #24]
 800d880:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d882:	f3ef 8310 	mrs	r3, PRIMASK
 800d886:	60bb      	str	r3, [r7, #8]
  return(result);
 800d888:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d88a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d88c:	b672      	cpsid	i
}
 800d88e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	43da      	mvns	r2, r3
 800d894:	4b0a      	ldr	r3, [pc, #40]	; (800d8c0 <UTIL_SEQ_WaitEvt+0x90>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	4013      	ands	r3, r2
 800d89a:	4a09      	ldr	r2, [pc, #36]	; (800d8c0 <UTIL_SEQ_WaitEvt+0x90>)
 800d89c:	6013      	str	r3, [r2, #0]
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	f383 8810 	msr	PRIMASK, r3
}
 800d8a8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800d8aa:	4a04      	ldr	r2, [pc, #16]	; (800d8bc <UTIL_SEQ_WaitEvt+0x8c>)
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	6013      	str	r3, [r2, #0]
  return;
 800d8b0:	bf00      	nop
}
 800d8b2:	3720      	adds	r7, #32
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	200018b0 	.word	0x200018b0
 800d8bc:	200018ac 	.word	0x200018ac
 800d8c0:	200018a8 	.word	0x200018a8

0800d8c4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800d8c8:	bf00      	nop
}
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr

0800d8d2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800d8d2:	b480      	push	{r7}
 800d8d4:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800d8d6:	bf00      	nop
}
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr

0800d8e0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b085      	sub	sp, #20
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	0c1b      	lsrs	r3, r3, #16
 800d8f4:	041b      	lsls	r3, r3, #16
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d104      	bne.n	800d904 <SEQ_BitPosition+0x24>
 800d8fa:	2310      	movs	r3, #16
 800d8fc:	73fb      	strb	r3, [r7, #15]
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	041b      	lsls	r3, r3, #16
 800d902:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d105      	bne.n	800d91a <SEQ_BitPosition+0x3a>
 800d90e:	7bfb      	ldrb	r3, [r7, #15]
 800d910:	3308      	adds	r3, #8
 800d912:	73fb      	strb	r3, [r7, #15]
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	021b      	lsls	r3, r3, #8
 800d918:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d920:	2b00      	cmp	r3, #0
 800d922:	d105      	bne.n	800d930 <SEQ_BitPosition+0x50>
 800d924:	7bfb      	ldrb	r3, [r7, #15]
 800d926:	3304      	adds	r3, #4
 800d928:	73fb      	strb	r3, [r7, #15]
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	011b      	lsls	r3, r3, #4
 800d92e:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	0f1b      	lsrs	r3, r3, #28
 800d934:	4a07      	ldr	r2, [pc, #28]	; (800d954 <SEQ_BitPosition+0x74>)
 800d936:	5cd2      	ldrb	r2, [r2, r3]
 800d938:	7bfb      	ldrb	r3, [r7, #15]
 800d93a:	4413      	add	r3, r2
 800d93c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800d93e:	7bfb      	ldrb	r3, [r7, #15]
 800d940:	f1c3 031f 	rsb	r3, r3, #31
 800d944:	b2db      	uxtb	r3, r3
}
 800d946:	4618      	mov	r0, r3
 800d948:	3714      	adds	r7, #20
 800d94a:	46bd      	mov	sp, r7
 800d94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d950:	4770      	bx	lr
 800d952:	bf00      	nop
 800d954:	080101b8 	.word	0x080101b8

0800d958 <std>:
 800d958:	2300      	movs	r3, #0
 800d95a:	b510      	push	{r4, lr}
 800d95c:	4604      	mov	r4, r0
 800d95e:	e9c0 3300 	strd	r3, r3, [r0]
 800d962:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d966:	6083      	str	r3, [r0, #8]
 800d968:	8181      	strh	r1, [r0, #12]
 800d96a:	6643      	str	r3, [r0, #100]	; 0x64
 800d96c:	81c2      	strh	r2, [r0, #14]
 800d96e:	6183      	str	r3, [r0, #24]
 800d970:	4619      	mov	r1, r3
 800d972:	2208      	movs	r2, #8
 800d974:	305c      	adds	r0, #92	; 0x5c
 800d976:	f000 f9ff 	bl	800dd78 <memset>
 800d97a:	4b0d      	ldr	r3, [pc, #52]	; (800d9b0 <std+0x58>)
 800d97c:	6263      	str	r3, [r4, #36]	; 0x24
 800d97e:	4b0d      	ldr	r3, [pc, #52]	; (800d9b4 <std+0x5c>)
 800d980:	62a3      	str	r3, [r4, #40]	; 0x28
 800d982:	4b0d      	ldr	r3, [pc, #52]	; (800d9b8 <std+0x60>)
 800d984:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d986:	4b0d      	ldr	r3, [pc, #52]	; (800d9bc <std+0x64>)
 800d988:	6323      	str	r3, [r4, #48]	; 0x30
 800d98a:	4b0d      	ldr	r3, [pc, #52]	; (800d9c0 <std+0x68>)
 800d98c:	6224      	str	r4, [r4, #32]
 800d98e:	429c      	cmp	r4, r3
 800d990:	d006      	beq.n	800d9a0 <std+0x48>
 800d992:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d996:	4294      	cmp	r4, r2
 800d998:	d002      	beq.n	800d9a0 <std+0x48>
 800d99a:	33d0      	adds	r3, #208	; 0xd0
 800d99c:	429c      	cmp	r4, r3
 800d99e:	d105      	bne.n	800d9ac <std+0x54>
 800d9a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d9a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9a8:	f000 ba76 	b.w	800de98 <__retarget_lock_init_recursive>
 800d9ac:	bd10      	pop	{r4, pc}
 800d9ae:	bf00      	nop
 800d9b0:	0800dbc9 	.word	0x0800dbc9
 800d9b4:	0800dbeb 	.word	0x0800dbeb
 800d9b8:	0800dc23 	.word	0x0800dc23
 800d9bc:	0800dc47 	.word	0x0800dc47
 800d9c0:	20001944 	.word	0x20001944

0800d9c4 <stdio_exit_handler>:
 800d9c4:	4a02      	ldr	r2, [pc, #8]	; (800d9d0 <stdio_exit_handler+0xc>)
 800d9c6:	4903      	ldr	r1, [pc, #12]	; (800d9d4 <stdio_exit_handler+0x10>)
 800d9c8:	4803      	ldr	r0, [pc, #12]	; (800d9d8 <stdio_exit_handler+0x14>)
 800d9ca:	f000 b869 	b.w	800daa0 <_fwalk_sglue>
 800d9ce:	bf00      	nop
 800d9d0:	20000038 	.word	0x20000038
 800d9d4:	0800e761 	.word	0x0800e761
 800d9d8:	20000044 	.word	0x20000044

0800d9dc <cleanup_stdio>:
 800d9dc:	6841      	ldr	r1, [r0, #4]
 800d9de:	4b0c      	ldr	r3, [pc, #48]	; (800da10 <cleanup_stdio+0x34>)
 800d9e0:	4299      	cmp	r1, r3
 800d9e2:	b510      	push	{r4, lr}
 800d9e4:	4604      	mov	r4, r0
 800d9e6:	d001      	beq.n	800d9ec <cleanup_stdio+0x10>
 800d9e8:	f000 feba 	bl	800e760 <_fflush_r>
 800d9ec:	68a1      	ldr	r1, [r4, #8]
 800d9ee:	4b09      	ldr	r3, [pc, #36]	; (800da14 <cleanup_stdio+0x38>)
 800d9f0:	4299      	cmp	r1, r3
 800d9f2:	d002      	beq.n	800d9fa <cleanup_stdio+0x1e>
 800d9f4:	4620      	mov	r0, r4
 800d9f6:	f000 feb3 	bl	800e760 <_fflush_r>
 800d9fa:	68e1      	ldr	r1, [r4, #12]
 800d9fc:	4b06      	ldr	r3, [pc, #24]	; (800da18 <cleanup_stdio+0x3c>)
 800d9fe:	4299      	cmp	r1, r3
 800da00:	d004      	beq.n	800da0c <cleanup_stdio+0x30>
 800da02:	4620      	mov	r0, r4
 800da04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da08:	f000 beaa 	b.w	800e760 <_fflush_r>
 800da0c:	bd10      	pop	{r4, pc}
 800da0e:	bf00      	nop
 800da10:	20001944 	.word	0x20001944
 800da14:	200019ac 	.word	0x200019ac
 800da18:	20001a14 	.word	0x20001a14

0800da1c <global_stdio_init.part.0>:
 800da1c:	b510      	push	{r4, lr}
 800da1e:	4b0b      	ldr	r3, [pc, #44]	; (800da4c <global_stdio_init.part.0+0x30>)
 800da20:	4c0b      	ldr	r4, [pc, #44]	; (800da50 <global_stdio_init.part.0+0x34>)
 800da22:	4a0c      	ldr	r2, [pc, #48]	; (800da54 <global_stdio_init.part.0+0x38>)
 800da24:	601a      	str	r2, [r3, #0]
 800da26:	4620      	mov	r0, r4
 800da28:	2200      	movs	r2, #0
 800da2a:	2104      	movs	r1, #4
 800da2c:	f7ff ff94 	bl	800d958 <std>
 800da30:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800da34:	2201      	movs	r2, #1
 800da36:	2109      	movs	r1, #9
 800da38:	f7ff ff8e 	bl	800d958 <std>
 800da3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800da40:	2202      	movs	r2, #2
 800da42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da46:	2112      	movs	r1, #18
 800da48:	f7ff bf86 	b.w	800d958 <std>
 800da4c:	20001a7c 	.word	0x20001a7c
 800da50:	20001944 	.word	0x20001944
 800da54:	0800d9c5 	.word	0x0800d9c5

0800da58 <__sfp_lock_acquire>:
 800da58:	4801      	ldr	r0, [pc, #4]	; (800da60 <__sfp_lock_acquire+0x8>)
 800da5a:	f000 ba1e 	b.w	800de9a <__retarget_lock_acquire_recursive>
 800da5e:	bf00      	nop
 800da60:	20001a85 	.word	0x20001a85

0800da64 <__sfp_lock_release>:
 800da64:	4801      	ldr	r0, [pc, #4]	; (800da6c <__sfp_lock_release+0x8>)
 800da66:	f000 ba19 	b.w	800de9c <__retarget_lock_release_recursive>
 800da6a:	bf00      	nop
 800da6c:	20001a85 	.word	0x20001a85

0800da70 <__sinit>:
 800da70:	b510      	push	{r4, lr}
 800da72:	4604      	mov	r4, r0
 800da74:	f7ff fff0 	bl	800da58 <__sfp_lock_acquire>
 800da78:	6a23      	ldr	r3, [r4, #32]
 800da7a:	b11b      	cbz	r3, 800da84 <__sinit+0x14>
 800da7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da80:	f7ff bff0 	b.w	800da64 <__sfp_lock_release>
 800da84:	4b04      	ldr	r3, [pc, #16]	; (800da98 <__sinit+0x28>)
 800da86:	6223      	str	r3, [r4, #32]
 800da88:	4b04      	ldr	r3, [pc, #16]	; (800da9c <__sinit+0x2c>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d1f5      	bne.n	800da7c <__sinit+0xc>
 800da90:	f7ff ffc4 	bl	800da1c <global_stdio_init.part.0>
 800da94:	e7f2      	b.n	800da7c <__sinit+0xc>
 800da96:	bf00      	nop
 800da98:	0800d9dd 	.word	0x0800d9dd
 800da9c:	20001a7c 	.word	0x20001a7c

0800daa0 <_fwalk_sglue>:
 800daa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800daa4:	4607      	mov	r7, r0
 800daa6:	4688      	mov	r8, r1
 800daa8:	4614      	mov	r4, r2
 800daaa:	2600      	movs	r6, #0
 800daac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dab0:	f1b9 0901 	subs.w	r9, r9, #1
 800dab4:	d505      	bpl.n	800dac2 <_fwalk_sglue+0x22>
 800dab6:	6824      	ldr	r4, [r4, #0]
 800dab8:	2c00      	cmp	r4, #0
 800daba:	d1f7      	bne.n	800daac <_fwalk_sglue+0xc>
 800dabc:	4630      	mov	r0, r6
 800dabe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dac2:	89ab      	ldrh	r3, [r5, #12]
 800dac4:	2b01      	cmp	r3, #1
 800dac6:	d907      	bls.n	800dad8 <_fwalk_sglue+0x38>
 800dac8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dacc:	3301      	adds	r3, #1
 800dace:	d003      	beq.n	800dad8 <_fwalk_sglue+0x38>
 800dad0:	4629      	mov	r1, r5
 800dad2:	4638      	mov	r0, r7
 800dad4:	47c0      	blx	r8
 800dad6:	4306      	orrs	r6, r0
 800dad8:	3568      	adds	r5, #104	; 0x68
 800dada:	e7e9      	b.n	800dab0 <_fwalk_sglue+0x10>

0800dadc <iprintf>:
 800dadc:	b40f      	push	{r0, r1, r2, r3}
 800dade:	b507      	push	{r0, r1, r2, lr}
 800dae0:	4906      	ldr	r1, [pc, #24]	; (800dafc <iprintf+0x20>)
 800dae2:	ab04      	add	r3, sp, #16
 800dae4:	6808      	ldr	r0, [r1, #0]
 800dae6:	f853 2b04 	ldr.w	r2, [r3], #4
 800daea:	6881      	ldr	r1, [r0, #8]
 800daec:	9301      	str	r3, [sp, #4]
 800daee:	f000 fb07 	bl	800e100 <_vfiprintf_r>
 800daf2:	b003      	add	sp, #12
 800daf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800daf8:	b004      	add	sp, #16
 800dafa:	4770      	bx	lr
 800dafc:	20000090 	.word	0x20000090

0800db00 <putchar>:
 800db00:	4b02      	ldr	r3, [pc, #8]	; (800db0c <putchar+0xc>)
 800db02:	4601      	mov	r1, r0
 800db04:	6818      	ldr	r0, [r3, #0]
 800db06:	6882      	ldr	r2, [r0, #8]
 800db08:	f000 beb4 	b.w	800e874 <_putc_r>
 800db0c:	20000090 	.word	0x20000090

0800db10 <_puts_r>:
 800db10:	6a03      	ldr	r3, [r0, #32]
 800db12:	b570      	push	{r4, r5, r6, lr}
 800db14:	6884      	ldr	r4, [r0, #8]
 800db16:	4605      	mov	r5, r0
 800db18:	460e      	mov	r6, r1
 800db1a:	b90b      	cbnz	r3, 800db20 <_puts_r+0x10>
 800db1c:	f7ff ffa8 	bl	800da70 <__sinit>
 800db20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db22:	07db      	lsls	r3, r3, #31
 800db24:	d405      	bmi.n	800db32 <_puts_r+0x22>
 800db26:	89a3      	ldrh	r3, [r4, #12]
 800db28:	0598      	lsls	r0, r3, #22
 800db2a:	d402      	bmi.n	800db32 <_puts_r+0x22>
 800db2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db2e:	f000 f9b4 	bl	800de9a <__retarget_lock_acquire_recursive>
 800db32:	89a3      	ldrh	r3, [r4, #12]
 800db34:	0719      	lsls	r1, r3, #28
 800db36:	d513      	bpl.n	800db60 <_puts_r+0x50>
 800db38:	6923      	ldr	r3, [r4, #16]
 800db3a:	b18b      	cbz	r3, 800db60 <_puts_r+0x50>
 800db3c:	3e01      	subs	r6, #1
 800db3e:	68a3      	ldr	r3, [r4, #8]
 800db40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800db44:	3b01      	subs	r3, #1
 800db46:	60a3      	str	r3, [r4, #8]
 800db48:	b9e9      	cbnz	r1, 800db86 <_puts_r+0x76>
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	da2e      	bge.n	800dbac <_puts_r+0x9c>
 800db4e:	4622      	mov	r2, r4
 800db50:	210a      	movs	r1, #10
 800db52:	4628      	mov	r0, r5
 800db54:	f000 f87b 	bl	800dc4e <__swbuf_r>
 800db58:	3001      	adds	r0, #1
 800db5a:	d007      	beq.n	800db6c <_puts_r+0x5c>
 800db5c:	250a      	movs	r5, #10
 800db5e:	e007      	b.n	800db70 <_puts_r+0x60>
 800db60:	4621      	mov	r1, r4
 800db62:	4628      	mov	r0, r5
 800db64:	f000 f8b0 	bl	800dcc8 <__swsetup_r>
 800db68:	2800      	cmp	r0, #0
 800db6a:	d0e7      	beq.n	800db3c <_puts_r+0x2c>
 800db6c:	f04f 35ff 	mov.w	r5, #4294967295
 800db70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db72:	07da      	lsls	r2, r3, #31
 800db74:	d405      	bmi.n	800db82 <_puts_r+0x72>
 800db76:	89a3      	ldrh	r3, [r4, #12]
 800db78:	059b      	lsls	r3, r3, #22
 800db7a:	d402      	bmi.n	800db82 <_puts_r+0x72>
 800db7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db7e:	f000 f98d 	bl	800de9c <__retarget_lock_release_recursive>
 800db82:	4628      	mov	r0, r5
 800db84:	bd70      	pop	{r4, r5, r6, pc}
 800db86:	2b00      	cmp	r3, #0
 800db88:	da04      	bge.n	800db94 <_puts_r+0x84>
 800db8a:	69a2      	ldr	r2, [r4, #24]
 800db8c:	429a      	cmp	r2, r3
 800db8e:	dc06      	bgt.n	800db9e <_puts_r+0x8e>
 800db90:	290a      	cmp	r1, #10
 800db92:	d004      	beq.n	800db9e <_puts_r+0x8e>
 800db94:	6823      	ldr	r3, [r4, #0]
 800db96:	1c5a      	adds	r2, r3, #1
 800db98:	6022      	str	r2, [r4, #0]
 800db9a:	7019      	strb	r1, [r3, #0]
 800db9c:	e7cf      	b.n	800db3e <_puts_r+0x2e>
 800db9e:	4622      	mov	r2, r4
 800dba0:	4628      	mov	r0, r5
 800dba2:	f000 f854 	bl	800dc4e <__swbuf_r>
 800dba6:	3001      	adds	r0, #1
 800dba8:	d1c9      	bne.n	800db3e <_puts_r+0x2e>
 800dbaa:	e7df      	b.n	800db6c <_puts_r+0x5c>
 800dbac:	6823      	ldr	r3, [r4, #0]
 800dbae:	250a      	movs	r5, #10
 800dbb0:	1c5a      	adds	r2, r3, #1
 800dbb2:	6022      	str	r2, [r4, #0]
 800dbb4:	701d      	strb	r5, [r3, #0]
 800dbb6:	e7db      	b.n	800db70 <_puts_r+0x60>

0800dbb8 <puts>:
 800dbb8:	4b02      	ldr	r3, [pc, #8]	; (800dbc4 <puts+0xc>)
 800dbba:	4601      	mov	r1, r0
 800dbbc:	6818      	ldr	r0, [r3, #0]
 800dbbe:	f7ff bfa7 	b.w	800db10 <_puts_r>
 800dbc2:	bf00      	nop
 800dbc4:	20000090 	.word	0x20000090

0800dbc8 <__sread>:
 800dbc8:	b510      	push	{r4, lr}
 800dbca:	460c      	mov	r4, r1
 800dbcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbd0:	f000 f914 	bl	800ddfc <_read_r>
 800dbd4:	2800      	cmp	r0, #0
 800dbd6:	bfab      	itete	ge
 800dbd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dbda:	89a3      	ldrhlt	r3, [r4, #12]
 800dbdc:	181b      	addge	r3, r3, r0
 800dbde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dbe2:	bfac      	ite	ge
 800dbe4:	6563      	strge	r3, [r4, #84]	; 0x54
 800dbe6:	81a3      	strhlt	r3, [r4, #12]
 800dbe8:	bd10      	pop	{r4, pc}

0800dbea <__swrite>:
 800dbea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbee:	461f      	mov	r7, r3
 800dbf0:	898b      	ldrh	r3, [r1, #12]
 800dbf2:	05db      	lsls	r3, r3, #23
 800dbf4:	4605      	mov	r5, r0
 800dbf6:	460c      	mov	r4, r1
 800dbf8:	4616      	mov	r6, r2
 800dbfa:	d505      	bpl.n	800dc08 <__swrite+0x1e>
 800dbfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc00:	2302      	movs	r3, #2
 800dc02:	2200      	movs	r2, #0
 800dc04:	f000 f8e8 	bl	800ddd8 <_lseek_r>
 800dc08:	89a3      	ldrh	r3, [r4, #12]
 800dc0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dc12:	81a3      	strh	r3, [r4, #12]
 800dc14:	4632      	mov	r2, r6
 800dc16:	463b      	mov	r3, r7
 800dc18:	4628      	mov	r0, r5
 800dc1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc1e:	f000 b8ff 	b.w	800de20 <_write_r>

0800dc22 <__sseek>:
 800dc22:	b510      	push	{r4, lr}
 800dc24:	460c      	mov	r4, r1
 800dc26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc2a:	f000 f8d5 	bl	800ddd8 <_lseek_r>
 800dc2e:	1c43      	adds	r3, r0, #1
 800dc30:	89a3      	ldrh	r3, [r4, #12]
 800dc32:	bf15      	itete	ne
 800dc34:	6560      	strne	r0, [r4, #84]	; 0x54
 800dc36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dc3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dc3e:	81a3      	strheq	r3, [r4, #12]
 800dc40:	bf18      	it	ne
 800dc42:	81a3      	strhne	r3, [r4, #12]
 800dc44:	bd10      	pop	{r4, pc}

0800dc46 <__sclose>:
 800dc46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc4a:	f000 b8b5 	b.w	800ddb8 <_close_r>

0800dc4e <__swbuf_r>:
 800dc4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc50:	460e      	mov	r6, r1
 800dc52:	4614      	mov	r4, r2
 800dc54:	4605      	mov	r5, r0
 800dc56:	b118      	cbz	r0, 800dc60 <__swbuf_r+0x12>
 800dc58:	6a03      	ldr	r3, [r0, #32]
 800dc5a:	b90b      	cbnz	r3, 800dc60 <__swbuf_r+0x12>
 800dc5c:	f7ff ff08 	bl	800da70 <__sinit>
 800dc60:	69a3      	ldr	r3, [r4, #24]
 800dc62:	60a3      	str	r3, [r4, #8]
 800dc64:	89a3      	ldrh	r3, [r4, #12]
 800dc66:	071a      	lsls	r2, r3, #28
 800dc68:	d525      	bpl.n	800dcb6 <__swbuf_r+0x68>
 800dc6a:	6923      	ldr	r3, [r4, #16]
 800dc6c:	b31b      	cbz	r3, 800dcb6 <__swbuf_r+0x68>
 800dc6e:	6823      	ldr	r3, [r4, #0]
 800dc70:	6922      	ldr	r2, [r4, #16]
 800dc72:	1a98      	subs	r0, r3, r2
 800dc74:	6963      	ldr	r3, [r4, #20]
 800dc76:	b2f6      	uxtb	r6, r6
 800dc78:	4283      	cmp	r3, r0
 800dc7a:	4637      	mov	r7, r6
 800dc7c:	dc04      	bgt.n	800dc88 <__swbuf_r+0x3a>
 800dc7e:	4621      	mov	r1, r4
 800dc80:	4628      	mov	r0, r5
 800dc82:	f000 fd6d 	bl	800e760 <_fflush_r>
 800dc86:	b9e0      	cbnz	r0, 800dcc2 <__swbuf_r+0x74>
 800dc88:	68a3      	ldr	r3, [r4, #8]
 800dc8a:	3b01      	subs	r3, #1
 800dc8c:	60a3      	str	r3, [r4, #8]
 800dc8e:	6823      	ldr	r3, [r4, #0]
 800dc90:	1c5a      	adds	r2, r3, #1
 800dc92:	6022      	str	r2, [r4, #0]
 800dc94:	701e      	strb	r6, [r3, #0]
 800dc96:	6962      	ldr	r2, [r4, #20]
 800dc98:	1c43      	adds	r3, r0, #1
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d004      	beq.n	800dca8 <__swbuf_r+0x5a>
 800dc9e:	89a3      	ldrh	r3, [r4, #12]
 800dca0:	07db      	lsls	r3, r3, #31
 800dca2:	d506      	bpl.n	800dcb2 <__swbuf_r+0x64>
 800dca4:	2e0a      	cmp	r6, #10
 800dca6:	d104      	bne.n	800dcb2 <__swbuf_r+0x64>
 800dca8:	4621      	mov	r1, r4
 800dcaa:	4628      	mov	r0, r5
 800dcac:	f000 fd58 	bl	800e760 <_fflush_r>
 800dcb0:	b938      	cbnz	r0, 800dcc2 <__swbuf_r+0x74>
 800dcb2:	4638      	mov	r0, r7
 800dcb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcb6:	4621      	mov	r1, r4
 800dcb8:	4628      	mov	r0, r5
 800dcba:	f000 f805 	bl	800dcc8 <__swsetup_r>
 800dcbe:	2800      	cmp	r0, #0
 800dcc0:	d0d5      	beq.n	800dc6e <__swbuf_r+0x20>
 800dcc2:	f04f 37ff 	mov.w	r7, #4294967295
 800dcc6:	e7f4      	b.n	800dcb2 <__swbuf_r+0x64>

0800dcc8 <__swsetup_r>:
 800dcc8:	b538      	push	{r3, r4, r5, lr}
 800dcca:	4b2a      	ldr	r3, [pc, #168]	; (800dd74 <__swsetup_r+0xac>)
 800dccc:	4605      	mov	r5, r0
 800dcce:	6818      	ldr	r0, [r3, #0]
 800dcd0:	460c      	mov	r4, r1
 800dcd2:	b118      	cbz	r0, 800dcdc <__swsetup_r+0x14>
 800dcd4:	6a03      	ldr	r3, [r0, #32]
 800dcd6:	b90b      	cbnz	r3, 800dcdc <__swsetup_r+0x14>
 800dcd8:	f7ff feca 	bl	800da70 <__sinit>
 800dcdc:	89a3      	ldrh	r3, [r4, #12]
 800dcde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dce2:	0718      	lsls	r0, r3, #28
 800dce4:	d422      	bmi.n	800dd2c <__swsetup_r+0x64>
 800dce6:	06d9      	lsls	r1, r3, #27
 800dce8:	d407      	bmi.n	800dcfa <__swsetup_r+0x32>
 800dcea:	2309      	movs	r3, #9
 800dcec:	602b      	str	r3, [r5, #0]
 800dcee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dcf2:	81a3      	strh	r3, [r4, #12]
 800dcf4:	f04f 30ff 	mov.w	r0, #4294967295
 800dcf8:	e034      	b.n	800dd64 <__swsetup_r+0x9c>
 800dcfa:	0758      	lsls	r0, r3, #29
 800dcfc:	d512      	bpl.n	800dd24 <__swsetup_r+0x5c>
 800dcfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd00:	b141      	cbz	r1, 800dd14 <__swsetup_r+0x4c>
 800dd02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd06:	4299      	cmp	r1, r3
 800dd08:	d002      	beq.n	800dd10 <__swsetup_r+0x48>
 800dd0a:	4628      	mov	r0, r5
 800dd0c:	f000 f8d6 	bl	800debc <_free_r>
 800dd10:	2300      	movs	r3, #0
 800dd12:	6363      	str	r3, [r4, #52]	; 0x34
 800dd14:	89a3      	ldrh	r3, [r4, #12]
 800dd16:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dd1a:	81a3      	strh	r3, [r4, #12]
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	6063      	str	r3, [r4, #4]
 800dd20:	6923      	ldr	r3, [r4, #16]
 800dd22:	6023      	str	r3, [r4, #0]
 800dd24:	89a3      	ldrh	r3, [r4, #12]
 800dd26:	f043 0308 	orr.w	r3, r3, #8
 800dd2a:	81a3      	strh	r3, [r4, #12]
 800dd2c:	6923      	ldr	r3, [r4, #16]
 800dd2e:	b94b      	cbnz	r3, 800dd44 <__swsetup_r+0x7c>
 800dd30:	89a3      	ldrh	r3, [r4, #12]
 800dd32:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dd36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd3a:	d003      	beq.n	800dd44 <__swsetup_r+0x7c>
 800dd3c:	4621      	mov	r1, r4
 800dd3e:	4628      	mov	r0, r5
 800dd40:	f000 fd5c 	bl	800e7fc <__smakebuf_r>
 800dd44:	89a0      	ldrh	r0, [r4, #12]
 800dd46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd4a:	f010 0301 	ands.w	r3, r0, #1
 800dd4e:	d00a      	beq.n	800dd66 <__swsetup_r+0x9e>
 800dd50:	2300      	movs	r3, #0
 800dd52:	60a3      	str	r3, [r4, #8]
 800dd54:	6963      	ldr	r3, [r4, #20]
 800dd56:	425b      	negs	r3, r3
 800dd58:	61a3      	str	r3, [r4, #24]
 800dd5a:	6923      	ldr	r3, [r4, #16]
 800dd5c:	b943      	cbnz	r3, 800dd70 <__swsetup_r+0xa8>
 800dd5e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dd62:	d1c4      	bne.n	800dcee <__swsetup_r+0x26>
 800dd64:	bd38      	pop	{r3, r4, r5, pc}
 800dd66:	0781      	lsls	r1, r0, #30
 800dd68:	bf58      	it	pl
 800dd6a:	6963      	ldrpl	r3, [r4, #20]
 800dd6c:	60a3      	str	r3, [r4, #8]
 800dd6e:	e7f4      	b.n	800dd5a <__swsetup_r+0x92>
 800dd70:	2000      	movs	r0, #0
 800dd72:	e7f7      	b.n	800dd64 <__swsetup_r+0x9c>
 800dd74:	20000090 	.word	0x20000090

0800dd78 <memset>:
 800dd78:	4402      	add	r2, r0
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	d100      	bne.n	800dd82 <memset+0xa>
 800dd80:	4770      	bx	lr
 800dd82:	f803 1b01 	strb.w	r1, [r3], #1
 800dd86:	e7f9      	b.n	800dd7c <memset+0x4>

0800dd88 <strrchr>:
 800dd88:	b513      	push	{r0, r1, r4, lr}
 800dd8a:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800dd8e:	4603      	mov	r3, r0
 800dd90:	d110      	bne.n	800ddb4 <strrchr+0x2c>
 800dd92:	b002      	add	sp, #8
 800dd94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd98:	f000 bda0 	b.w	800e8dc <strchr>
 800dd9c:	1c43      	adds	r3, r0, #1
 800dd9e:	4604      	mov	r4, r0
 800dda0:	4618      	mov	r0, r3
 800dda2:	9101      	str	r1, [sp, #4]
 800dda4:	f000 fd9a 	bl	800e8dc <strchr>
 800dda8:	9901      	ldr	r1, [sp, #4]
 800ddaa:	2800      	cmp	r0, #0
 800ddac:	d1f6      	bne.n	800dd9c <strrchr+0x14>
 800ddae:	4620      	mov	r0, r4
 800ddb0:	b002      	add	sp, #8
 800ddb2:	bd10      	pop	{r4, pc}
 800ddb4:	2400      	movs	r4, #0
 800ddb6:	e7f3      	b.n	800dda0 <strrchr+0x18>

0800ddb8 <_close_r>:
 800ddb8:	b538      	push	{r3, r4, r5, lr}
 800ddba:	4d06      	ldr	r5, [pc, #24]	; (800ddd4 <_close_r+0x1c>)
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	4604      	mov	r4, r0
 800ddc0:	4608      	mov	r0, r1
 800ddc2:	602b      	str	r3, [r5, #0]
 800ddc4:	f7f5 fb53 	bl	800346e <_close>
 800ddc8:	1c43      	adds	r3, r0, #1
 800ddca:	d102      	bne.n	800ddd2 <_close_r+0x1a>
 800ddcc:	682b      	ldr	r3, [r5, #0]
 800ddce:	b103      	cbz	r3, 800ddd2 <_close_r+0x1a>
 800ddd0:	6023      	str	r3, [r4, #0]
 800ddd2:	bd38      	pop	{r3, r4, r5, pc}
 800ddd4:	20001a80 	.word	0x20001a80

0800ddd8 <_lseek_r>:
 800ddd8:	b538      	push	{r3, r4, r5, lr}
 800ddda:	4d07      	ldr	r5, [pc, #28]	; (800ddf8 <_lseek_r+0x20>)
 800dddc:	4604      	mov	r4, r0
 800ddde:	4608      	mov	r0, r1
 800dde0:	4611      	mov	r1, r2
 800dde2:	2200      	movs	r2, #0
 800dde4:	602a      	str	r2, [r5, #0]
 800dde6:	461a      	mov	r2, r3
 800dde8:	f7f5 fb68 	bl	80034bc <_lseek>
 800ddec:	1c43      	adds	r3, r0, #1
 800ddee:	d102      	bne.n	800ddf6 <_lseek_r+0x1e>
 800ddf0:	682b      	ldr	r3, [r5, #0]
 800ddf2:	b103      	cbz	r3, 800ddf6 <_lseek_r+0x1e>
 800ddf4:	6023      	str	r3, [r4, #0]
 800ddf6:	bd38      	pop	{r3, r4, r5, pc}
 800ddf8:	20001a80 	.word	0x20001a80

0800ddfc <_read_r>:
 800ddfc:	b538      	push	{r3, r4, r5, lr}
 800ddfe:	4d07      	ldr	r5, [pc, #28]	; (800de1c <_read_r+0x20>)
 800de00:	4604      	mov	r4, r0
 800de02:	4608      	mov	r0, r1
 800de04:	4611      	mov	r1, r2
 800de06:	2200      	movs	r2, #0
 800de08:	602a      	str	r2, [r5, #0]
 800de0a:	461a      	mov	r2, r3
 800de0c:	f7f5 fb12 	bl	8003434 <_read>
 800de10:	1c43      	adds	r3, r0, #1
 800de12:	d102      	bne.n	800de1a <_read_r+0x1e>
 800de14:	682b      	ldr	r3, [r5, #0]
 800de16:	b103      	cbz	r3, 800de1a <_read_r+0x1e>
 800de18:	6023      	str	r3, [r4, #0]
 800de1a:	bd38      	pop	{r3, r4, r5, pc}
 800de1c:	20001a80 	.word	0x20001a80

0800de20 <_write_r>:
 800de20:	b538      	push	{r3, r4, r5, lr}
 800de22:	4d07      	ldr	r5, [pc, #28]	; (800de40 <_write_r+0x20>)
 800de24:	4604      	mov	r4, r0
 800de26:	4608      	mov	r0, r1
 800de28:	4611      	mov	r1, r2
 800de2a:	2200      	movs	r2, #0
 800de2c:	602a      	str	r2, [r5, #0]
 800de2e:	461a      	mov	r2, r3
 800de30:	f7fc ffda 	bl	800ade8 <_write>
 800de34:	1c43      	adds	r3, r0, #1
 800de36:	d102      	bne.n	800de3e <_write_r+0x1e>
 800de38:	682b      	ldr	r3, [r5, #0]
 800de3a:	b103      	cbz	r3, 800de3e <_write_r+0x1e>
 800de3c:	6023      	str	r3, [r4, #0]
 800de3e:	bd38      	pop	{r3, r4, r5, pc}
 800de40:	20001a80 	.word	0x20001a80

0800de44 <__errno>:
 800de44:	4b01      	ldr	r3, [pc, #4]	; (800de4c <__errno+0x8>)
 800de46:	6818      	ldr	r0, [r3, #0]
 800de48:	4770      	bx	lr
 800de4a:	bf00      	nop
 800de4c:	20000090 	.word	0x20000090

0800de50 <__libc_init_array>:
 800de50:	b570      	push	{r4, r5, r6, lr}
 800de52:	4d0d      	ldr	r5, [pc, #52]	; (800de88 <__libc_init_array+0x38>)
 800de54:	4c0d      	ldr	r4, [pc, #52]	; (800de8c <__libc_init_array+0x3c>)
 800de56:	1b64      	subs	r4, r4, r5
 800de58:	10a4      	asrs	r4, r4, #2
 800de5a:	2600      	movs	r6, #0
 800de5c:	42a6      	cmp	r6, r4
 800de5e:	d109      	bne.n	800de74 <__libc_init_array+0x24>
 800de60:	4d0b      	ldr	r5, [pc, #44]	; (800de90 <__libc_init_array+0x40>)
 800de62:	4c0c      	ldr	r4, [pc, #48]	; (800de94 <__libc_init_array+0x44>)
 800de64:	f000 fd7a 	bl	800e95c <_init>
 800de68:	1b64      	subs	r4, r4, r5
 800de6a:	10a4      	asrs	r4, r4, #2
 800de6c:	2600      	movs	r6, #0
 800de6e:	42a6      	cmp	r6, r4
 800de70:	d105      	bne.n	800de7e <__libc_init_array+0x2e>
 800de72:	bd70      	pop	{r4, r5, r6, pc}
 800de74:	f855 3b04 	ldr.w	r3, [r5], #4
 800de78:	4798      	blx	r3
 800de7a:	3601      	adds	r6, #1
 800de7c:	e7ee      	b.n	800de5c <__libc_init_array+0xc>
 800de7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800de82:	4798      	blx	r3
 800de84:	3601      	adds	r6, #1
 800de86:	e7f2      	b.n	800de6e <__libc_init_array+0x1e>
 800de88:	08010204 	.word	0x08010204
 800de8c:	08010204 	.word	0x08010204
 800de90:	08010204 	.word	0x08010204
 800de94:	08010208 	.word	0x08010208

0800de98 <__retarget_lock_init_recursive>:
 800de98:	4770      	bx	lr

0800de9a <__retarget_lock_acquire_recursive>:
 800de9a:	4770      	bx	lr

0800de9c <__retarget_lock_release_recursive>:
 800de9c:	4770      	bx	lr

0800de9e <memcpy>:
 800de9e:	440a      	add	r2, r1
 800dea0:	4291      	cmp	r1, r2
 800dea2:	f100 33ff 	add.w	r3, r0, #4294967295
 800dea6:	d100      	bne.n	800deaa <memcpy+0xc>
 800dea8:	4770      	bx	lr
 800deaa:	b510      	push	{r4, lr}
 800deac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800deb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800deb4:	4291      	cmp	r1, r2
 800deb6:	d1f9      	bne.n	800deac <memcpy+0xe>
 800deb8:	bd10      	pop	{r4, pc}
	...

0800debc <_free_r>:
 800debc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800debe:	2900      	cmp	r1, #0
 800dec0:	d044      	beq.n	800df4c <_free_r+0x90>
 800dec2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dec6:	9001      	str	r0, [sp, #4]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	f1a1 0404 	sub.w	r4, r1, #4
 800dece:	bfb8      	it	lt
 800ded0:	18e4      	addlt	r4, r4, r3
 800ded2:	f000 f8df 	bl	800e094 <__malloc_lock>
 800ded6:	4a1e      	ldr	r2, [pc, #120]	; (800df50 <_free_r+0x94>)
 800ded8:	9801      	ldr	r0, [sp, #4]
 800deda:	6813      	ldr	r3, [r2, #0]
 800dedc:	b933      	cbnz	r3, 800deec <_free_r+0x30>
 800dede:	6063      	str	r3, [r4, #4]
 800dee0:	6014      	str	r4, [r2, #0]
 800dee2:	b003      	add	sp, #12
 800dee4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dee8:	f000 b8da 	b.w	800e0a0 <__malloc_unlock>
 800deec:	42a3      	cmp	r3, r4
 800deee:	d908      	bls.n	800df02 <_free_r+0x46>
 800def0:	6825      	ldr	r5, [r4, #0]
 800def2:	1961      	adds	r1, r4, r5
 800def4:	428b      	cmp	r3, r1
 800def6:	bf01      	itttt	eq
 800def8:	6819      	ldreq	r1, [r3, #0]
 800defa:	685b      	ldreq	r3, [r3, #4]
 800defc:	1949      	addeq	r1, r1, r5
 800defe:	6021      	streq	r1, [r4, #0]
 800df00:	e7ed      	b.n	800dede <_free_r+0x22>
 800df02:	461a      	mov	r2, r3
 800df04:	685b      	ldr	r3, [r3, #4]
 800df06:	b10b      	cbz	r3, 800df0c <_free_r+0x50>
 800df08:	42a3      	cmp	r3, r4
 800df0a:	d9fa      	bls.n	800df02 <_free_r+0x46>
 800df0c:	6811      	ldr	r1, [r2, #0]
 800df0e:	1855      	adds	r5, r2, r1
 800df10:	42a5      	cmp	r5, r4
 800df12:	d10b      	bne.n	800df2c <_free_r+0x70>
 800df14:	6824      	ldr	r4, [r4, #0]
 800df16:	4421      	add	r1, r4
 800df18:	1854      	adds	r4, r2, r1
 800df1a:	42a3      	cmp	r3, r4
 800df1c:	6011      	str	r1, [r2, #0]
 800df1e:	d1e0      	bne.n	800dee2 <_free_r+0x26>
 800df20:	681c      	ldr	r4, [r3, #0]
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	6053      	str	r3, [r2, #4]
 800df26:	440c      	add	r4, r1
 800df28:	6014      	str	r4, [r2, #0]
 800df2a:	e7da      	b.n	800dee2 <_free_r+0x26>
 800df2c:	d902      	bls.n	800df34 <_free_r+0x78>
 800df2e:	230c      	movs	r3, #12
 800df30:	6003      	str	r3, [r0, #0]
 800df32:	e7d6      	b.n	800dee2 <_free_r+0x26>
 800df34:	6825      	ldr	r5, [r4, #0]
 800df36:	1961      	adds	r1, r4, r5
 800df38:	428b      	cmp	r3, r1
 800df3a:	bf04      	itt	eq
 800df3c:	6819      	ldreq	r1, [r3, #0]
 800df3e:	685b      	ldreq	r3, [r3, #4]
 800df40:	6063      	str	r3, [r4, #4]
 800df42:	bf04      	itt	eq
 800df44:	1949      	addeq	r1, r1, r5
 800df46:	6021      	streq	r1, [r4, #0]
 800df48:	6054      	str	r4, [r2, #4]
 800df4a:	e7ca      	b.n	800dee2 <_free_r+0x26>
 800df4c:	b003      	add	sp, #12
 800df4e:	bd30      	pop	{r4, r5, pc}
 800df50:	20001a88 	.word	0x20001a88

0800df54 <sbrk_aligned>:
 800df54:	b570      	push	{r4, r5, r6, lr}
 800df56:	4e0e      	ldr	r6, [pc, #56]	; (800df90 <sbrk_aligned+0x3c>)
 800df58:	460c      	mov	r4, r1
 800df5a:	6831      	ldr	r1, [r6, #0]
 800df5c:	4605      	mov	r5, r0
 800df5e:	b911      	cbnz	r1, 800df66 <sbrk_aligned+0x12>
 800df60:	f000 fcec 	bl	800e93c <_sbrk_r>
 800df64:	6030      	str	r0, [r6, #0]
 800df66:	4621      	mov	r1, r4
 800df68:	4628      	mov	r0, r5
 800df6a:	f000 fce7 	bl	800e93c <_sbrk_r>
 800df6e:	1c43      	adds	r3, r0, #1
 800df70:	d00a      	beq.n	800df88 <sbrk_aligned+0x34>
 800df72:	1cc4      	adds	r4, r0, #3
 800df74:	f024 0403 	bic.w	r4, r4, #3
 800df78:	42a0      	cmp	r0, r4
 800df7a:	d007      	beq.n	800df8c <sbrk_aligned+0x38>
 800df7c:	1a21      	subs	r1, r4, r0
 800df7e:	4628      	mov	r0, r5
 800df80:	f000 fcdc 	bl	800e93c <_sbrk_r>
 800df84:	3001      	adds	r0, #1
 800df86:	d101      	bne.n	800df8c <sbrk_aligned+0x38>
 800df88:	f04f 34ff 	mov.w	r4, #4294967295
 800df8c:	4620      	mov	r0, r4
 800df8e:	bd70      	pop	{r4, r5, r6, pc}
 800df90:	20001a8c 	.word	0x20001a8c

0800df94 <_malloc_r>:
 800df94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df98:	1ccd      	adds	r5, r1, #3
 800df9a:	f025 0503 	bic.w	r5, r5, #3
 800df9e:	3508      	adds	r5, #8
 800dfa0:	2d0c      	cmp	r5, #12
 800dfa2:	bf38      	it	cc
 800dfa4:	250c      	movcc	r5, #12
 800dfa6:	2d00      	cmp	r5, #0
 800dfa8:	4607      	mov	r7, r0
 800dfaa:	db01      	blt.n	800dfb0 <_malloc_r+0x1c>
 800dfac:	42a9      	cmp	r1, r5
 800dfae:	d905      	bls.n	800dfbc <_malloc_r+0x28>
 800dfb0:	230c      	movs	r3, #12
 800dfb2:	603b      	str	r3, [r7, #0]
 800dfb4:	2600      	movs	r6, #0
 800dfb6:	4630      	mov	r0, r6
 800dfb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfbc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e090 <_malloc_r+0xfc>
 800dfc0:	f000 f868 	bl	800e094 <__malloc_lock>
 800dfc4:	f8d8 3000 	ldr.w	r3, [r8]
 800dfc8:	461c      	mov	r4, r3
 800dfca:	bb5c      	cbnz	r4, 800e024 <_malloc_r+0x90>
 800dfcc:	4629      	mov	r1, r5
 800dfce:	4638      	mov	r0, r7
 800dfd0:	f7ff ffc0 	bl	800df54 <sbrk_aligned>
 800dfd4:	1c43      	adds	r3, r0, #1
 800dfd6:	4604      	mov	r4, r0
 800dfd8:	d155      	bne.n	800e086 <_malloc_r+0xf2>
 800dfda:	f8d8 4000 	ldr.w	r4, [r8]
 800dfde:	4626      	mov	r6, r4
 800dfe0:	2e00      	cmp	r6, #0
 800dfe2:	d145      	bne.n	800e070 <_malloc_r+0xdc>
 800dfe4:	2c00      	cmp	r4, #0
 800dfe6:	d048      	beq.n	800e07a <_malloc_r+0xe6>
 800dfe8:	6823      	ldr	r3, [r4, #0]
 800dfea:	4631      	mov	r1, r6
 800dfec:	4638      	mov	r0, r7
 800dfee:	eb04 0903 	add.w	r9, r4, r3
 800dff2:	f000 fca3 	bl	800e93c <_sbrk_r>
 800dff6:	4581      	cmp	r9, r0
 800dff8:	d13f      	bne.n	800e07a <_malloc_r+0xe6>
 800dffa:	6821      	ldr	r1, [r4, #0]
 800dffc:	1a6d      	subs	r5, r5, r1
 800dffe:	4629      	mov	r1, r5
 800e000:	4638      	mov	r0, r7
 800e002:	f7ff ffa7 	bl	800df54 <sbrk_aligned>
 800e006:	3001      	adds	r0, #1
 800e008:	d037      	beq.n	800e07a <_malloc_r+0xe6>
 800e00a:	6823      	ldr	r3, [r4, #0]
 800e00c:	442b      	add	r3, r5
 800e00e:	6023      	str	r3, [r4, #0]
 800e010:	f8d8 3000 	ldr.w	r3, [r8]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d038      	beq.n	800e08a <_malloc_r+0xf6>
 800e018:	685a      	ldr	r2, [r3, #4]
 800e01a:	42a2      	cmp	r2, r4
 800e01c:	d12b      	bne.n	800e076 <_malloc_r+0xe2>
 800e01e:	2200      	movs	r2, #0
 800e020:	605a      	str	r2, [r3, #4]
 800e022:	e00f      	b.n	800e044 <_malloc_r+0xb0>
 800e024:	6822      	ldr	r2, [r4, #0]
 800e026:	1b52      	subs	r2, r2, r5
 800e028:	d41f      	bmi.n	800e06a <_malloc_r+0xd6>
 800e02a:	2a0b      	cmp	r2, #11
 800e02c:	d917      	bls.n	800e05e <_malloc_r+0xca>
 800e02e:	1961      	adds	r1, r4, r5
 800e030:	42a3      	cmp	r3, r4
 800e032:	6025      	str	r5, [r4, #0]
 800e034:	bf18      	it	ne
 800e036:	6059      	strne	r1, [r3, #4]
 800e038:	6863      	ldr	r3, [r4, #4]
 800e03a:	bf08      	it	eq
 800e03c:	f8c8 1000 	streq.w	r1, [r8]
 800e040:	5162      	str	r2, [r4, r5]
 800e042:	604b      	str	r3, [r1, #4]
 800e044:	4638      	mov	r0, r7
 800e046:	f104 060b 	add.w	r6, r4, #11
 800e04a:	f000 f829 	bl	800e0a0 <__malloc_unlock>
 800e04e:	f026 0607 	bic.w	r6, r6, #7
 800e052:	1d23      	adds	r3, r4, #4
 800e054:	1af2      	subs	r2, r6, r3
 800e056:	d0ae      	beq.n	800dfb6 <_malloc_r+0x22>
 800e058:	1b9b      	subs	r3, r3, r6
 800e05a:	50a3      	str	r3, [r4, r2]
 800e05c:	e7ab      	b.n	800dfb6 <_malloc_r+0x22>
 800e05e:	42a3      	cmp	r3, r4
 800e060:	6862      	ldr	r2, [r4, #4]
 800e062:	d1dd      	bne.n	800e020 <_malloc_r+0x8c>
 800e064:	f8c8 2000 	str.w	r2, [r8]
 800e068:	e7ec      	b.n	800e044 <_malloc_r+0xb0>
 800e06a:	4623      	mov	r3, r4
 800e06c:	6864      	ldr	r4, [r4, #4]
 800e06e:	e7ac      	b.n	800dfca <_malloc_r+0x36>
 800e070:	4634      	mov	r4, r6
 800e072:	6876      	ldr	r6, [r6, #4]
 800e074:	e7b4      	b.n	800dfe0 <_malloc_r+0x4c>
 800e076:	4613      	mov	r3, r2
 800e078:	e7cc      	b.n	800e014 <_malloc_r+0x80>
 800e07a:	230c      	movs	r3, #12
 800e07c:	603b      	str	r3, [r7, #0]
 800e07e:	4638      	mov	r0, r7
 800e080:	f000 f80e 	bl	800e0a0 <__malloc_unlock>
 800e084:	e797      	b.n	800dfb6 <_malloc_r+0x22>
 800e086:	6025      	str	r5, [r4, #0]
 800e088:	e7dc      	b.n	800e044 <_malloc_r+0xb0>
 800e08a:	605b      	str	r3, [r3, #4]
 800e08c:	deff      	udf	#255	; 0xff
 800e08e:	bf00      	nop
 800e090:	20001a88 	.word	0x20001a88

0800e094 <__malloc_lock>:
 800e094:	4801      	ldr	r0, [pc, #4]	; (800e09c <__malloc_lock+0x8>)
 800e096:	f7ff bf00 	b.w	800de9a <__retarget_lock_acquire_recursive>
 800e09a:	bf00      	nop
 800e09c:	20001a84 	.word	0x20001a84

0800e0a0 <__malloc_unlock>:
 800e0a0:	4801      	ldr	r0, [pc, #4]	; (800e0a8 <__malloc_unlock+0x8>)
 800e0a2:	f7ff befb 	b.w	800de9c <__retarget_lock_release_recursive>
 800e0a6:	bf00      	nop
 800e0a8:	20001a84 	.word	0x20001a84

0800e0ac <__sfputc_r>:
 800e0ac:	6893      	ldr	r3, [r2, #8]
 800e0ae:	3b01      	subs	r3, #1
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	b410      	push	{r4}
 800e0b4:	6093      	str	r3, [r2, #8]
 800e0b6:	da08      	bge.n	800e0ca <__sfputc_r+0x1e>
 800e0b8:	6994      	ldr	r4, [r2, #24]
 800e0ba:	42a3      	cmp	r3, r4
 800e0bc:	db01      	blt.n	800e0c2 <__sfputc_r+0x16>
 800e0be:	290a      	cmp	r1, #10
 800e0c0:	d103      	bne.n	800e0ca <__sfputc_r+0x1e>
 800e0c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0c6:	f7ff bdc2 	b.w	800dc4e <__swbuf_r>
 800e0ca:	6813      	ldr	r3, [r2, #0]
 800e0cc:	1c58      	adds	r0, r3, #1
 800e0ce:	6010      	str	r0, [r2, #0]
 800e0d0:	7019      	strb	r1, [r3, #0]
 800e0d2:	4608      	mov	r0, r1
 800e0d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0d8:	4770      	bx	lr

0800e0da <__sfputs_r>:
 800e0da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0dc:	4606      	mov	r6, r0
 800e0de:	460f      	mov	r7, r1
 800e0e0:	4614      	mov	r4, r2
 800e0e2:	18d5      	adds	r5, r2, r3
 800e0e4:	42ac      	cmp	r4, r5
 800e0e6:	d101      	bne.n	800e0ec <__sfputs_r+0x12>
 800e0e8:	2000      	movs	r0, #0
 800e0ea:	e007      	b.n	800e0fc <__sfputs_r+0x22>
 800e0ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0f0:	463a      	mov	r2, r7
 800e0f2:	4630      	mov	r0, r6
 800e0f4:	f7ff ffda 	bl	800e0ac <__sfputc_r>
 800e0f8:	1c43      	adds	r3, r0, #1
 800e0fa:	d1f3      	bne.n	800e0e4 <__sfputs_r+0xa>
 800e0fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e100 <_vfiprintf_r>:
 800e100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e104:	460d      	mov	r5, r1
 800e106:	b09d      	sub	sp, #116	; 0x74
 800e108:	4614      	mov	r4, r2
 800e10a:	4698      	mov	r8, r3
 800e10c:	4606      	mov	r6, r0
 800e10e:	b118      	cbz	r0, 800e118 <_vfiprintf_r+0x18>
 800e110:	6a03      	ldr	r3, [r0, #32]
 800e112:	b90b      	cbnz	r3, 800e118 <_vfiprintf_r+0x18>
 800e114:	f7ff fcac 	bl	800da70 <__sinit>
 800e118:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e11a:	07d9      	lsls	r1, r3, #31
 800e11c:	d405      	bmi.n	800e12a <_vfiprintf_r+0x2a>
 800e11e:	89ab      	ldrh	r3, [r5, #12]
 800e120:	059a      	lsls	r2, r3, #22
 800e122:	d402      	bmi.n	800e12a <_vfiprintf_r+0x2a>
 800e124:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e126:	f7ff feb8 	bl	800de9a <__retarget_lock_acquire_recursive>
 800e12a:	89ab      	ldrh	r3, [r5, #12]
 800e12c:	071b      	lsls	r3, r3, #28
 800e12e:	d501      	bpl.n	800e134 <_vfiprintf_r+0x34>
 800e130:	692b      	ldr	r3, [r5, #16]
 800e132:	b99b      	cbnz	r3, 800e15c <_vfiprintf_r+0x5c>
 800e134:	4629      	mov	r1, r5
 800e136:	4630      	mov	r0, r6
 800e138:	f7ff fdc6 	bl	800dcc8 <__swsetup_r>
 800e13c:	b170      	cbz	r0, 800e15c <_vfiprintf_r+0x5c>
 800e13e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e140:	07dc      	lsls	r4, r3, #31
 800e142:	d504      	bpl.n	800e14e <_vfiprintf_r+0x4e>
 800e144:	f04f 30ff 	mov.w	r0, #4294967295
 800e148:	b01d      	add	sp, #116	; 0x74
 800e14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e14e:	89ab      	ldrh	r3, [r5, #12]
 800e150:	0598      	lsls	r0, r3, #22
 800e152:	d4f7      	bmi.n	800e144 <_vfiprintf_r+0x44>
 800e154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e156:	f7ff fea1 	bl	800de9c <__retarget_lock_release_recursive>
 800e15a:	e7f3      	b.n	800e144 <_vfiprintf_r+0x44>
 800e15c:	2300      	movs	r3, #0
 800e15e:	9309      	str	r3, [sp, #36]	; 0x24
 800e160:	2320      	movs	r3, #32
 800e162:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e166:	f8cd 800c 	str.w	r8, [sp, #12]
 800e16a:	2330      	movs	r3, #48	; 0x30
 800e16c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e320 <_vfiprintf_r+0x220>
 800e170:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e174:	f04f 0901 	mov.w	r9, #1
 800e178:	4623      	mov	r3, r4
 800e17a:	469a      	mov	sl, r3
 800e17c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e180:	b10a      	cbz	r2, 800e186 <_vfiprintf_r+0x86>
 800e182:	2a25      	cmp	r2, #37	; 0x25
 800e184:	d1f9      	bne.n	800e17a <_vfiprintf_r+0x7a>
 800e186:	ebba 0b04 	subs.w	fp, sl, r4
 800e18a:	d00b      	beq.n	800e1a4 <_vfiprintf_r+0xa4>
 800e18c:	465b      	mov	r3, fp
 800e18e:	4622      	mov	r2, r4
 800e190:	4629      	mov	r1, r5
 800e192:	4630      	mov	r0, r6
 800e194:	f7ff ffa1 	bl	800e0da <__sfputs_r>
 800e198:	3001      	adds	r0, #1
 800e19a:	f000 80a9 	beq.w	800e2f0 <_vfiprintf_r+0x1f0>
 800e19e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1a0:	445a      	add	r2, fp
 800e1a2:	9209      	str	r2, [sp, #36]	; 0x24
 800e1a4:	f89a 3000 	ldrb.w	r3, [sl]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	f000 80a1 	beq.w	800e2f0 <_vfiprintf_r+0x1f0>
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	f04f 32ff 	mov.w	r2, #4294967295
 800e1b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1b8:	f10a 0a01 	add.w	sl, sl, #1
 800e1bc:	9304      	str	r3, [sp, #16]
 800e1be:	9307      	str	r3, [sp, #28]
 800e1c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e1c4:	931a      	str	r3, [sp, #104]	; 0x68
 800e1c6:	4654      	mov	r4, sl
 800e1c8:	2205      	movs	r2, #5
 800e1ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1ce:	4854      	ldr	r0, [pc, #336]	; (800e320 <_vfiprintf_r+0x220>)
 800e1d0:	f7f1 ffde 	bl	8000190 <memchr>
 800e1d4:	9a04      	ldr	r2, [sp, #16]
 800e1d6:	b9d8      	cbnz	r0, 800e210 <_vfiprintf_r+0x110>
 800e1d8:	06d1      	lsls	r1, r2, #27
 800e1da:	bf44      	itt	mi
 800e1dc:	2320      	movmi	r3, #32
 800e1de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1e2:	0713      	lsls	r3, r2, #28
 800e1e4:	bf44      	itt	mi
 800e1e6:	232b      	movmi	r3, #43	; 0x2b
 800e1e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1ec:	f89a 3000 	ldrb.w	r3, [sl]
 800e1f0:	2b2a      	cmp	r3, #42	; 0x2a
 800e1f2:	d015      	beq.n	800e220 <_vfiprintf_r+0x120>
 800e1f4:	9a07      	ldr	r2, [sp, #28]
 800e1f6:	4654      	mov	r4, sl
 800e1f8:	2000      	movs	r0, #0
 800e1fa:	f04f 0c0a 	mov.w	ip, #10
 800e1fe:	4621      	mov	r1, r4
 800e200:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e204:	3b30      	subs	r3, #48	; 0x30
 800e206:	2b09      	cmp	r3, #9
 800e208:	d94d      	bls.n	800e2a6 <_vfiprintf_r+0x1a6>
 800e20a:	b1b0      	cbz	r0, 800e23a <_vfiprintf_r+0x13a>
 800e20c:	9207      	str	r2, [sp, #28]
 800e20e:	e014      	b.n	800e23a <_vfiprintf_r+0x13a>
 800e210:	eba0 0308 	sub.w	r3, r0, r8
 800e214:	fa09 f303 	lsl.w	r3, r9, r3
 800e218:	4313      	orrs	r3, r2
 800e21a:	9304      	str	r3, [sp, #16]
 800e21c:	46a2      	mov	sl, r4
 800e21e:	e7d2      	b.n	800e1c6 <_vfiprintf_r+0xc6>
 800e220:	9b03      	ldr	r3, [sp, #12]
 800e222:	1d19      	adds	r1, r3, #4
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	9103      	str	r1, [sp, #12]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	bfbb      	ittet	lt
 800e22c:	425b      	neglt	r3, r3
 800e22e:	f042 0202 	orrlt.w	r2, r2, #2
 800e232:	9307      	strge	r3, [sp, #28]
 800e234:	9307      	strlt	r3, [sp, #28]
 800e236:	bfb8      	it	lt
 800e238:	9204      	strlt	r2, [sp, #16]
 800e23a:	7823      	ldrb	r3, [r4, #0]
 800e23c:	2b2e      	cmp	r3, #46	; 0x2e
 800e23e:	d10c      	bne.n	800e25a <_vfiprintf_r+0x15a>
 800e240:	7863      	ldrb	r3, [r4, #1]
 800e242:	2b2a      	cmp	r3, #42	; 0x2a
 800e244:	d134      	bne.n	800e2b0 <_vfiprintf_r+0x1b0>
 800e246:	9b03      	ldr	r3, [sp, #12]
 800e248:	1d1a      	adds	r2, r3, #4
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	9203      	str	r2, [sp, #12]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	bfb8      	it	lt
 800e252:	f04f 33ff 	movlt.w	r3, #4294967295
 800e256:	3402      	adds	r4, #2
 800e258:	9305      	str	r3, [sp, #20]
 800e25a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e330 <_vfiprintf_r+0x230>
 800e25e:	7821      	ldrb	r1, [r4, #0]
 800e260:	2203      	movs	r2, #3
 800e262:	4650      	mov	r0, sl
 800e264:	f7f1 ff94 	bl	8000190 <memchr>
 800e268:	b138      	cbz	r0, 800e27a <_vfiprintf_r+0x17a>
 800e26a:	9b04      	ldr	r3, [sp, #16]
 800e26c:	eba0 000a 	sub.w	r0, r0, sl
 800e270:	2240      	movs	r2, #64	; 0x40
 800e272:	4082      	lsls	r2, r0
 800e274:	4313      	orrs	r3, r2
 800e276:	3401      	adds	r4, #1
 800e278:	9304      	str	r3, [sp, #16]
 800e27a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e27e:	4829      	ldr	r0, [pc, #164]	; (800e324 <_vfiprintf_r+0x224>)
 800e280:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e284:	2206      	movs	r2, #6
 800e286:	f7f1 ff83 	bl	8000190 <memchr>
 800e28a:	2800      	cmp	r0, #0
 800e28c:	d03f      	beq.n	800e30e <_vfiprintf_r+0x20e>
 800e28e:	4b26      	ldr	r3, [pc, #152]	; (800e328 <_vfiprintf_r+0x228>)
 800e290:	bb1b      	cbnz	r3, 800e2da <_vfiprintf_r+0x1da>
 800e292:	9b03      	ldr	r3, [sp, #12]
 800e294:	3307      	adds	r3, #7
 800e296:	f023 0307 	bic.w	r3, r3, #7
 800e29a:	3308      	adds	r3, #8
 800e29c:	9303      	str	r3, [sp, #12]
 800e29e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2a0:	443b      	add	r3, r7
 800e2a2:	9309      	str	r3, [sp, #36]	; 0x24
 800e2a4:	e768      	b.n	800e178 <_vfiprintf_r+0x78>
 800e2a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2aa:	460c      	mov	r4, r1
 800e2ac:	2001      	movs	r0, #1
 800e2ae:	e7a6      	b.n	800e1fe <_vfiprintf_r+0xfe>
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	3401      	adds	r4, #1
 800e2b4:	9305      	str	r3, [sp, #20]
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	f04f 0c0a 	mov.w	ip, #10
 800e2bc:	4620      	mov	r0, r4
 800e2be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2c2:	3a30      	subs	r2, #48	; 0x30
 800e2c4:	2a09      	cmp	r2, #9
 800e2c6:	d903      	bls.n	800e2d0 <_vfiprintf_r+0x1d0>
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d0c6      	beq.n	800e25a <_vfiprintf_r+0x15a>
 800e2cc:	9105      	str	r1, [sp, #20]
 800e2ce:	e7c4      	b.n	800e25a <_vfiprintf_r+0x15a>
 800e2d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2d4:	4604      	mov	r4, r0
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	e7f0      	b.n	800e2bc <_vfiprintf_r+0x1bc>
 800e2da:	ab03      	add	r3, sp, #12
 800e2dc:	9300      	str	r3, [sp, #0]
 800e2de:	462a      	mov	r2, r5
 800e2e0:	4b12      	ldr	r3, [pc, #72]	; (800e32c <_vfiprintf_r+0x22c>)
 800e2e2:	a904      	add	r1, sp, #16
 800e2e4:	4630      	mov	r0, r6
 800e2e6:	f3af 8000 	nop.w
 800e2ea:	4607      	mov	r7, r0
 800e2ec:	1c78      	adds	r0, r7, #1
 800e2ee:	d1d6      	bne.n	800e29e <_vfiprintf_r+0x19e>
 800e2f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2f2:	07d9      	lsls	r1, r3, #31
 800e2f4:	d405      	bmi.n	800e302 <_vfiprintf_r+0x202>
 800e2f6:	89ab      	ldrh	r3, [r5, #12]
 800e2f8:	059a      	lsls	r2, r3, #22
 800e2fa:	d402      	bmi.n	800e302 <_vfiprintf_r+0x202>
 800e2fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e2fe:	f7ff fdcd 	bl	800de9c <__retarget_lock_release_recursive>
 800e302:	89ab      	ldrh	r3, [r5, #12]
 800e304:	065b      	lsls	r3, r3, #25
 800e306:	f53f af1d 	bmi.w	800e144 <_vfiprintf_r+0x44>
 800e30a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e30c:	e71c      	b.n	800e148 <_vfiprintf_r+0x48>
 800e30e:	ab03      	add	r3, sp, #12
 800e310:	9300      	str	r3, [sp, #0]
 800e312:	462a      	mov	r2, r5
 800e314:	4b05      	ldr	r3, [pc, #20]	; (800e32c <_vfiprintf_r+0x22c>)
 800e316:	a904      	add	r1, sp, #16
 800e318:	4630      	mov	r0, r6
 800e31a:	f000 f879 	bl	800e410 <_printf_i>
 800e31e:	e7e4      	b.n	800e2ea <_vfiprintf_r+0x1ea>
 800e320:	080101c8 	.word	0x080101c8
 800e324:	080101d2 	.word	0x080101d2
 800e328:	00000000 	.word	0x00000000
 800e32c:	0800e0db 	.word	0x0800e0db
 800e330:	080101ce 	.word	0x080101ce

0800e334 <_printf_common>:
 800e334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e338:	4616      	mov	r6, r2
 800e33a:	4699      	mov	r9, r3
 800e33c:	688a      	ldr	r2, [r1, #8]
 800e33e:	690b      	ldr	r3, [r1, #16]
 800e340:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e344:	4293      	cmp	r3, r2
 800e346:	bfb8      	it	lt
 800e348:	4613      	movlt	r3, r2
 800e34a:	6033      	str	r3, [r6, #0]
 800e34c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e350:	4607      	mov	r7, r0
 800e352:	460c      	mov	r4, r1
 800e354:	b10a      	cbz	r2, 800e35a <_printf_common+0x26>
 800e356:	3301      	adds	r3, #1
 800e358:	6033      	str	r3, [r6, #0]
 800e35a:	6823      	ldr	r3, [r4, #0]
 800e35c:	0699      	lsls	r1, r3, #26
 800e35e:	bf42      	ittt	mi
 800e360:	6833      	ldrmi	r3, [r6, #0]
 800e362:	3302      	addmi	r3, #2
 800e364:	6033      	strmi	r3, [r6, #0]
 800e366:	6825      	ldr	r5, [r4, #0]
 800e368:	f015 0506 	ands.w	r5, r5, #6
 800e36c:	d106      	bne.n	800e37c <_printf_common+0x48>
 800e36e:	f104 0a19 	add.w	sl, r4, #25
 800e372:	68e3      	ldr	r3, [r4, #12]
 800e374:	6832      	ldr	r2, [r6, #0]
 800e376:	1a9b      	subs	r3, r3, r2
 800e378:	42ab      	cmp	r3, r5
 800e37a:	dc26      	bgt.n	800e3ca <_printf_common+0x96>
 800e37c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e380:	1e13      	subs	r3, r2, #0
 800e382:	6822      	ldr	r2, [r4, #0]
 800e384:	bf18      	it	ne
 800e386:	2301      	movne	r3, #1
 800e388:	0692      	lsls	r2, r2, #26
 800e38a:	d42b      	bmi.n	800e3e4 <_printf_common+0xb0>
 800e38c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e390:	4649      	mov	r1, r9
 800e392:	4638      	mov	r0, r7
 800e394:	47c0      	blx	r8
 800e396:	3001      	adds	r0, #1
 800e398:	d01e      	beq.n	800e3d8 <_printf_common+0xa4>
 800e39a:	6823      	ldr	r3, [r4, #0]
 800e39c:	6922      	ldr	r2, [r4, #16]
 800e39e:	f003 0306 	and.w	r3, r3, #6
 800e3a2:	2b04      	cmp	r3, #4
 800e3a4:	bf02      	ittt	eq
 800e3a6:	68e5      	ldreq	r5, [r4, #12]
 800e3a8:	6833      	ldreq	r3, [r6, #0]
 800e3aa:	1aed      	subeq	r5, r5, r3
 800e3ac:	68a3      	ldr	r3, [r4, #8]
 800e3ae:	bf0c      	ite	eq
 800e3b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e3b4:	2500      	movne	r5, #0
 800e3b6:	4293      	cmp	r3, r2
 800e3b8:	bfc4      	itt	gt
 800e3ba:	1a9b      	subgt	r3, r3, r2
 800e3bc:	18ed      	addgt	r5, r5, r3
 800e3be:	2600      	movs	r6, #0
 800e3c0:	341a      	adds	r4, #26
 800e3c2:	42b5      	cmp	r5, r6
 800e3c4:	d11a      	bne.n	800e3fc <_printf_common+0xc8>
 800e3c6:	2000      	movs	r0, #0
 800e3c8:	e008      	b.n	800e3dc <_printf_common+0xa8>
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	4652      	mov	r2, sl
 800e3ce:	4649      	mov	r1, r9
 800e3d0:	4638      	mov	r0, r7
 800e3d2:	47c0      	blx	r8
 800e3d4:	3001      	adds	r0, #1
 800e3d6:	d103      	bne.n	800e3e0 <_printf_common+0xac>
 800e3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e3dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3e0:	3501      	adds	r5, #1
 800e3e2:	e7c6      	b.n	800e372 <_printf_common+0x3e>
 800e3e4:	18e1      	adds	r1, r4, r3
 800e3e6:	1c5a      	adds	r2, r3, #1
 800e3e8:	2030      	movs	r0, #48	; 0x30
 800e3ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e3ee:	4422      	add	r2, r4
 800e3f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e3f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e3f8:	3302      	adds	r3, #2
 800e3fa:	e7c7      	b.n	800e38c <_printf_common+0x58>
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	4622      	mov	r2, r4
 800e400:	4649      	mov	r1, r9
 800e402:	4638      	mov	r0, r7
 800e404:	47c0      	blx	r8
 800e406:	3001      	adds	r0, #1
 800e408:	d0e6      	beq.n	800e3d8 <_printf_common+0xa4>
 800e40a:	3601      	adds	r6, #1
 800e40c:	e7d9      	b.n	800e3c2 <_printf_common+0x8e>
	...

0800e410 <_printf_i>:
 800e410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e414:	7e0f      	ldrb	r7, [r1, #24]
 800e416:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e418:	2f78      	cmp	r7, #120	; 0x78
 800e41a:	4691      	mov	r9, r2
 800e41c:	4680      	mov	r8, r0
 800e41e:	460c      	mov	r4, r1
 800e420:	469a      	mov	sl, r3
 800e422:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e426:	d807      	bhi.n	800e438 <_printf_i+0x28>
 800e428:	2f62      	cmp	r7, #98	; 0x62
 800e42a:	d80a      	bhi.n	800e442 <_printf_i+0x32>
 800e42c:	2f00      	cmp	r7, #0
 800e42e:	f000 80d4 	beq.w	800e5da <_printf_i+0x1ca>
 800e432:	2f58      	cmp	r7, #88	; 0x58
 800e434:	f000 80c0 	beq.w	800e5b8 <_printf_i+0x1a8>
 800e438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e43c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e440:	e03a      	b.n	800e4b8 <_printf_i+0xa8>
 800e442:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e446:	2b15      	cmp	r3, #21
 800e448:	d8f6      	bhi.n	800e438 <_printf_i+0x28>
 800e44a:	a101      	add	r1, pc, #4	; (adr r1, 800e450 <_printf_i+0x40>)
 800e44c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e450:	0800e4a9 	.word	0x0800e4a9
 800e454:	0800e4bd 	.word	0x0800e4bd
 800e458:	0800e439 	.word	0x0800e439
 800e45c:	0800e439 	.word	0x0800e439
 800e460:	0800e439 	.word	0x0800e439
 800e464:	0800e439 	.word	0x0800e439
 800e468:	0800e4bd 	.word	0x0800e4bd
 800e46c:	0800e439 	.word	0x0800e439
 800e470:	0800e439 	.word	0x0800e439
 800e474:	0800e439 	.word	0x0800e439
 800e478:	0800e439 	.word	0x0800e439
 800e47c:	0800e5c1 	.word	0x0800e5c1
 800e480:	0800e4e9 	.word	0x0800e4e9
 800e484:	0800e57b 	.word	0x0800e57b
 800e488:	0800e439 	.word	0x0800e439
 800e48c:	0800e439 	.word	0x0800e439
 800e490:	0800e5e3 	.word	0x0800e5e3
 800e494:	0800e439 	.word	0x0800e439
 800e498:	0800e4e9 	.word	0x0800e4e9
 800e49c:	0800e439 	.word	0x0800e439
 800e4a0:	0800e439 	.word	0x0800e439
 800e4a4:	0800e583 	.word	0x0800e583
 800e4a8:	682b      	ldr	r3, [r5, #0]
 800e4aa:	1d1a      	adds	r2, r3, #4
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	602a      	str	r2, [r5, #0]
 800e4b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e4b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	e09f      	b.n	800e5fc <_printf_i+0x1ec>
 800e4bc:	6820      	ldr	r0, [r4, #0]
 800e4be:	682b      	ldr	r3, [r5, #0]
 800e4c0:	0607      	lsls	r7, r0, #24
 800e4c2:	f103 0104 	add.w	r1, r3, #4
 800e4c6:	6029      	str	r1, [r5, #0]
 800e4c8:	d501      	bpl.n	800e4ce <_printf_i+0xbe>
 800e4ca:	681e      	ldr	r6, [r3, #0]
 800e4cc:	e003      	b.n	800e4d6 <_printf_i+0xc6>
 800e4ce:	0646      	lsls	r6, r0, #25
 800e4d0:	d5fb      	bpl.n	800e4ca <_printf_i+0xba>
 800e4d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e4d6:	2e00      	cmp	r6, #0
 800e4d8:	da03      	bge.n	800e4e2 <_printf_i+0xd2>
 800e4da:	232d      	movs	r3, #45	; 0x2d
 800e4dc:	4276      	negs	r6, r6
 800e4de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e4e2:	485a      	ldr	r0, [pc, #360]	; (800e64c <_printf_i+0x23c>)
 800e4e4:	230a      	movs	r3, #10
 800e4e6:	e012      	b.n	800e50e <_printf_i+0xfe>
 800e4e8:	682b      	ldr	r3, [r5, #0]
 800e4ea:	6820      	ldr	r0, [r4, #0]
 800e4ec:	1d19      	adds	r1, r3, #4
 800e4ee:	6029      	str	r1, [r5, #0]
 800e4f0:	0605      	lsls	r5, r0, #24
 800e4f2:	d501      	bpl.n	800e4f8 <_printf_i+0xe8>
 800e4f4:	681e      	ldr	r6, [r3, #0]
 800e4f6:	e002      	b.n	800e4fe <_printf_i+0xee>
 800e4f8:	0641      	lsls	r1, r0, #25
 800e4fa:	d5fb      	bpl.n	800e4f4 <_printf_i+0xe4>
 800e4fc:	881e      	ldrh	r6, [r3, #0]
 800e4fe:	4853      	ldr	r0, [pc, #332]	; (800e64c <_printf_i+0x23c>)
 800e500:	2f6f      	cmp	r7, #111	; 0x6f
 800e502:	bf0c      	ite	eq
 800e504:	2308      	moveq	r3, #8
 800e506:	230a      	movne	r3, #10
 800e508:	2100      	movs	r1, #0
 800e50a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e50e:	6865      	ldr	r5, [r4, #4]
 800e510:	60a5      	str	r5, [r4, #8]
 800e512:	2d00      	cmp	r5, #0
 800e514:	bfa2      	ittt	ge
 800e516:	6821      	ldrge	r1, [r4, #0]
 800e518:	f021 0104 	bicge.w	r1, r1, #4
 800e51c:	6021      	strge	r1, [r4, #0]
 800e51e:	b90e      	cbnz	r6, 800e524 <_printf_i+0x114>
 800e520:	2d00      	cmp	r5, #0
 800e522:	d04b      	beq.n	800e5bc <_printf_i+0x1ac>
 800e524:	4615      	mov	r5, r2
 800e526:	fbb6 f1f3 	udiv	r1, r6, r3
 800e52a:	fb03 6711 	mls	r7, r3, r1, r6
 800e52e:	5dc7      	ldrb	r7, [r0, r7]
 800e530:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e534:	4637      	mov	r7, r6
 800e536:	42bb      	cmp	r3, r7
 800e538:	460e      	mov	r6, r1
 800e53a:	d9f4      	bls.n	800e526 <_printf_i+0x116>
 800e53c:	2b08      	cmp	r3, #8
 800e53e:	d10b      	bne.n	800e558 <_printf_i+0x148>
 800e540:	6823      	ldr	r3, [r4, #0]
 800e542:	07de      	lsls	r6, r3, #31
 800e544:	d508      	bpl.n	800e558 <_printf_i+0x148>
 800e546:	6923      	ldr	r3, [r4, #16]
 800e548:	6861      	ldr	r1, [r4, #4]
 800e54a:	4299      	cmp	r1, r3
 800e54c:	bfde      	ittt	le
 800e54e:	2330      	movle	r3, #48	; 0x30
 800e550:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e554:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e558:	1b52      	subs	r2, r2, r5
 800e55a:	6122      	str	r2, [r4, #16]
 800e55c:	f8cd a000 	str.w	sl, [sp]
 800e560:	464b      	mov	r3, r9
 800e562:	aa03      	add	r2, sp, #12
 800e564:	4621      	mov	r1, r4
 800e566:	4640      	mov	r0, r8
 800e568:	f7ff fee4 	bl	800e334 <_printf_common>
 800e56c:	3001      	adds	r0, #1
 800e56e:	d14a      	bne.n	800e606 <_printf_i+0x1f6>
 800e570:	f04f 30ff 	mov.w	r0, #4294967295
 800e574:	b004      	add	sp, #16
 800e576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e57a:	6823      	ldr	r3, [r4, #0]
 800e57c:	f043 0320 	orr.w	r3, r3, #32
 800e580:	6023      	str	r3, [r4, #0]
 800e582:	4833      	ldr	r0, [pc, #204]	; (800e650 <_printf_i+0x240>)
 800e584:	2778      	movs	r7, #120	; 0x78
 800e586:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e58a:	6823      	ldr	r3, [r4, #0]
 800e58c:	6829      	ldr	r1, [r5, #0]
 800e58e:	061f      	lsls	r7, r3, #24
 800e590:	f851 6b04 	ldr.w	r6, [r1], #4
 800e594:	d402      	bmi.n	800e59c <_printf_i+0x18c>
 800e596:	065f      	lsls	r7, r3, #25
 800e598:	bf48      	it	mi
 800e59a:	b2b6      	uxthmi	r6, r6
 800e59c:	07df      	lsls	r7, r3, #31
 800e59e:	bf48      	it	mi
 800e5a0:	f043 0320 	orrmi.w	r3, r3, #32
 800e5a4:	6029      	str	r1, [r5, #0]
 800e5a6:	bf48      	it	mi
 800e5a8:	6023      	strmi	r3, [r4, #0]
 800e5aa:	b91e      	cbnz	r6, 800e5b4 <_printf_i+0x1a4>
 800e5ac:	6823      	ldr	r3, [r4, #0]
 800e5ae:	f023 0320 	bic.w	r3, r3, #32
 800e5b2:	6023      	str	r3, [r4, #0]
 800e5b4:	2310      	movs	r3, #16
 800e5b6:	e7a7      	b.n	800e508 <_printf_i+0xf8>
 800e5b8:	4824      	ldr	r0, [pc, #144]	; (800e64c <_printf_i+0x23c>)
 800e5ba:	e7e4      	b.n	800e586 <_printf_i+0x176>
 800e5bc:	4615      	mov	r5, r2
 800e5be:	e7bd      	b.n	800e53c <_printf_i+0x12c>
 800e5c0:	682b      	ldr	r3, [r5, #0]
 800e5c2:	6826      	ldr	r6, [r4, #0]
 800e5c4:	6961      	ldr	r1, [r4, #20]
 800e5c6:	1d18      	adds	r0, r3, #4
 800e5c8:	6028      	str	r0, [r5, #0]
 800e5ca:	0635      	lsls	r5, r6, #24
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	d501      	bpl.n	800e5d4 <_printf_i+0x1c4>
 800e5d0:	6019      	str	r1, [r3, #0]
 800e5d2:	e002      	b.n	800e5da <_printf_i+0x1ca>
 800e5d4:	0670      	lsls	r0, r6, #25
 800e5d6:	d5fb      	bpl.n	800e5d0 <_printf_i+0x1c0>
 800e5d8:	8019      	strh	r1, [r3, #0]
 800e5da:	2300      	movs	r3, #0
 800e5dc:	6123      	str	r3, [r4, #16]
 800e5de:	4615      	mov	r5, r2
 800e5e0:	e7bc      	b.n	800e55c <_printf_i+0x14c>
 800e5e2:	682b      	ldr	r3, [r5, #0]
 800e5e4:	1d1a      	adds	r2, r3, #4
 800e5e6:	602a      	str	r2, [r5, #0]
 800e5e8:	681d      	ldr	r5, [r3, #0]
 800e5ea:	6862      	ldr	r2, [r4, #4]
 800e5ec:	2100      	movs	r1, #0
 800e5ee:	4628      	mov	r0, r5
 800e5f0:	f7f1 fdce 	bl	8000190 <memchr>
 800e5f4:	b108      	cbz	r0, 800e5fa <_printf_i+0x1ea>
 800e5f6:	1b40      	subs	r0, r0, r5
 800e5f8:	6060      	str	r0, [r4, #4]
 800e5fa:	6863      	ldr	r3, [r4, #4]
 800e5fc:	6123      	str	r3, [r4, #16]
 800e5fe:	2300      	movs	r3, #0
 800e600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e604:	e7aa      	b.n	800e55c <_printf_i+0x14c>
 800e606:	6923      	ldr	r3, [r4, #16]
 800e608:	462a      	mov	r2, r5
 800e60a:	4649      	mov	r1, r9
 800e60c:	4640      	mov	r0, r8
 800e60e:	47d0      	blx	sl
 800e610:	3001      	adds	r0, #1
 800e612:	d0ad      	beq.n	800e570 <_printf_i+0x160>
 800e614:	6823      	ldr	r3, [r4, #0]
 800e616:	079b      	lsls	r3, r3, #30
 800e618:	d413      	bmi.n	800e642 <_printf_i+0x232>
 800e61a:	68e0      	ldr	r0, [r4, #12]
 800e61c:	9b03      	ldr	r3, [sp, #12]
 800e61e:	4298      	cmp	r0, r3
 800e620:	bfb8      	it	lt
 800e622:	4618      	movlt	r0, r3
 800e624:	e7a6      	b.n	800e574 <_printf_i+0x164>
 800e626:	2301      	movs	r3, #1
 800e628:	4632      	mov	r2, r6
 800e62a:	4649      	mov	r1, r9
 800e62c:	4640      	mov	r0, r8
 800e62e:	47d0      	blx	sl
 800e630:	3001      	adds	r0, #1
 800e632:	d09d      	beq.n	800e570 <_printf_i+0x160>
 800e634:	3501      	adds	r5, #1
 800e636:	68e3      	ldr	r3, [r4, #12]
 800e638:	9903      	ldr	r1, [sp, #12]
 800e63a:	1a5b      	subs	r3, r3, r1
 800e63c:	42ab      	cmp	r3, r5
 800e63e:	dcf2      	bgt.n	800e626 <_printf_i+0x216>
 800e640:	e7eb      	b.n	800e61a <_printf_i+0x20a>
 800e642:	2500      	movs	r5, #0
 800e644:	f104 0619 	add.w	r6, r4, #25
 800e648:	e7f5      	b.n	800e636 <_printf_i+0x226>
 800e64a:	bf00      	nop
 800e64c:	080101d9 	.word	0x080101d9
 800e650:	080101ea 	.word	0x080101ea

0800e654 <__sflush_r>:
 800e654:	898a      	ldrh	r2, [r1, #12]
 800e656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e65a:	4605      	mov	r5, r0
 800e65c:	0710      	lsls	r0, r2, #28
 800e65e:	460c      	mov	r4, r1
 800e660:	d458      	bmi.n	800e714 <__sflush_r+0xc0>
 800e662:	684b      	ldr	r3, [r1, #4]
 800e664:	2b00      	cmp	r3, #0
 800e666:	dc05      	bgt.n	800e674 <__sflush_r+0x20>
 800e668:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	dc02      	bgt.n	800e674 <__sflush_r+0x20>
 800e66e:	2000      	movs	r0, #0
 800e670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e674:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e676:	2e00      	cmp	r6, #0
 800e678:	d0f9      	beq.n	800e66e <__sflush_r+0x1a>
 800e67a:	2300      	movs	r3, #0
 800e67c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e680:	682f      	ldr	r7, [r5, #0]
 800e682:	6a21      	ldr	r1, [r4, #32]
 800e684:	602b      	str	r3, [r5, #0]
 800e686:	d032      	beq.n	800e6ee <__sflush_r+0x9a>
 800e688:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e68a:	89a3      	ldrh	r3, [r4, #12]
 800e68c:	075a      	lsls	r2, r3, #29
 800e68e:	d505      	bpl.n	800e69c <__sflush_r+0x48>
 800e690:	6863      	ldr	r3, [r4, #4]
 800e692:	1ac0      	subs	r0, r0, r3
 800e694:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e696:	b10b      	cbz	r3, 800e69c <__sflush_r+0x48>
 800e698:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e69a:	1ac0      	subs	r0, r0, r3
 800e69c:	2300      	movs	r3, #0
 800e69e:	4602      	mov	r2, r0
 800e6a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e6a2:	6a21      	ldr	r1, [r4, #32]
 800e6a4:	4628      	mov	r0, r5
 800e6a6:	47b0      	blx	r6
 800e6a8:	1c43      	adds	r3, r0, #1
 800e6aa:	89a3      	ldrh	r3, [r4, #12]
 800e6ac:	d106      	bne.n	800e6bc <__sflush_r+0x68>
 800e6ae:	6829      	ldr	r1, [r5, #0]
 800e6b0:	291d      	cmp	r1, #29
 800e6b2:	d82b      	bhi.n	800e70c <__sflush_r+0xb8>
 800e6b4:	4a29      	ldr	r2, [pc, #164]	; (800e75c <__sflush_r+0x108>)
 800e6b6:	410a      	asrs	r2, r1
 800e6b8:	07d6      	lsls	r6, r2, #31
 800e6ba:	d427      	bmi.n	800e70c <__sflush_r+0xb8>
 800e6bc:	2200      	movs	r2, #0
 800e6be:	6062      	str	r2, [r4, #4]
 800e6c0:	04d9      	lsls	r1, r3, #19
 800e6c2:	6922      	ldr	r2, [r4, #16]
 800e6c4:	6022      	str	r2, [r4, #0]
 800e6c6:	d504      	bpl.n	800e6d2 <__sflush_r+0x7e>
 800e6c8:	1c42      	adds	r2, r0, #1
 800e6ca:	d101      	bne.n	800e6d0 <__sflush_r+0x7c>
 800e6cc:	682b      	ldr	r3, [r5, #0]
 800e6ce:	b903      	cbnz	r3, 800e6d2 <__sflush_r+0x7e>
 800e6d0:	6560      	str	r0, [r4, #84]	; 0x54
 800e6d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6d4:	602f      	str	r7, [r5, #0]
 800e6d6:	2900      	cmp	r1, #0
 800e6d8:	d0c9      	beq.n	800e66e <__sflush_r+0x1a>
 800e6da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6de:	4299      	cmp	r1, r3
 800e6e0:	d002      	beq.n	800e6e8 <__sflush_r+0x94>
 800e6e2:	4628      	mov	r0, r5
 800e6e4:	f7ff fbea 	bl	800debc <_free_r>
 800e6e8:	2000      	movs	r0, #0
 800e6ea:	6360      	str	r0, [r4, #52]	; 0x34
 800e6ec:	e7c0      	b.n	800e670 <__sflush_r+0x1c>
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	4628      	mov	r0, r5
 800e6f2:	47b0      	blx	r6
 800e6f4:	1c41      	adds	r1, r0, #1
 800e6f6:	d1c8      	bne.n	800e68a <__sflush_r+0x36>
 800e6f8:	682b      	ldr	r3, [r5, #0]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d0c5      	beq.n	800e68a <__sflush_r+0x36>
 800e6fe:	2b1d      	cmp	r3, #29
 800e700:	d001      	beq.n	800e706 <__sflush_r+0xb2>
 800e702:	2b16      	cmp	r3, #22
 800e704:	d101      	bne.n	800e70a <__sflush_r+0xb6>
 800e706:	602f      	str	r7, [r5, #0]
 800e708:	e7b1      	b.n	800e66e <__sflush_r+0x1a>
 800e70a:	89a3      	ldrh	r3, [r4, #12]
 800e70c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e710:	81a3      	strh	r3, [r4, #12]
 800e712:	e7ad      	b.n	800e670 <__sflush_r+0x1c>
 800e714:	690f      	ldr	r7, [r1, #16]
 800e716:	2f00      	cmp	r7, #0
 800e718:	d0a9      	beq.n	800e66e <__sflush_r+0x1a>
 800e71a:	0793      	lsls	r3, r2, #30
 800e71c:	680e      	ldr	r6, [r1, #0]
 800e71e:	bf08      	it	eq
 800e720:	694b      	ldreq	r3, [r1, #20]
 800e722:	600f      	str	r7, [r1, #0]
 800e724:	bf18      	it	ne
 800e726:	2300      	movne	r3, #0
 800e728:	eba6 0807 	sub.w	r8, r6, r7
 800e72c:	608b      	str	r3, [r1, #8]
 800e72e:	f1b8 0f00 	cmp.w	r8, #0
 800e732:	dd9c      	ble.n	800e66e <__sflush_r+0x1a>
 800e734:	6a21      	ldr	r1, [r4, #32]
 800e736:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e738:	4643      	mov	r3, r8
 800e73a:	463a      	mov	r2, r7
 800e73c:	4628      	mov	r0, r5
 800e73e:	47b0      	blx	r6
 800e740:	2800      	cmp	r0, #0
 800e742:	dc06      	bgt.n	800e752 <__sflush_r+0xfe>
 800e744:	89a3      	ldrh	r3, [r4, #12]
 800e746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e74a:	81a3      	strh	r3, [r4, #12]
 800e74c:	f04f 30ff 	mov.w	r0, #4294967295
 800e750:	e78e      	b.n	800e670 <__sflush_r+0x1c>
 800e752:	4407      	add	r7, r0
 800e754:	eba8 0800 	sub.w	r8, r8, r0
 800e758:	e7e9      	b.n	800e72e <__sflush_r+0xda>
 800e75a:	bf00      	nop
 800e75c:	dfbffffe 	.word	0xdfbffffe

0800e760 <_fflush_r>:
 800e760:	b538      	push	{r3, r4, r5, lr}
 800e762:	690b      	ldr	r3, [r1, #16]
 800e764:	4605      	mov	r5, r0
 800e766:	460c      	mov	r4, r1
 800e768:	b913      	cbnz	r3, 800e770 <_fflush_r+0x10>
 800e76a:	2500      	movs	r5, #0
 800e76c:	4628      	mov	r0, r5
 800e76e:	bd38      	pop	{r3, r4, r5, pc}
 800e770:	b118      	cbz	r0, 800e77a <_fflush_r+0x1a>
 800e772:	6a03      	ldr	r3, [r0, #32]
 800e774:	b90b      	cbnz	r3, 800e77a <_fflush_r+0x1a>
 800e776:	f7ff f97b 	bl	800da70 <__sinit>
 800e77a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d0f3      	beq.n	800e76a <_fflush_r+0xa>
 800e782:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e784:	07d0      	lsls	r0, r2, #31
 800e786:	d404      	bmi.n	800e792 <_fflush_r+0x32>
 800e788:	0599      	lsls	r1, r3, #22
 800e78a:	d402      	bmi.n	800e792 <_fflush_r+0x32>
 800e78c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e78e:	f7ff fb84 	bl	800de9a <__retarget_lock_acquire_recursive>
 800e792:	4628      	mov	r0, r5
 800e794:	4621      	mov	r1, r4
 800e796:	f7ff ff5d 	bl	800e654 <__sflush_r>
 800e79a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e79c:	07da      	lsls	r2, r3, #31
 800e79e:	4605      	mov	r5, r0
 800e7a0:	d4e4      	bmi.n	800e76c <_fflush_r+0xc>
 800e7a2:	89a3      	ldrh	r3, [r4, #12]
 800e7a4:	059b      	lsls	r3, r3, #22
 800e7a6:	d4e1      	bmi.n	800e76c <_fflush_r+0xc>
 800e7a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7aa:	f7ff fb77 	bl	800de9c <__retarget_lock_release_recursive>
 800e7ae:	e7dd      	b.n	800e76c <_fflush_r+0xc>

0800e7b0 <__swhatbuf_r>:
 800e7b0:	b570      	push	{r4, r5, r6, lr}
 800e7b2:	460c      	mov	r4, r1
 800e7b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7b8:	2900      	cmp	r1, #0
 800e7ba:	b096      	sub	sp, #88	; 0x58
 800e7bc:	4615      	mov	r5, r2
 800e7be:	461e      	mov	r6, r3
 800e7c0:	da0d      	bge.n	800e7de <__swhatbuf_r+0x2e>
 800e7c2:	89a3      	ldrh	r3, [r4, #12]
 800e7c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e7c8:	f04f 0100 	mov.w	r1, #0
 800e7cc:	bf0c      	ite	eq
 800e7ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e7d2:	2340      	movne	r3, #64	; 0x40
 800e7d4:	2000      	movs	r0, #0
 800e7d6:	6031      	str	r1, [r6, #0]
 800e7d8:	602b      	str	r3, [r5, #0]
 800e7da:	b016      	add	sp, #88	; 0x58
 800e7dc:	bd70      	pop	{r4, r5, r6, pc}
 800e7de:	466a      	mov	r2, sp
 800e7e0:	f000 f88a 	bl	800e8f8 <_fstat_r>
 800e7e4:	2800      	cmp	r0, #0
 800e7e6:	dbec      	blt.n	800e7c2 <__swhatbuf_r+0x12>
 800e7e8:	9901      	ldr	r1, [sp, #4]
 800e7ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e7ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e7f2:	4259      	negs	r1, r3
 800e7f4:	4159      	adcs	r1, r3
 800e7f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7fa:	e7eb      	b.n	800e7d4 <__swhatbuf_r+0x24>

0800e7fc <__smakebuf_r>:
 800e7fc:	898b      	ldrh	r3, [r1, #12]
 800e7fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e800:	079d      	lsls	r5, r3, #30
 800e802:	4606      	mov	r6, r0
 800e804:	460c      	mov	r4, r1
 800e806:	d507      	bpl.n	800e818 <__smakebuf_r+0x1c>
 800e808:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e80c:	6023      	str	r3, [r4, #0]
 800e80e:	6123      	str	r3, [r4, #16]
 800e810:	2301      	movs	r3, #1
 800e812:	6163      	str	r3, [r4, #20]
 800e814:	b002      	add	sp, #8
 800e816:	bd70      	pop	{r4, r5, r6, pc}
 800e818:	ab01      	add	r3, sp, #4
 800e81a:	466a      	mov	r2, sp
 800e81c:	f7ff ffc8 	bl	800e7b0 <__swhatbuf_r>
 800e820:	9900      	ldr	r1, [sp, #0]
 800e822:	4605      	mov	r5, r0
 800e824:	4630      	mov	r0, r6
 800e826:	f7ff fbb5 	bl	800df94 <_malloc_r>
 800e82a:	b948      	cbnz	r0, 800e840 <__smakebuf_r+0x44>
 800e82c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e830:	059a      	lsls	r2, r3, #22
 800e832:	d4ef      	bmi.n	800e814 <__smakebuf_r+0x18>
 800e834:	f023 0303 	bic.w	r3, r3, #3
 800e838:	f043 0302 	orr.w	r3, r3, #2
 800e83c:	81a3      	strh	r3, [r4, #12]
 800e83e:	e7e3      	b.n	800e808 <__smakebuf_r+0xc>
 800e840:	89a3      	ldrh	r3, [r4, #12]
 800e842:	6020      	str	r0, [r4, #0]
 800e844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e848:	81a3      	strh	r3, [r4, #12]
 800e84a:	9b00      	ldr	r3, [sp, #0]
 800e84c:	6163      	str	r3, [r4, #20]
 800e84e:	9b01      	ldr	r3, [sp, #4]
 800e850:	6120      	str	r0, [r4, #16]
 800e852:	b15b      	cbz	r3, 800e86c <__smakebuf_r+0x70>
 800e854:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e858:	4630      	mov	r0, r6
 800e85a:	f000 f85f 	bl	800e91c <_isatty_r>
 800e85e:	b128      	cbz	r0, 800e86c <__smakebuf_r+0x70>
 800e860:	89a3      	ldrh	r3, [r4, #12]
 800e862:	f023 0303 	bic.w	r3, r3, #3
 800e866:	f043 0301 	orr.w	r3, r3, #1
 800e86a:	81a3      	strh	r3, [r4, #12]
 800e86c:	89a3      	ldrh	r3, [r4, #12]
 800e86e:	431d      	orrs	r5, r3
 800e870:	81a5      	strh	r5, [r4, #12]
 800e872:	e7cf      	b.n	800e814 <__smakebuf_r+0x18>

0800e874 <_putc_r>:
 800e874:	b570      	push	{r4, r5, r6, lr}
 800e876:	460d      	mov	r5, r1
 800e878:	4614      	mov	r4, r2
 800e87a:	4606      	mov	r6, r0
 800e87c:	b118      	cbz	r0, 800e886 <_putc_r+0x12>
 800e87e:	6a03      	ldr	r3, [r0, #32]
 800e880:	b90b      	cbnz	r3, 800e886 <_putc_r+0x12>
 800e882:	f7ff f8f5 	bl	800da70 <__sinit>
 800e886:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e888:	07d8      	lsls	r0, r3, #31
 800e88a:	d405      	bmi.n	800e898 <_putc_r+0x24>
 800e88c:	89a3      	ldrh	r3, [r4, #12]
 800e88e:	0599      	lsls	r1, r3, #22
 800e890:	d402      	bmi.n	800e898 <_putc_r+0x24>
 800e892:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e894:	f7ff fb01 	bl	800de9a <__retarget_lock_acquire_recursive>
 800e898:	68a3      	ldr	r3, [r4, #8]
 800e89a:	3b01      	subs	r3, #1
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	60a3      	str	r3, [r4, #8]
 800e8a0:	da05      	bge.n	800e8ae <_putc_r+0x3a>
 800e8a2:	69a2      	ldr	r2, [r4, #24]
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	db12      	blt.n	800e8ce <_putc_r+0x5a>
 800e8a8:	b2eb      	uxtb	r3, r5
 800e8aa:	2b0a      	cmp	r3, #10
 800e8ac:	d00f      	beq.n	800e8ce <_putc_r+0x5a>
 800e8ae:	6823      	ldr	r3, [r4, #0]
 800e8b0:	1c5a      	adds	r2, r3, #1
 800e8b2:	6022      	str	r2, [r4, #0]
 800e8b4:	701d      	strb	r5, [r3, #0]
 800e8b6:	b2ed      	uxtb	r5, r5
 800e8b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e8ba:	07da      	lsls	r2, r3, #31
 800e8bc:	d405      	bmi.n	800e8ca <_putc_r+0x56>
 800e8be:	89a3      	ldrh	r3, [r4, #12]
 800e8c0:	059b      	lsls	r3, r3, #22
 800e8c2:	d402      	bmi.n	800e8ca <_putc_r+0x56>
 800e8c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8c6:	f7ff fae9 	bl	800de9c <__retarget_lock_release_recursive>
 800e8ca:	4628      	mov	r0, r5
 800e8cc:	bd70      	pop	{r4, r5, r6, pc}
 800e8ce:	4629      	mov	r1, r5
 800e8d0:	4622      	mov	r2, r4
 800e8d2:	4630      	mov	r0, r6
 800e8d4:	f7ff f9bb 	bl	800dc4e <__swbuf_r>
 800e8d8:	4605      	mov	r5, r0
 800e8da:	e7ed      	b.n	800e8b8 <_putc_r+0x44>

0800e8dc <strchr>:
 800e8dc:	b2c9      	uxtb	r1, r1
 800e8de:	4603      	mov	r3, r0
 800e8e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8e4:	b11a      	cbz	r2, 800e8ee <strchr+0x12>
 800e8e6:	428a      	cmp	r2, r1
 800e8e8:	d1f9      	bne.n	800e8de <strchr+0x2>
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	4770      	bx	lr
 800e8ee:	2900      	cmp	r1, #0
 800e8f0:	bf18      	it	ne
 800e8f2:	2300      	movne	r3, #0
 800e8f4:	e7f9      	b.n	800e8ea <strchr+0xe>
	...

0800e8f8 <_fstat_r>:
 800e8f8:	b538      	push	{r3, r4, r5, lr}
 800e8fa:	4d07      	ldr	r5, [pc, #28]	; (800e918 <_fstat_r+0x20>)
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	4604      	mov	r4, r0
 800e900:	4608      	mov	r0, r1
 800e902:	4611      	mov	r1, r2
 800e904:	602b      	str	r3, [r5, #0]
 800e906:	f7f4 fdbe 	bl	8003486 <_fstat>
 800e90a:	1c43      	adds	r3, r0, #1
 800e90c:	d102      	bne.n	800e914 <_fstat_r+0x1c>
 800e90e:	682b      	ldr	r3, [r5, #0]
 800e910:	b103      	cbz	r3, 800e914 <_fstat_r+0x1c>
 800e912:	6023      	str	r3, [r4, #0]
 800e914:	bd38      	pop	{r3, r4, r5, pc}
 800e916:	bf00      	nop
 800e918:	20001a80 	.word	0x20001a80

0800e91c <_isatty_r>:
 800e91c:	b538      	push	{r3, r4, r5, lr}
 800e91e:	4d06      	ldr	r5, [pc, #24]	; (800e938 <_isatty_r+0x1c>)
 800e920:	2300      	movs	r3, #0
 800e922:	4604      	mov	r4, r0
 800e924:	4608      	mov	r0, r1
 800e926:	602b      	str	r3, [r5, #0]
 800e928:	f7f4 fdbd 	bl	80034a6 <_isatty>
 800e92c:	1c43      	adds	r3, r0, #1
 800e92e:	d102      	bne.n	800e936 <_isatty_r+0x1a>
 800e930:	682b      	ldr	r3, [r5, #0]
 800e932:	b103      	cbz	r3, 800e936 <_isatty_r+0x1a>
 800e934:	6023      	str	r3, [r4, #0]
 800e936:	bd38      	pop	{r3, r4, r5, pc}
 800e938:	20001a80 	.word	0x20001a80

0800e93c <_sbrk_r>:
 800e93c:	b538      	push	{r3, r4, r5, lr}
 800e93e:	4d06      	ldr	r5, [pc, #24]	; (800e958 <_sbrk_r+0x1c>)
 800e940:	2300      	movs	r3, #0
 800e942:	4604      	mov	r4, r0
 800e944:	4608      	mov	r0, r1
 800e946:	602b      	str	r3, [r5, #0]
 800e948:	f7f4 fdc6 	bl	80034d8 <_sbrk>
 800e94c:	1c43      	adds	r3, r0, #1
 800e94e:	d102      	bne.n	800e956 <_sbrk_r+0x1a>
 800e950:	682b      	ldr	r3, [r5, #0]
 800e952:	b103      	cbz	r3, 800e956 <_sbrk_r+0x1a>
 800e954:	6023      	str	r3, [r4, #0]
 800e956:	bd38      	pop	{r3, r4, r5, pc}
 800e958:	20001a80 	.word	0x20001a80

0800e95c <_init>:
 800e95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e95e:	bf00      	nop
 800e960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e962:	bc08      	pop	{r3}
 800e964:	469e      	mov	lr, r3
 800e966:	4770      	bx	lr

0800e968 <_fini>:
 800e968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e96a:	bf00      	nop
 800e96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e96e:	bc08      	pop	{r3}
 800e970:	469e      	mov	lr, r3
 800e972:	4770      	bx	lr
